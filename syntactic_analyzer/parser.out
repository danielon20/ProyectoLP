Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY
    CAP
    COMMENT
    INTERFACE
    JOIN
    MAP
    MULTI_COMMENT
    PACKAGE

Grammar

Rule 0     S' -> program
Rule 1     program -> funcs main_func
Rule 2     program -> main_func funcs
Rule 3     program -> funcs main_func funcs
Rule 4     funcs -> func_declaration
Rule 5     funcs -> func_declaration funcs
Rule 6     funcs -> <empty>
Rule 7     codigo -> rule
Rule 8     codigo -> more_rules
Rule 9     more_rules -> rule codigo
Rule 10    rule -> impresion COLON
Rule 11    rule -> impresion
Rule 12    rule -> scan_func COLON
Rule 13    rule -> scan_func
Rule 14    rule -> expression COLON
Rule 15    rule -> expression
Rule 16    rule -> cicloFor
Rule 17    rule -> comparison
Rule 18    rule -> logic_operation
Rule 19    rule -> decVar COLON
Rule 20    rule -> decVar
Rule 21    rule -> decConst COLON
Rule 22    rule -> decConst
Rule 23    rule -> var_asignation
Rule 24    rule -> var_asignation COLON
Rule 25    rule -> funciones
Rule 26    rule -> funciones COLON
Rule 27    rule -> SenIF
Rule 28    rule -> SenElseIF
Rule 29    rule -> SenElse
Rule 30    rule -> SenStruct
Rule 31    rule -> cStruct
Rule 32    rule -> switch_statement
Rule 33    rule -> array_declaration COLON
Rule 34    rule -> array_declaration
Rule 35    rule -> array_var COLON
Rule 36    rule -> array_var
Rule 37    rule -> array_assignment COLON
Rule 38    rule -> array_assignment
Rule 39    rule -> slice_declaration COLON
Rule 40    rule -> slice_declaration
Rule 41    rule -> slice_var COLON
Rule 42    rule -> slice_var
Rule 43    rule -> slice_assignment COLON
Rule 44    rule -> slice_assignment
Rule 45    rule -> map_declaration COLON
Rule 46    rule -> map_declaration
Rule 47    rule -> map_assignment COLON
Rule 48    rule -> map_assignment
Rule 49    rule -> func_declaration
Rule 50    rule -> main_func
Rule 51    values -> STRING
Rule 52    values -> INTEGER
Rule 53    values -> FLOAT
Rule 54    values -> TRUE
Rule 55    values -> FALSE
Rule 56    data_types -> INT32
Rule 57    data_types -> INT64
Rule 58    data_types -> FLOAT32
Rule 59    data_types -> FLOAT64
Rule 60    data_types -> BYTE
Rule 61    data_types -> WFLOAT
Rule 62    data_types -> WSTRING
Rule 63    data_types -> WINT
Rule 64    data_types -> BOOL
Rule 65    operations -> expression
Rule 66    operations -> comparison
Rule 67    operations -> logic_operation
Rule 68    arr_content -> LLLAVE items COMA more_items RLLAVE
Rule 69    arr_content -> LLLAVE items RLLAVE
Rule 70    more_items -> items COMA more_items
Rule 71    more_items -> items
Rule 72    items -> values
Rule 73    items -> operations
Rule 74    data_structure -> array_var
Rule 75    data_structure -> map_var
Rule 76    data_structure -> slice_var
Rule 77    var_asignation -> ID EQUAL any
Rule 78    any -> values
Rule 79    any -> operations
Rule 80    any -> ID
Rule 81    any -> data_structure
Rule 82    any -> funciones
Rule 83    something -> ID
Rule 84    something -> data_structure
Rule 85    something -> values
Rule 86    something -> operations
Rule 87    something -> funciones
Rule 88    SenIF -> IF comparison LLLAVE codigo RLLAVE
Rule 89    SenIF -> IF logic_operation LLLAVE codigo RLLAVE
Rule 90    SenIF -> IF TRUE LLLAVE codigo RLLAVE
Rule 91    SenIF -> IF FALSE LLLAVE codigo RLLAVE
Rule 92    SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE
Rule 93    SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE
Rule 94    SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE
Rule 95    SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE
Rule 96    SenElse -> ELSE LLLAVE codigo RLLAVE
Rule 97    SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE
Rule 98    declaration -> variable data_types
Rule 99    declaration -> declaration variable data_types
Rule 100   variable -> ID
Rule 101   cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE
Rule 102   asignaciones -> ID POINTS valor
Rule 103   asignaciones -> ID POINTS valor COMA asignaciones
Rule 104   valor -> ID
Rule 105   valor -> INTEGER
Rule 106   valor -> TRUE
Rule 107   valor -> FALSE
Rule 108   valor -> STRING
Rule 109   decConst -> CONST ID data_type_and_value
Rule 110   decConst -> CONST ID EQUAL ID
Rule 111   decConst -> CONST ID EQUAL data_structure
Rule 112   decVar -> static
Rule 113   decVar -> dynamic
Rule 114   static -> single
Rule 115   static -> multiple
Rule 116   multiple -> list_var data_types
Rule 117   list_var -> VAR ID COMA more
Rule 118   more -> ID
Rule 119   more -> ID COMA more
Rule 120   single -> VAR ID data_types
Rule 121   single -> VAR ID data_types EQUAL funciones
Rule 122   single -> VAR ID data_types EQUAL data_structure
Rule 123   single -> VAR ID data_type_and_value
Rule 124   dynamic -> ID DEQUAL algo
Rule 125   algo -> values
Rule 126   algo -> operations
Rule 127   algo -> ID
Rule 128   algo -> data_structure
Rule 129   algo -> funciones
Rule 130   funciones -> APPEND LPAREN ID COMA values RPAREN
Rule 131   funciones -> APPEND LPAREN ID COMA ID RPAREN
Rule 132   funciones -> LEN LPAREN ID RPAREN
Rule 133   funciones -> COPY LPAREN ID COMA ID RPAREN
Rule 134   funciones -> DELETE LPAREN ID COMA clave RPAREN
Rule 135   funciones -> call_func
Rule 136   clave -> ID
Rule 137   clave -> values
Rule 138   comparison -> value op value
Rule 139   value -> ID
Rule 140   value -> expression
Rule 141   op -> GREATER
Rule 142   op -> SMALLER
Rule 143   op -> GREATER_OR_EQUAL
Rule 144   op -> SMALLER_OR_EQUAL
Rule 145   op -> EQUAL_COMPARE
Rule 146   op -> NOT_EQUAL
Rule 147   slice_declaration -> VAR ID LCORCHE RCORCHE data_types
Rule 148   slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content
Rule 149   slice_declaration -> VAR ID EQUAL funM
Rule 150   slice_declaration -> ID DEQUAL funM
Rule 151   slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content
Rule 152   funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN
Rule 153   funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN
Rule 154   cap -> INTEGER
Rule 155   cap -> ID
Rule 156   cap -> expression
Rule 157   slice_var -> ID LCORCHE index_s RCORCHE
Rule 158   index_s -> ID
Rule 159   index_s -> INTEGER
Rule 160   index_s -> expression
Rule 161   slice_assignment -> slice_var EQUAL something_s
Rule 162   something_s -> ID
Rule 163   something_s -> array_var
Rule 164   something_s -> values
Rule 165   something_s -> operations
Rule 166   cicloFor -> FOR comparison LLLAVE codigo RLLAVE
Rule 167   cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE
Rule 168   cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
Rule 169   incre -> ID INCREASE
Rule 170   incre -> ID DECREASE
Rule 171   decVarOne -> ID DEQUAL ID
Rule 172   decVarOne -> ID DEQUAL INTEGER
Rule 173   impresion -> PRINT LPAREN something RPAREN
Rule 174   impresion -> PRINT LPAREN error RPAREN
Rule 175   expression -> something_ex
Rule 176   expression -> something_ex adicionaEx
Rule 177   adicionaEx -> op something_ex
Rule 178   adicionaEx -> op something_ex adicionaEx
Rule 179   something_ex -> ID
Rule 180   something_ex -> INTEGER
Rule 181   something_ex -> FLOAT
Rule 182   something_ex -> data_structure
Rule 183   something_ex -> funciones
Rule 184   op -> PLUS
Rule 185   op -> TIMES
Rule 186   op -> DIVIDE
Rule 187   op -> MINUS
Rule 188   op -> MOD
Rule 189   logic_operation -> logic_value logic_recu
Rule 190   logic_operation -> negation
Rule 191   logic_recu -> logic_op logic_value
Rule 192   logic_recu -> logic_op logic_value logic_recu
Rule 193   logic_value -> negation
Rule 194   logic_value -> comparison
Rule 195   logic_value -> ID
Rule 196   negation -> NOT comparison
Rule 197   negation -> NOT ID
Rule 198   logic_op -> AND
Rule 199   logic_op -> OR
Rule 200   main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
Rule 201   scan_func -> SCAN LPAREN POINTER RPAREN
Rule 202   call_func -> ID LPAREN list_params RPAREN
Rule 203   call_func -> ID LPAREN RPAREN
Rule 204   list_params -> ID
Rule 205   list_params -> ID COMA more_p
Rule 206   more_p -> list_params
Rule 207   data_type_and_value -> WSTRING EQUAL str_value
Rule 208   data_type_and_value -> WINT EQUAL int_value
Rule 209   data_type_and_value -> INT32 EQUAL int_value
Rule 210   data_type_and_value -> INT64 EQUAL int_value
Rule 211   data_type_and_value -> WFLOAT EQUAL float_value
Rule 212   data_type_and_value -> FLOAT32 EQUAL float_value
Rule 213   data_type_and_value -> FLOAT64 EQUAL float_value
Rule 214   data_type_and_value -> BOOL EQUAL bool_value
Rule 215   str_value -> STRING
Rule 216   str_value -> ID
Rule 217   int_value -> INTEGER
Rule 218   int_value -> expression
Rule 219   bool_value -> TRUE
Rule 220   bool_value -> FALSE
Rule 221   bool_value -> comparison
Rule 222   bool_value -> logic_operation
Rule 223   float_value -> FLOAT
Rule 224   float_value -> expression
Rule 225   data_type_and_value -> WSTRING EQUAL error
Rule 226   data_type_and_value -> WINT EQUAL error
Rule 227   data_type_and_value -> INT32 EQUAL error
Rule 228   data_type_and_value -> INT64 EQUAL error
Rule 229   data_type_and_value -> WFLOAT EQUAL error
Rule 230   data_type_and_value -> FLOAT32 EQUAL error
Rule 231   data_type_and_value -> FLOAT64 EQUAL error
Rule 232   data_type_and_value -> BOOL EQUAL error
Rule 233   switch_statement -> SWITCH ID LLLAVE cases RLLAVE
Rule 234   cases -> CASE values POINTS codigo
Rule 235   cases -> CASE values POINTS codigo more
Rule 236   more -> cases
Rule 237   more -> DEFAULT POINTS codigo
Rule 238   array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types
Rule 239   array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
Rule 240   capacity -> INTEGER
Rule 241   capacity -> ID
Rule 242   capacity -> expression
Rule 243   array_var -> ID LCORCHE index RCORCHE
Rule 244   index -> ID
Rule 245   index -> INTEGER
Rule 246   index -> expression
Rule 247   array_assignment -> array_var EQUAL something
Rule 248   map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types
Rule 249   map_var -> ID LCORCHE key RCORCHE
Rule 250   key -> ID
Rule 251   key -> values
Rule 252   key -> operations
Rule 253   map_assignment -> map_var EQUAL something
Rule 254   func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
Rule 255   func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
Rule 256   func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE
Rule 257   body -> codigo return_value
Rule 258   body -> return_value
Rule 259   return_value -> retorno COLON
Rule 260   return_value -> retorno
Rule 261   retorno -> ID
Rule 262   retorno -> values
Rule 263   retorno -> operations
Rule 264   retorno -> data_structure
Rule 265   params -> ID data_types
Rule 266   params -> more_params
Rule 267   more_params -> ID data_types COMA params

Terminals, with rules where they appear

AND                  : 198
APPEND               : 130 131
ARRAY                : 
BOOL                 : 64 214 232
BYTE                 : 60
CAP                  : 
CASE                 : 234 235
COLON                : 10 12 14 19 21 24 26 33 35 37 39 41 43 45 47 168 168 259
COMA                 : 68 70 103 117 119 130 131 133 134 152 153 153 205 267
COMMENT              : 
CONST                : 109 110 111
COPY                 : 133
DECREASE             : 170
DEFAULT              : 237
DELETE               : 134
DEQUAL               : 101 124 150 151 171 172
DIVIDE               : 186
ELSE                 : 92 93 94 95 96
EQUAL                : 77 110 111 121 122 148 149 161 207 208 209 210 211 212 213 214 225 226 227 228 229 230 231 232 239 247 253
EQUAL_COMPARE        : 145
FALSE                : 55 91 95 107 220
FLOAT                : 53 181 223
FLOAT32              : 58 212 230
FLOAT64              : 59 213 231
FOR                  : 166 167 168
FUNC                 : 200 254 255 256
GREATER              : 141
GREATER_OR_EQUAL     : 143
ID                   : 77 80 83 97 100 101 101 102 103 104 109 110 110 111 117 118 119 120 121 122 123 124 127 130 131 131 132 133 133 134 136 139 147 148 149 150 151 155 157 158 162 169 170 171 171 172 179 195 197 202 203 204 205 216 233 238 239 241 243 244 248 249 250 254 255 256 261 265 267
IF                   : 88 89 90 91 92 93 94 95
INCREASE             : 169
INT32                : 56 209 227
INT64                : 57 210 228
INTEGER              : 52 105 154 159 172 180 217 240 245
INTERFACE            : 
JOIN                 : 
LCORCHE              : 147 148 151 152 153 157 238 239 243 248 249
LEN                  : 132
LLLAVE               : 68 69 88 89 90 91 92 93 94 95 96 97 101 166 167 168 200 233 254 255 256
LPAREN               : 130 131 132 133 134 152 153 173 174 200 201 202 203 254 255 256
MAIN                 : 200
MAKE                 : 152 153
MAP                  : 
MINUS                : 187
MOD                  : 188
MULTI_COMMENT        : 
NOT                  : 196 197
NOT_EQUAL            : 146
OR                   : 199
PACKAGE              : 
PLUS                 : 184
POINTER              : 201
POINTS               : 102 103 234 235 237
PRINT                : 173 174
RCORCHE              : 147 148 151 152 153 157 238 239 243 248 249
RETURN               : 254 255
RLLAVE               : 68 69 88 89 90 91 92 93 94 95 96 97 101 166 167 168 200 233 254 255 256
RPAREN               : 130 131 132 133 134 152 153 173 174 200 201 202 203 254 255 256
SCAN                 : 201
SMALLER              : 142
SMALLER_OR_EQUAL     : 144
STRING               : 51 108 215
STRUCT               : 97
SWITCH               : 233
TIMES                : 185
TRUE                 : 54 90 94 106 219
TYPE                 : 97
VAR                  : 117 120 121 122 123 147 148 149 238 239 248
WFLOAT               : 61 211 229
WINT                 : 63 208 226
WSTRING              : 62 207 225
error                : 174 225 226 227 228 229 230 231 232

Nonterminals, with rules where they appear

SenElse              : 29
SenElseIF            : 28
SenIF                : 27
SenStruct            : 30
adicionaEx           : 176 178
algo                 : 124
any                  : 77
arr_content          : 148 151 239
array_assignment     : 37 38
array_declaration    : 33 34
array_var            : 35 36 74 163 247
asignaciones         : 101 103
body                 : 255
bool_value           : 214
cStruct              : 31
call_func            : 135
cap                  : 152 153 153
capacity             : 238 239
cases                : 233 236
cicloFor             : 16
clave                : 134
codigo               : 9 88 89 90 91 92 93 94 95 96 166 167 168 200 234 235 237 254 256 257
comparison           : 17 66 88 92 166 168 194 196 221
data_structure       : 81 84 111 122 128 182 264
data_type_and_value  : 109 123
data_types           : 98 99 116 120 121 122 147 148 151 152 153 238 239 248 248 254 255 265 267
decConst             : 21 22
decVar               : 19 20
decVarOne            : 168
declaration          : 97 99
dynamic              : 113
expression           : 14 15 65 140 156 160 218 224 242 246
float_value          : 211 212 213
funM                 : 149 150
func_declaration     : 4 5 49
funciones            : 25 26 82 87 121 129 183
funcs                : 1 2 3 3 5
impresion            : 10 11
incre                : 168
index                : 243
index_s              : 157
int_value            : 208 209 210
items                : 68 69 70 71
key                  : 249
list_params          : 202 206
list_var             : 116
logic_op             : 191 192
logic_operation      : 18 67 89 93 167 222
logic_recu           : 189 192
logic_value          : 189 191 192
main_func            : 1 2 3 50
map_assignment       : 47 48
map_declaration      : 45 46
map_var              : 75 253
more                 : 117 119 235
more_items           : 68 70
more_p               : 205
more_params          : 266
more_rules           : 8
multiple             : 115
negation             : 190 193
op                   : 138 177 178
operations           : 73 79 86 126 165 252 263
params               : 254 255 256 267
program              : 0
retorno              : 254 259 260
return_value         : 257 258
rule                 : 7 9
scan_func            : 12 13
single               : 114
slice_assignment     : 43 44
slice_declaration    : 39 40
slice_var            : 41 42 76 161
something            : 173 247 253
something_ex         : 175 176 177 178
something_s          : 161
static               : 112
str_value            : 207
switch_statement     : 32
valor                : 102 103
value                : 138 138
values               : 72 78 85 125 130 137 164 234 235 251 262
var_asignation       : 23 24
variable             : 98 99

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . funcs main_func
    (2) program -> . main_func funcs
    (3) program -> . funcs main_func funcs
    (4) funcs -> . func_declaration
    (5) funcs -> . func_declaration funcs
    (6) funcs -> .
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE

  ! shift/reduce conflict for FUNC resolved as shift
    FUNC            shift and go to state 5

  ! FUNC            [ reduce using rule 6 (funcs -> .) ]

    program                        shift and go to state 1
    funcs                          shift and go to state 2
    main_func                      shift and go to state 3
    func_declaration               shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> funcs . main_func
    (3) program -> funcs . main_func funcs
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE

    FUNC            shift and go to state 7

    main_func                      shift and go to state 6

state 3

    (2) program -> main_func . funcs
    (4) funcs -> . func_declaration
    (5) funcs -> . func_declaration funcs
    (6) funcs -> .
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE

    $end            reduce using rule 6 (funcs -> .)
    FUNC            shift and go to state 9

    funcs                          shift and go to state 8
    func_declaration               shift and go to state 4

state 4

    (4) funcs -> func_declaration .
    (5) funcs -> func_declaration . funcs
    (4) funcs -> . func_declaration
    (5) funcs -> . func_declaration funcs
    (6) funcs -> .
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE

  ! reduce/reduce conflict for FUNC resolved using rule 4 (funcs -> func_declaration .)
  ! reduce/reduce conflict for $end resolved using rule 4 (funcs -> func_declaration .)
  ! shift/reduce conflict for FUNC resolved as shift
    $end            reduce using rule 4 (funcs -> func_declaration .)
    FUNC            shift and go to state 9

  ! FUNC            [ reduce using rule 4 (funcs -> func_declaration .) ]
  ! FUNC            [ reduce using rule 6 (funcs -> .) ]
  ! $end            [ reduce using rule 6 (funcs -> .) ]

    func_declaration               shift and go to state 4
    funcs                          shift and go to state 10

state 5

    (200) main_func -> FUNC . MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (254) func_declaration -> FUNC . ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> FUNC . ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> FUNC . ID LPAREN params RPAREN LLLAVE codigo RLLAVE

    MAIN            shift and go to state 11
    ID              shift and go to state 12


state 6

    (1) program -> funcs main_func .
    (3) program -> funcs main_func . funcs
    (4) funcs -> . func_declaration
    (5) funcs -> . func_declaration funcs
    (6) funcs -> .
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE

  ! reduce/reduce conflict for $end resolved using rule 1 (program -> funcs main_func .)
    $end            reduce using rule 1 (program -> funcs main_func .)
    FUNC            shift and go to state 9

  ! $end            [ reduce using rule 6 (funcs -> .) ]

    funcs                          shift and go to state 13
    func_declaration               shift and go to state 4

state 7

    (200) main_func -> FUNC . MAIN LPAREN RPAREN LLLAVE codigo RLLAVE

    MAIN            shift and go to state 11


state 8

    (2) program -> main_func funcs .

    $end            reduce using rule 2 (program -> main_func funcs .)


state 9

    (254) func_declaration -> FUNC . ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> FUNC . ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> FUNC . ID LPAREN params RPAREN LLLAVE codigo RLLAVE

    ID              shift and go to state 12


state 10

    (5) funcs -> func_declaration funcs .

    FUNC            reduce using rule 5 (funcs -> func_declaration funcs .)
    $end            reduce using rule 5 (funcs -> func_declaration funcs .)


state 11

    (200) main_func -> FUNC MAIN . LPAREN RPAREN LLLAVE codigo RLLAVE

    LPAREN          shift and go to state 14


state 12

    (254) func_declaration -> FUNC ID . LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> FUNC ID . LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> FUNC ID . LPAREN params RPAREN LLLAVE codigo RLLAVE

    LPAREN          shift and go to state 15


state 13

    (3) program -> funcs main_func funcs .

    $end            reduce using rule 3 (program -> funcs main_func funcs .)


state 14

    (200) main_func -> FUNC MAIN LPAREN . RPAREN LLLAVE codigo RLLAVE

    RPAREN          shift and go to state 16


state 15

    (254) func_declaration -> FUNC ID LPAREN . params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> FUNC ID LPAREN . params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> FUNC ID LPAREN . params RPAREN LLLAVE codigo RLLAVE
    (265) params -> . ID data_types
    (266) params -> . more_params
    (267) more_params -> . ID data_types COMA params

    ID              shift and go to state 17

    params                         shift and go to state 18
    more_params                    shift and go to state 19

state 16

    (200) main_func -> FUNC MAIN LPAREN RPAREN . LLLAVE codigo RLLAVE

    LLLAVE          shift and go to state 20


state 17

    (265) params -> ID . data_types
    (267) more_params -> ID . data_types COMA params
    (56) data_types -> . INT32
    (57) data_types -> . INT64
    (58) data_types -> . FLOAT32
    (59) data_types -> . FLOAT64
    (60) data_types -> . BYTE
    (61) data_types -> . WFLOAT
    (62) data_types -> . WSTRING
    (63) data_types -> . WINT
    (64) data_types -> . BOOL

    INT32           shift and go to state 22
    INT64           shift and go to state 23
    FLOAT32         shift and go to state 24
    FLOAT64         shift and go to state 25
    BYTE            shift and go to state 26
    WFLOAT          shift and go to state 27
    WSTRING         shift and go to state 28
    WINT            shift and go to state 29
    BOOL            shift and go to state 30

    data_types                     shift and go to state 21

state 18

    (254) func_declaration -> FUNC ID LPAREN params . RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> FUNC ID LPAREN params . RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> FUNC ID LPAREN params . RPAREN LLLAVE codigo RLLAVE

    RPAREN          shift and go to state 31


state 19

    (266) params -> more_params .

    RPAREN          reduce using rule 266 (params -> more_params .)


state 20

    (200) main_func -> FUNC MAIN LPAREN RPAREN LLLAVE . codigo RLLAVE
    (7) codigo -> . rule
    (8) codigo -> . more_rules
    (10) rule -> . impresion COLON
    (11) rule -> . impresion
    (12) rule -> . scan_func COLON
    (13) rule -> . scan_func
    (14) rule -> . expression COLON
    (15) rule -> . expression
    (16) rule -> . cicloFor
    (17) rule -> . comparison
    (18) rule -> . logic_operation
    (19) rule -> . decVar COLON
    (20) rule -> . decVar
    (21) rule -> . decConst COLON
    (22) rule -> . decConst
    (23) rule -> . var_asignation
    (24) rule -> . var_asignation COLON
    (25) rule -> . funciones
    (26) rule -> . funciones COLON
    (27) rule -> . SenIF
    (28) rule -> . SenElseIF
    (29) rule -> . SenElse
    (30) rule -> . SenStruct
    (31) rule -> . cStruct
    (32) rule -> . switch_statement
    (33) rule -> . array_declaration COLON
    (34) rule -> . array_declaration
    (35) rule -> . array_var COLON
    (36) rule -> . array_var
    (37) rule -> . array_assignment COLON
    (38) rule -> . array_assignment
    (39) rule -> . slice_declaration COLON
    (40) rule -> . slice_declaration
    (41) rule -> . slice_var COLON
    (42) rule -> . slice_var
    (43) rule -> . slice_assignment COLON
    (44) rule -> . slice_assignment
    (45) rule -> . map_declaration COLON
    (46) rule -> . map_declaration
    (47) rule -> . map_assignment COLON
    (48) rule -> . map_assignment
    (49) rule -> . func_declaration
    (50) rule -> . main_func
    (9) more_rules -> . rule codigo
    (173) impresion -> . PRINT LPAREN something RPAREN
    (174) impresion -> . PRINT LPAREN error RPAREN
    (201) scan_func -> . SCAN LPAREN POINTER RPAREN
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (166) cicloFor -> . FOR comparison LLLAVE codigo RLLAVE
    (167) cicloFor -> . FOR logic_operation LLLAVE codigo RLLAVE
    (168) cicloFor -> . FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (112) decVar -> . static
    (113) decVar -> . dynamic
    (109) decConst -> . CONST ID data_type_and_value
    (110) decConst -> . CONST ID EQUAL ID
    (111) decConst -> . CONST ID EQUAL data_structure
    (77) var_asignation -> . ID EQUAL any
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (88) SenIF -> . IF comparison LLLAVE codigo RLLAVE
    (89) SenIF -> . IF logic_operation LLLAVE codigo RLLAVE
    (90) SenIF -> . IF TRUE LLLAVE codigo RLLAVE
    (91) SenIF -> . IF FALSE LLLAVE codigo RLLAVE
    (92) SenElseIF -> . ELSE IF comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> . ELSE IF logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> . ELSE IF TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> . ELSE IF FALSE LLLAVE codigo RLLAVE
    (96) SenElse -> . ELSE LLLAVE codigo RLLAVE
    (97) SenStruct -> . TYPE ID STRUCT LLLAVE declaration RLLAVE
    (101) cStruct -> . ID DEQUAL ID LLLAVE asignaciones RLLAVE
    (233) switch_statement -> . SWITCH ID LLLAVE cases RLLAVE
    (238) array_declaration -> . VAR ID LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> . VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (243) array_var -> . ID LCORCHE index RCORCHE
    (247) array_assignment -> . array_var EQUAL something
    (147) slice_declaration -> . VAR ID LCORCHE RCORCHE data_types
    (148) slice_declaration -> . VAR ID EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> . VAR ID EQUAL funM
    (150) slice_declaration -> . ID DEQUAL funM
    (151) slice_declaration -> . ID DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (161) slice_assignment -> . slice_var EQUAL something_s
    (248) map_declaration -> . VAR ID LCORCHE data_types RCORCHE data_types
    (253) map_assignment -> . map_var EQUAL something
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (114) static -> . single
    (115) static -> . multiple
    (124) dynamic -> . ID DEQUAL algo
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (249) map_var -> . ID LCORCHE key RCORCHE
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (120) single -> . VAR ID data_types
    (121) single -> . VAR ID data_types EQUAL funciones
    (122) single -> . VAR ID data_types EQUAL data_structure
    (123) single -> . VAR ID data_type_and_value
    (116) multiple -> . list_var data_types
    (117) list_var -> . VAR ID COMA more

    PRINT           shift and go to state 62
    SCAN            shift and go to state 63
    FOR             shift and go to state 65
    CONST           shift and go to state 71
    ID              shift and go to state 72
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    IF              shift and go to state 79
    ELSE            shift and go to state 80
    TYPE            shift and go to state 81
    SWITCH          shift and go to state 82
    VAR             shift and go to state 83
    FUNC            shift and go to state 32
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    NOT             shift and go to state 87

    codigo                         shift and go to state 33
    rule                           shift and go to state 34
    more_rules                     shift and go to state 35
    impresion                      shift and go to state 36
    scan_func                      shift and go to state 37
    expression                     shift and go to state 38
    cicloFor                       shift and go to state 39
    comparison                     shift and go to state 40
    logic_operation                shift and go to state 41
    decVar                         shift and go to state 42
    decConst                       shift and go to state 43
    var_asignation                 shift and go to state 44
    funciones                      shift and go to state 45
    SenIF                          shift and go to state 46
    SenElseIF                      shift and go to state 47
    SenElse                        shift and go to state 48
    SenStruct                      shift and go to state 49
    cStruct                        shift and go to state 50
    switch_statement               shift and go to state 51
    array_declaration              shift and go to state 52
    array_var                      shift and go to state 53
    array_assignment               shift and go to state 54
    slice_declaration              shift and go to state 55
    slice_var                      shift and go to state 56
    slice_assignment               shift and go to state 57
    map_declaration                shift and go to state 58
    map_assignment                 shift and go to state 59
    func_declaration               shift and go to state 60
    main_func                      shift and go to state 61
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    static                         shift and go to state 69
    dynamic                        shift and go to state 70
    data_structure                 shift and go to state 73
    call_func                      shift and go to state 78
    map_var                        shift and go to state 84
    single                         shift and go to state 88
    multiple                       shift and go to state 89
    list_var                       shift and go to state 90

state 21

    (265) params -> ID data_types .
    (267) more_params -> ID data_types . COMA params

    RPAREN          reduce using rule 265 (params -> ID data_types .)
    COMA            shift and go to state 91


state 22

    (56) data_types -> INT32 .

    COMA            reduce using rule 56 (data_types -> INT32 .)
    RPAREN          reduce using rule 56 (data_types -> INT32 .)
    LLLAVE          reduce using rule 56 (data_types -> INT32 .)
    COLON           reduce using rule 56 (data_types -> INT32 .)
    PRINT           reduce using rule 56 (data_types -> INT32 .)
    SCAN            reduce using rule 56 (data_types -> INT32 .)
    FOR             reduce using rule 56 (data_types -> INT32 .)
    CONST           reduce using rule 56 (data_types -> INT32 .)
    ID              reduce using rule 56 (data_types -> INT32 .)
    APPEND          reduce using rule 56 (data_types -> INT32 .)
    LEN             reduce using rule 56 (data_types -> INT32 .)
    COPY            reduce using rule 56 (data_types -> INT32 .)
    DELETE          reduce using rule 56 (data_types -> INT32 .)
    IF              reduce using rule 56 (data_types -> INT32 .)
    ELSE            reduce using rule 56 (data_types -> INT32 .)
    TYPE            reduce using rule 56 (data_types -> INT32 .)
    SWITCH          reduce using rule 56 (data_types -> INT32 .)
    VAR             reduce using rule 56 (data_types -> INT32 .)
    FUNC            reduce using rule 56 (data_types -> INT32 .)
    INTEGER         reduce using rule 56 (data_types -> INT32 .)
    FLOAT           reduce using rule 56 (data_types -> INT32 .)
    NOT             reduce using rule 56 (data_types -> INT32 .)
    RLLAVE          reduce using rule 56 (data_types -> INT32 .)
    RETURN          reduce using rule 56 (data_types -> INT32 .)
    STRING          reduce using rule 56 (data_types -> INT32 .)
    TRUE            reduce using rule 56 (data_types -> INT32 .)
    FALSE           reduce using rule 56 (data_types -> INT32 .)
    INT32           reduce using rule 56 (data_types -> INT32 .)
    INT64           reduce using rule 56 (data_types -> INT32 .)
    FLOAT32         reduce using rule 56 (data_types -> INT32 .)
    FLOAT64         reduce using rule 56 (data_types -> INT32 .)
    BYTE            reduce using rule 56 (data_types -> INT32 .)
    WFLOAT          reduce using rule 56 (data_types -> INT32 .)
    WSTRING         reduce using rule 56 (data_types -> INT32 .)
    WINT            reduce using rule 56 (data_types -> INT32 .)
    BOOL            reduce using rule 56 (data_types -> INT32 .)
    DEFAULT         reduce using rule 56 (data_types -> INT32 .)
    CASE            reduce using rule 56 (data_types -> INT32 .)
    RCORCHE         reduce using rule 56 (data_types -> INT32 .)


state 23

    (57) data_types -> INT64 .

    COMA            reduce using rule 57 (data_types -> INT64 .)
    RPAREN          reduce using rule 57 (data_types -> INT64 .)
    LLLAVE          reduce using rule 57 (data_types -> INT64 .)
    COLON           reduce using rule 57 (data_types -> INT64 .)
    PRINT           reduce using rule 57 (data_types -> INT64 .)
    SCAN            reduce using rule 57 (data_types -> INT64 .)
    FOR             reduce using rule 57 (data_types -> INT64 .)
    CONST           reduce using rule 57 (data_types -> INT64 .)
    ID              reduce using rule 57 (data_types -> INT64 .)
    APPEND          reduce using rule 57 (data_types -> INT64 .)
    LEN             reduce using rule 57 (data_types -> INT64 .)
    COPY            reduce using rule 57 (data_types -> INT64 .)
    DELETE          reduce using rule 57 (data_types -> INT64 .)
    IF              reduce using rule 57 (data_types -> INT64 .)
    ELSE            reduce using rule 57 (data_types -> INT64 .)
    TYPE            reduce using rule 57 (data_types -> INT64 .)
    SWITCH          reduce using rule 57 (data_types -> INT64 .)
    VAR             reduce using rule 57 (data_types -> INT64 .)
    FUNC            reduce using rule 57 (data_types -> INT64 .)
    INTEGER         reduce using rule 57 (data_types -> INT64 .)
    FLOAT           reduce using rule 57 (data_types -> INT64 .)
    NOT             reduce using rule 57 (data_types -> INT64 .)
    RLLAVE          reduce using rule 57 (data_types -> INT64 .)
    RETURN          reduce using rule 57 (data_types -> INT64 .)
    STRING          reduce using rule 57 (data_types -> INT64 .)
    TRUE            reduce using rule 57 (data_types -> INT64 .)
    FALSE           reduce using rule 57 (data_types -> INT64 .)
    INT32           reduce using rule 57 (data_types -> INT64 .)
    INT64           reduce using rule 57 (data_types -> INT64 .)
    FLOAT32         reduce using rule 57 (data_types -> INT64 .)
    FLOAT64         reduce using rule 57 (data_types -> INT64 .)
    BYTE            reduce using rule 57 (data_types -> INT64 .)
    WFLOAT          reduce using rule 57 (data_types -> INT64 .)
    WSTRING         reduce using rule 57 (data_types -> INT64 .)
    WINT            reduce using rule 57 (data_types -> INT64 .)
    BOOL            reduce using rule 57 (data_types -> INT64 .)
    DEFAULT         reduce using rule 57 (data_types -> INT64 .)
    CASE            reduce using rule 57 (data_types -> INT64 .)
    RCORCHE         reduce using rule 57 (data_types -> INT64 .)


state 24

    (58) data_types -> FLOAT32 .

    COMA            reduce using rule 58 (data_types -> FLOAT32 .)
    RPAREN          reduce using rule 58 (data_types -> FLOAT32 .)
    LLLAVE          reduce using rule 58 (data_types -> FLOAT32 .)
    COLON           reduce using rule 58 (data_types -> FLOAT32 .)
    PRINT           reduce using rule 58 (data_types -> FLOAT32 .)
    SCAN            reduce using rule 58 (data_types -> FLOAT32 .)
    FOR             reduce using rule 58 (data_types -> FLOAT32 .)
    CONST           reduce using rule 58 (data_types -> FLOAT32 .)
    ID              reduce using rule 58 (data_types -> FLOAT32 .)
    APPEND          reduce using rule 58 (data_types -> FLOAT32 .)
    LEN             reduce using rule 58 (data_types -> FLOAT32 .)
    COPY            reduce using rule 58 (data_types -> FLOAT32 .)
    DELETE          reduce using rule 58 (data_types -> FLOAT32 .)
    IF              reduce using rule 58 (data_types -> FLOAT32 .)
    ELSE            reduce using rule 58 (data_types -> FLOAT32 .)
    TYPE            reduce using rule 58 (data_types -> FLOAT32 .)
    SWITCH          reduce using rule 58 (data_types -> FLOAT32 .)
    VAR             reduce using rule 58 (data_types -> FLOAT32 .)
    FUNC            reduce using rule 58 (data_types -> FLOAT32 .)
    INTEGER         reduce using rule 58 (data_types -> FLOAT32 .)
    FLOAT           reduce using rule 58 (data_types -> FLOAT32 .)
    NOT             reduce using rule 58 (data_types -> FLOAT32 .)
    RLLAVE          reduce using rule 58 (data_types -> FLOAT32 .)
    RETURN          reduce using rule 58 (data_types -> FLOAT32 .)
    STRING          reduce using rule 58 (data_types -> FLOAT32 .)
    TRUE            reduce using rule 58 (data_types -> FLOAT32 .)
    FALSE           reduce using rule 58 (data_types -> FLOAT32 .)
    INT32           reduce using rule 58 (data_types -> FLOAT32 .)
    INT64           reduce using rule 58 (data_types -> FLOAT32 .)
    FLOAT32         reduce using rule 58 (data_types -> FLOAT32 .)
    FLOAT64         reduce using rule 58 (data_types -> FLOAT32 .)
    BYTE            reduce using rule 58 (data_types -> FLOAT32 .)
    WFLOAT          reduce using rule 58 (data_types -> FLOAT32 .)
    WSTRING         reduce using rule 58 (data_types -> FLOAT32 .)
    WINT            reduce using rule 58 (data_types -> FLOAT32 .)
    BOOL            reduce using rule 58 (data_types -> FLOAT32 .)
    DEFAULT         reduce using rule 58 (data_types -> FLOAT32 .)
    CASE            reduce using rule 58 (data_types -> FLOAT32 .)
    RCORCHE         reduce using rule 58 (data_types -> FLOAT32 .)


state 25

    (59) data_types -> FLOAT64 .

    COMA            reduce using rule 59 (data_types -> FLOAT64 .)
    RPAREN          reduce using rule 59 (data_types -> FLOAT64 .)
    LLLAVE          reduce using rule 59 (data_types -> FLOAT64 .)
    COLON           reduce using rule 59 (data_types -> FLOAT64 .)
    PRINT           reduce using rule 59 (data_types -> FLOAT64 .)
    SCAN            reduce using rule 59 (data_types -> FLOAT64 .)
    FOR             reduce using rule 59 (data_types -> FLOAT64 .)
    CONST           reduce using rule 59 (data_types -> FLOAT64 .)
    ID              reduce using rule 59 (data_types -> FLOAT64 .)
    APPEND          reduce using rule 59 (data_types -> FLOAT64 .)
    LEN             reduce using rule 59 (data_types -> FLOAT64 .)
    COPY            reduce using rule 59 (data_types -> FLOAT64 .)
    DELETE          reduce using rule 59 (data_types -> FLOAT64 .)
    IF              reduce using rule 59 (data_types -> FLOAT64 .)
    ELSE            reduce using rule 59 (data_types -> FLOAT64 .)
    TYPE            reduce using rule 59 (data_types -> FLOAT64 .)
    SWITCH          reduce using rule 59 (data_types -> FLOAT64 .)
    VAR             reduce using rule 59 (data_types -> FLOAT64 .)
    FUNC            reduce using rule 59 (data_types -> FLOAT64 .)
    INTEGER         reduce using rule 59 (data_types -> FLOAT64 .)
    FLOAT           reduce using rule 59 (data_types -> FLOAT64 .)
    NOT             reduce using rule 59 (data_types -> FLOAT64 .)
    RLLAVE          reduce using rule 59 (data_types -> FLOAT64 .)
    RETURN          reduce using rule 59 (data_types -> FLOAT64 .)
    STRING          reduce using rule 59 (data_types -> FLOAT64 .)
    TRUE            reduce using rule 59 (data_types -> FLOAT64 .)
    FALSE           reduce using rule 59 (data_types -> FLOAT64 .)
    INT32           reduce using rule 59 (data_types -> FLOAT64 .)
    INT64           reduce using rule 59 (data_types -> FLOAT64 .)
    FLOAT32         reduce using rule 59 (data_types -> FLOAT64 .)
    FLOAT64         reduce using rule 59 (data_types -> FLOAT64 .)
    BYTE            reduce using rule 59 (data_types -> FLOAT64 .)
    WFLOAT          reduce using rule 59 (data_types -> FLOAT64 .)
    WSTRING         reduce using rule 59 (data_types -> FLOAT64 .)
    WINT            reduce using rule 59 (data_types -> FLOAT64 .)
    BOOL            reduce using rule 59 (data_types -> FLOAT64 .)
    DEFAULT         reduce using rule 59 (data_types -> FLOAT64 .)
    CASE            reduce using rule 59 (data_types -> FLOAT64 .)
    RCORCHE         reduce using rule 59 (data_types -> FLOAT64 .)


state 26

    (60) data_types -> BYTE .

    COMA            reduce using rule 60 (data_types -> BYTE .)
    RPAREN          reduce using rule 60 (data_types -> BYTE .)
    LLLAVE          reduce using rule 60 (data_types -> BYTE .)
    COLON           reduce using rule 60 (data_types -> BYTE .)
    PRINT           reduce using rule 60 (data_types -> BYTE .)
    SCAN            reduce using rule 60 (data_types -> BYTE .)
    FOR             reduce using rule 60 (data_types -> BYTE .)
    CONST           reduce using rule 60 (data_types -> BYTE .)
    ID              reduce using rule 60 (data_types -> BYTE .)
    APPEND          reduce using rule 60 (data_types -> BYTE .)
    LEN             reduce using rule 60 (data_types -> BYTE .)
    COPY            reduce using rule 60 (data_types -> BYTE .)
    DELETE          reduce using rule 60 (data_types -> BYTE .)
    IF              reduce using rule 60 (data_types -> BYTE .)
    ELSE            reduce using rule 60 (data_types -> BYTE .)
    TYPE            reduce using rule 60 (data_types -> BYTE .)
    SWITCH          reduce using rule 60 (data_types -> BYTE .)
    VAR             reduce using rule 60 (data_types -> BYTE .)
    FUNC            reduce using rule 60 (data_types -> BYTE .)
    INTEGER         reduce using rule 60 (data_types -> BYTE .)
    FLOAT           reduce using rule 60 (data_types -> BYTE .)
    NOT             reduce using rule 60 (data_types -> BYTE .)
    RLLAVE          reduce using rule 60 (data_types -> BYTE .)
    RETURN          reduce using rule 60 (data_types -> BYTE .)
    STRING          reduce using rule 60 (data_types -> BYTE .)
    TRUE            reduce using rule 60 (data_types -> BYTE .)
    FALSE           reduce using rule 60 (data_types -> BYTE .)
    INT32           reduce using rule 60 (data_types -> BYTE .)
    INT64           reduce using rule 60 (data_types -> BYTE .)
    FLOAT32         reduce using rule 60 (data_types -> BYTE .)
    FLOAT64         reduce using rule 60 (data_types -> BYTE .)
    BYTE            reduce using rule 60 (data_types -> BYTE .)
    WFLOAT          reduce using rule 60 (data_types -> BYTE .)
    WSTRING         reduce using rule 60 (data_types -> BYTE .)
    WINT            reduce using rule 60 (data_types -> BYTE .)
    BOOL            reduce using rule 60 (data_types -> BYTE .)
    DEFAULT         reduce using rule 60 (data_types -> BYTE .)
    CASE            reduce using rule 60 (data_types -> BYTE .)
    EQUAL           reduce using rule 60 (data_types -> BYTE .)
    RCORCHE         reduce using rule 60 (data_types -> BYTE .)


state 27

    (61) data_types -> WFLOAT .

    COMA            reduce using rule 61 (data_types -> WFLOAT .)
    RPAREN          reduce using rule 61 (data_types -> WFLOAT .)
    LLLAVE          reduce using rule 61 (data_types -> WFLOAT .)
    COLON           reduce using rule 61 (data_types -> WFLOAT .)
    PRINT           reduce using rule 61 (data_types -> WFLOAT .)
    SCAN            reduce using rule 61 (data_types -> WFLOAT .)
    FOR             reduce using rule 61 (data_types -> WFLOAT .)
    CONST           reduce using rule 61 (data_types -> WFLOAT .)
    ID              reduce using rule 61 (data_types -> WFLOAT .)
    APPEND          reduce using rule 61 (data_types -> WFLOAT .)
    LEN             reduce using rule 61 (data_types -> WFLOAT .)
    COPY            reduce using rule 61 (data_types -> WFLOAT .)
    DELETE          reduce using rule 61 (data_types -> WFLOAT .)
    IF              reduce using rule 61 (data_types -> WFLOAT .)
    ELSE            reduce using rule 61 (data_types -> WFLOAT .)
    TYPE            reduce using rule 61 (data_types -> WFLOAT .)
    SWITCH          reduce using rule 61 (data_types -> WFLOAT .)
    VAR             reduce using rule 61 (data_types -> WFLOAT .)
    FUNC            reduce using rule 61 (data_types -> WFLOAT .)
    INTEGER         reduce using rule 61 (data_types -> WFLOAT .)
    FLOAT           reduce using rule 61 (data_types -> WFLOAT .)
    NOT             reduce using rule 61 (data_types -> WFLOAT .)
    RLLAVE          reduce using rule 61 (data_types -> WFLOAT .)
    RETURN          reduce using rule 61 (data_types -> WFLOAT .)
    STRING          reduce using rule 61 (data_types -> WFLOAT .)
    TRUE            reduce using rule 61 (data_types -> WFLOAT .)
    FALSE           reduce using rule 61 (data_types -> WFLOAT .)
    INT32           reduce using rule 61 (data_types -> WFLOAT .)
    INT64           reduce using rule 61 (data_types -> WFLOAT .)
    FLOAT32         reduce using rule 61 (data_types -> WFLOAT .)
    FLOAT64         reduce using rule 61 (data_types -> WFLOAT .)
    BYTE            reduce using rule 61 (data_types -> WFLOAT .)
    WFLOAT          reduce using rule 61 (data_types -> WFLOAT .)
    WSTRING         reduce using rule 61 (data_types -> WFLOAT .)
    WINT            reduce using rule 61 (data_types -> WFLOAT .)
    BOOL            reduce using rule 61 (data_types -> WFLOAT .)
    DEFAULT         reduce using rule 61 (data_types -> WFLOAT .)
    CASE            reduce using rule 61 (data_types -> WFLOAT .)
    RCORCHE         reduce using rule 61 (data_types -> WFLOAT .)


state 28

    (62) data_types -> WSTRING .

    COMA            reduce using rule 62 (data_types -> WSTRING .)
    RPAREN          reduce using rule 62 (data_types -> WSTRING .)
    LLLAVE          reduce using rule 62 (data_types -> WSTRING .)
    COLON           reduce using rule 62 (data_types -> WSTRING .)
    PRINT           reduce using rule 62 (data_types -> WSTRING .)
    SCAN            reduce using rule 62 (data_types -> WSTRING .)
    FOR             reduce using rule 62 (data_types -> WSTRING .)
    CONST           reduce using rule 62 (data_types -> WSTRING .)
    ID              reduce using rule 62 (data_types -> WSTRING .)
    APPEND          reduce using rule 62 (data_types -> WSTRING .)
    LEN             reduce using rule 62 (data_types -> WSTRING .)
    COPY            reduce using rule 62 (data_types -> WSTRING .)
    DELETE          reduce using rule 62 (data_types -> WSTRING .)
    IF              reduce using rule 62 (data_types -> WSTRING .)
    ELSE            reduce using rule 62 (data_types -> WSTRING .)
    TYPE            reduce using rule 62 (data_types -> WSTRING .)
    SWITCH          reduce using rule 62 (data_types -> WSTRING .)
    VAR             reduce using rule 62 (data_types -> WSTRING .)
    FUNC            reduce using rule 62 (data_types -> WSTRING .)
    INTEGER         reduce using rule 62 (data_types -> WSTRING .)
    FLOAT           reduce using rule 62 (data_types -> WSTRING .)
    NOT             reduce using rule 62 (data_types -> WSTRING .)
    RLLAVE          reduce using rule 62 (data_types -> WSTRING .)
    RETURN          reduce using rule 62 (data_types -> WSTRING .)
    STRING          reduce using rule 62 (data_types -> WSTRING .)
    TRUE            reduce using rule 62 (data_types -> WSTRING .)
    FALSE           reduce using rule 62 (data_types -> WSTRING .)
    INT32           reduce using rule 62 (data_types -> WSTRING .)
    INT64           reduce using rule 62 (data_types -> WSTRING .)
    FLOAT32         reduce using rule 62 (data_types -> WSTRING .)
    FLOAT64         reduce using rule 62 (data_types -> WSTRING .)
    BYTE            reduce using rule 62 (data_types -> WSTRING .)
    WFLOAT          reduce using rule 62 (data_types -> WSTRING .)
    WSTRING         reduce using rule 62 (data_types -> WSTRING .)
    WINT            reduce using rule 62 (data_types -> WSTRING .)
    BOOL            reduce using rule 62 (data_types -> WSTRING .)
    DEFAULT         reduce using rule 62 (data_types -> WSTRING .)
    CASE            reduce using rule 62 (data_types -> WSTRING .)
    RCORCHE         reduce using rule 62 (data_types -> WSTRING .)


state 29

    (63) data_types -> WINT .

    COMA            reduce using rule 63 (data_types -> WINT .)
    RPAREN          reduce using rule 63 (data_types -> WINT .)
    LLLAVE          reduce using rule 63 (data_types -> WINT .)
    COLON           reduce using rule 63 (data_types -> WINT .)
    PRINT           reduce using rule 63 (data_types -> WINT .)
    SCAN            reduce using rule 63 (data_types -> WINT .)
    FOR             reduce using rule 63 (data_types -> WINT .)
    CONST           reduce using rule 63 (data_types -> WINT .)
    ID              reduce using rule 63 (data_types -> WINT .)
    APPEND          reduce using rule 63 (data_types -> WINT .)
    LEN             reduce using rule 63 (data_types -> WINT .)
    COPY            reduce using rule 63 (data_types -> WINT .)
    DELETE          reduce using rule 63 (data_types -> WINT .)
    IF              reduce using rule 63 (data_types -> WINT .)
    ELSE            reduce using rule 63 (data_types -> WINT .)
    TYPE            reduce using rule 63 (data_types -> WINT .)
    SWITCH          reduce using rule 63 (data_types -> WINT .)
    VAR             reduce using rule 63 (data_types -> WINT .)
    FUNC            reduce using rule 63 (data_types -> WINT .)
    INTEGER         reduce using rule 63 (data_types -> WINT .)
    FLOAT           reduce using rule 63 (data_types -> WINT .)
    NOT             reduce using rule 63 (data_types -> WINT .)
    RLLAVE          reduce using rule 63 (data_types -> WINT .)
    RETURN          reduce using rule 63 (data_types -> WINT .)
    STRING          reduce using rule 63 (data_types -> WINT .)
    TRUE            reduce using rule 63 (data_types -> WINT .)
    FALSE           reduce using rule 63 (data_types -> WINT .)
    INT32           reduce using rule 63 (data_types -> WINT .)
    INT64           reduce using rule 63 (data_types -> WINT .)
    FLOAT32         reduce using rule 63 (data_types -> WINT .)
    FLOAT64         reduce using rule 63 (data_types -> WINT .)
    BYTE            reduce using rule 63 (data_types -> WINT .)
    WFLOAT          reduce using rule 63 (data_types -> WINT .)
    WSTRING         reduce using rule 63 (data_types -> WINT .)
    WINT            reduce using rule 63 (data_types -> WINT .)
    BOOL            reduce using rule 63 (data_types -> WINT .)
    DEFAULT         reduce using rule 63 (data_types -> WINT .)
    CASE            reduce using rule 63 (data_types -> WINT .)
    RCORCHE         reduce using rule 63 (data_types -> WINT .)


state 30

    (64) data_types -> BOOL .

    COMA            reduce using rule 64 (data_types -> BOOL .)
    RPAREN          reduce using rule 64 (data_types -> BOOL .)
    LLLAVE          reduce using rule 64 (data_types -> BOOL .)
    COLON           reduce using rule 64 (data_types -> BOOL .)
    PRINT           reduce using rule 64 (data_types -> BOOL .)
    SCAN            reduce using rule 64 (data_types -> BOOL .)
    FOR             reduce using rule 64 (data_types -> BOOL .)
    CONST           reduce using rule 64 (data_types -> BOOL .)
    ID              reduce using rule 64 (data_types -> BOOL .)
    APPEND          reduce using rule 64 (data_types -> BOOL .)
    LEN             reduce using rule 64 (data_types -> BOOL .)
    COPY            reduce using rule 64 (data_types -> BOOL .)
    DELETE          reduce using rule 64 (data_types -> BOOL .)
    IF              reduce using rule 64 (data_types -> BOOL .)
    ELSE            reduce using rule 64 (data_types -> BOOL .)
    TYPE            reduce using rule 64 (data_types -> BOOL .)
    SWITCH          reduce using rule 64 (data_types -> BOOL .)
    VAR             reduce using rule 64 (data_types -> BOOL .)
    FUNC            reduce using rule 64 (data_types -> BOOL .)
    INTEGER         reduce using rule 64 (data_types -> BOOL .)
    FLOAT           reduce using rule 64 (data_types -> BOOL .)
    NOT             reduce using rule 64 (data_types -> BOOL .)
    RLLAVE          reduce using rule 64 (data_types -> BOOL .)
    RETURN          reduce using rule 64 (data_types -> BOOL .)
    STRING          reduce using rule 64 (data_types -> BOOL .)
    TRUE            reduce using rule 64 (data_types -> BOOL .)
    FALSE           reduce using rule 64 (data_types -> BOOL .)
    INT32           reduce using rule 64 (data_types -> BOOL .)
    INT64           reduce using rule 64 (data_types -> BOOL .)
    FLOAT32         reduce using rule 64 (data_types -> BOOL .)
    FLOAT64         reduce using rule 64 (data_types -> BOOL .)
    BYTE            reduce using rule 64 (data_types -> BOOL .)
    WFLOAT          reduce using rule 64 (data_types -> BOOL .)
    WSTRING         reduce using rule 64 (data_types -> BOOL .)
    WINT            reduce using rule 64 (data_types -> BOOL .)
    BOOL            reduce using rule 64 (data_types -> BOOL .)
    DEFAULT         reduce using rule 64 (data_types -> BOOL .)
    CASE            reduce using rule 64 (data_types -> BOOL .)
    RCORCHE         reduce using rule 64 (data_types -> BOOL .)


state 31

    (254) func_declaration -> FUNC ID LPAREN params RPAREN . data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> FUNC ID LPAREN params RPAREN . data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> FUNC ID LPAREN params RPAREN . LLLAVE codigo RLLAVE
    (56) data_types -> . INT32
    (57) data_types -> . INT64
    (58) data_types -> . FLOAT32
    (59) data_types -> . FLOAT64
    (60) data_types -> . BYTE
    (61) data_types -> . WFLOAT
    (62) data_types -> . WSTRING
    (63) data_types -> . WINT
    (64) data_types -> . BOOL

    LLLAVE          shift and go to state 93
    INT32           shift and go to state 22
    INT64           shift and go to state 23
    FLOAT32         shift and go to state 24
    FLOAT64         shift and go to state 25
    BYTE            shift and go to state 26
    WFLOAT          shift and go to state 27
    WSTRING         shift and go to state 28
    WINT            shift and go to state 29
    BOOL            shift and go to state 30

    data_types                     shift and go to state 92

state 32

    (254) func_declaration -> FUNC . ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> FUNC . ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> FUNC . ID LPAREN params RPAREN LLLAVE codigo RLLAVE
    (200) main_func -> FUNC . MAIN LPAREN RPAREN LLLAVE codigo RLLAVE

    ID              shift and go to state 12
    MAIN            shift and go to state 11


state 33

    (200) main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo . RLLAVE

    RLLAVE          shift and go to state 94


state 34

    (7) codigo -> rule .
    (9) more_rules -> rule . codigo
    (7) codigo -> . rule
    (8) codigo -> . more_rules
    (10) rule -> . impresion COLON
    (11) rule -> . impresion
    (12) rule -> . scan_func COLON
    (13) rule -> . scan_func
    (14) rule -> . expression COLON
    (15) rule -> . expression
    (16) rule -> . cicloFor
    (17) rule -> . comparison
    (18) rule -> . logic_operation
    (19) rule -> . decVar COLON
    (20) rule -> . decVar
    (21) rule -> . decConst COLON
    (22) rule -> . decConst
    (23) rule -> . var_asignation
    (24) rule -> . var_asignation COLON
    (25) rule -> . funciones
    (26) rule -> . funciones COLON
    (27) rule -> . SenIF
    (28) rule -> . SenElseIF
    (29) rule -> . SenElse
    (30) rule -> . SenStruct
    (31) rule -> . cStruct
    (32) rule -> . switch_statement
    (33) rule -> . array_declaration COLON
    (34) rule -> . array_declaration
    (35) rule -> . array_var COLON
    (36) rule -> . array_var
    (37) rule -> . array_assignment COLON
    (38) rule -> . array_assignment
    (39) rule -> . slice_declaration COLON
    (40) rule -> . slice_declaration
    (41) rule -> . slice_var COLON
    (42) rule -> . slice_var
    (43) rule -> . slice_assignment COLON
    (44) rule -> . slice_assignment
    (45) rule -> . map_declaration COLON
    (46) rule -> . map_declaration
    (47) rule -> . map_assignment COLON
    (48) rule -> . map_assignment
    (49) rule -> . func_declaration
    (50) rule -> . main_func
    (9) more_rules -> . rule codigo
    (173) impresion -> . PRINT LPAREN something RPAREN
    (174) impresion -> . PRINT LPAREN error RPAREN
    (201) scan_func -> . SCAN LPAREN POINTER RPAREN
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (166) cicloFor -> . FOR comparison LLLAVE codigo RLLAVE
    (167) cicloFor -> . FOR logic_operation LLLAVE codigo RLLAVE
    (168) cicloFor -> . FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (112) decVar -> . static
    (113) decVar -> . dynamic
    (109) decConst -> . CONST ID data_type_and_value
    (110) decConst -> . CONST ID EQUAL ID
    (111) decConst -> . CONST ID EQUAL data_structure
    (77) var_asignation -> . ID EQUAL any
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (88) SenIF -> . IF comparison LLLAVE codigo RLLAVE
    (89) SenIF -> . IF logic_operation LLLAVE codigo RLLAVE
    (90) SenIF -> . IF TRUE LLLAVE codigo RLLAVE
    (91) SenIF -> . IF FALSE LLLAVE codigo RLLAVE
    (92) SenElseIF -> . ELSE IF comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> . ELSE IF logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> . ELSE IF TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> . ELSE IF FALSE LLLAVE codigo RLLAVE
    (96) SenElse -> . ELSE LLLAVE codigo RLLAVE
    (97) SenStruct -> . TYPE ID STRUCT LLLAVE declaration RLLAVE
    (101) cStruct -> . ID DEQUAL ID LLLAVE asignaciones RLLAVE
    (233) switch_statement -> . SWITCH ID LLLAVE cases RLLAVE
    (238) array_declaration -> . VAR ID LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> . VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (243) array_var -> . ID LCORCHE index RCORCHE
    (247) array_assignment -> . array_var EQUAL something
    (147) slice_declaration -> . VAR ID LCORCHE RCORCHE data_types
    (148) slice_declaration -> . VAR ID EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> . VAR ID EQUAL funM
    (150) slice_declaration -> . ID DEQUAL funM
    (151) slice_declaration -> . ID DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (161) slice_assignment -> . slice_var EQUAL something_s
    (248) map_declaration -> . VAR ID LCORCHE data_types RCORCHE data_types
    (253) map_assignment -> . map_var EQUAL something
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (114) static -> . single
    (115) static -> . multiple
    (124) dynamic -> . ID DEQUAL algo
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (249) map_var -> . ID LCORCHE key RCORCHE
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (120) single -> . VAR ID data_types
    (121) single -> . VAR ID data_types EQUAL funciones
    (122) single -> . VAR ID data_types EQUAL data_structure
    (123) single -> . VAR ID data_type_and_value
    (116) multiple -> . list_var data_types
    (117) list_var -> . VAR ID COMA more

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for APPEND resolved as shift
  ! shift/reduce conflict for LEN resolved as shift
  ! shift/reduce conflict for COPY resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    RLLAVE          reduce using rule 7 (codigo -> rule .)
    RETURN          reduce using rule 7 (codigo -> rule .)
    STRING          reduce using rule 7 (codigo -> rule .)
    TRUE            reduce using rule 7 (codigo -> rule .)
    FALSE           reduce using rule 7 (codigo -> rule .)
    INT32           reduce using rule 7 (codigo -> rule .)
    INT64           reduce using rule 7 (codigo -> rule .)
    FLOAT32         reduce using rule 7 (codigo -> rule .)
    FLOAT64         reduce using rule 7 (codigo -> rule .)
    BYTE            reduce using rule 7 (codigo -> rule .)
    WFLOAT          reduce using rule 7 (codigo -> rule .)
    WSTRING         reduce using rule 7 (codigo -> rule .)
    WINT            reduce using rule 7 (codigo -> rule .)
    BOOL            reduce using rule 7 (codigo -> rule .)
    DEFAULT         reduce using rule 7 (codigo -> rule .)
    CASE            reduce using rule 7 (codigo -> rule .)
    PRINT           shift and go to state 62
    SCAN            shift and go to state 63
    FOR             shift and go to state 65
    CONST           shift and go to state 71
    ID              shift and go to state 72
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    IF              shift and go to state 79
    ELSE            shift and go to state 80
    TYPE            shift and go to state 81
    SWITCH          shift and go to state 82
    VAR             shift and go to state 83
    FUNC            shift and go to state 32
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    NOT             shift and go to state 87

  ! ID              [ reduce using rule 7 (codigo -> rule .) ]
  ! INTEGER         [ reduce using rule 7 (codigo -> rule .) ]
  ! FLOAT           [ reduce using rule 7 (codigo -> rule .) ]
  ! NOT             [ reduce using rule 7 (codigo -> rule .) ]
  ! APPEND          [ reduce using rule 7 (codigo -> rule .) ]
  ! LEN             [ reduce using rule 7 (codigo -> rule .) ]
  ! COPY            [ reduce using rule 7 (codigo -> rule .) ]
  ! DELETE          [ reduce using rule 7 (codigo -> rule .) ]

    rule                           shift and go to state 34
    codigo                         shift and go to state 95
    more_rules                     shift and go to state 35
    impresion                      shift and go to state 36
    scan_func                      shift and go to state 37
    expression                     shift and go to state 38
    cicloFor                       shift and go to state 39
    comparison                     shift and go to state 40
    logic_operation                shift and go to state 41
    decVar                         shift and go to state 42
    decConst                       shift and go to state 43
    var_asignation                 shift and go to state 44
    funciones                      shift and go to state 45
    SenIF                          shift and go to state 46
    SenElseIF                      shift and go to state 47
    SenElse                        shift and go to state 48
    SenStruct                      shift and go to state 49
    cStruct                        shift and go to state 50
    switch_statement               shift and go to state 51
    array_declaration              shift and go to state 52
    array_var                      shift and go to state 53
    array_assignment               shift and go to state 54
    slice_declaration              shift and go to state 55
    slice_var                      shift and go to state 56
    slice_assignment               shift and go to state 57
    map_declaration                shift and go to state 58
    map_assignment                 shift and go to state 59
    func_declaration               shift and go to state 60
    main_func                      shift and go to state 61
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    static                         shift and go to state 69
    dynamic                        shift and go to state 70
    data_structure                 shift and go to state 73
    call_func                      shift and go to state 78
    map_var                        shift and go to state 84
    single                         shift and go to state 88
    multiple                       shift and go to state 89
    list_var                       shift and go to state 90

state 35

    (8) codigo -> more_rules .

    RLLAVE          reduce using rule 8 (codigo -> more_rules .)
    RETURN          reduce using rule 8 (codigo -> more_rules .)
    ID              reduce using rule 8 (codigo -> more_rules .)
    STRING          reduce using rule 8 (codigo -> more_rules .)
    INTEGER         reduce using rule 8 (codigo -> more_rules .)
    FLOAT           reduce using rule 8 (codigo -> more_rules .)
    TRUE            reduce using rule 8 (codigo -> more_rules .)
    FALSE           reduce using rule 8 (codigo -> more_rules .)
    NOT             reduce using rule 8 (codigo -> more_rules .)
    APPEND          reduce using rule 8 (codigo -> more_rules .)
    LEN             reduce using rule 8 (codigo -> more_rules .)
    COPY            reduce using rule 8 (codigo -> more_rules .)
    DELETE          reduce using rule 8 (codigo -> more_rules .)
    INT32           reduce using rule 8 (codigo -> more_rules .)
    INT64           reduce using rule 8 (codigo -> more_rules .)
    FLOAT32         reduce using rule 8 (codigo -> more_rules .)
    FLOAT64         reduce using rule 8 (codigo -> more_rules .)
    BYTE            reduce using rule 8 (codigo -> more_rules .)
    WFLOAT          reduce using rule 8 (codigo -> more_rules .)
    WSTRING         reduce using rule 8 (codigo -> more_rules .)
    WINT            reduce using rule 8 (codigo -> more_rules .)
    BOOL            reduce using rule 8 (codigo -> more_rules .)
    DEFAULT         reduce using rule 8 (codigo -> more_rules .)
    CASE            reduce using rule 8 (codigo -> more_rules .)


state 36

    (10) rule -> impresion . COLON
    (11) rule -> impresion .

    COLON           shift and go to state 96
    PRINT           reduce using rule 11 (rule -> impresion .)
    SCAN            reduce using rule 11 (rule -> impresion .)
    FOR             reduce using rule 11 (rule -> impresion .)
    CONST           reduce using rule 11 (rule -> impresion .)
    ID              reduce using rule 11 (rule -> impresion .)
    APPEND          reduce using rule 11 (rule -> impresion .)
    LEN             reduce using rule 11 (rule -> impresion .)
    COPY            reduce using rule 11 (rule -> impresion .)
    DELETE          reduce using rule 11 (rule -> impresion .)
    IF              reduce using rule 11 (rule -> impresion .)
    ELSE            reduce using rule 11 (rule -> impresion .)
    TYPE            reduce using rule 11 (rule -> impresion .)
    SWITCH          reduce using rule 11 (rule -> impresion .)
    VAR             reduce using rule 11 (rule -> impresion .)
    FUNC            reduce using rule 11 (rule -> impresion .)
    INTEGER         reduce using rule 11 (rule -> impresion .)
    FLOAT           reduce using rule 11 (rule -> impresion .)
    NOT             reduce using rule 11 (rule -> impresion .)
    RLLAVE          reduce using rule 11 (rule -> impresion .)
    RETURN          reduce using rule 11 (rule -> impresion .)
    STRING          reduce using rule 11 (rule -> impresion .)
    TRUE            reduce using rule 11 (rule -> impresion .)
    FALSE           reduce using rule 11 (rule -> impresion .)
    INT32           reduce using rule 11 (rule -> impresion .)
    INT64           reduce using rule 11 (rule -> impresion .)
    FLOAT32         reduce using rule 11 (rule -> impresion .)
    FLOAT64         reduce using rule 11 (rule -> impresion .)
    BYTE            reduce using rule 11 (rule -> impresion .)
    WFLOAT          reduce using rule 11 (rule -> impresion .)
    WSTRING         reduce using rule 11 (rule -> impresion .)
    WINT            reduce using rule 11 (rule -> impresion .)
    BOOL            reduce using rule 11 (rule -> impresion .)
    DEFAULT         reduce using rule 11 (rule -> impresion .)
    CASE            reduce using rule 11 (rule -> impresion .)


state 37

    (12) rule -> scan_func . COLON
    (13) rule -> scan_func .

    COLON           shift and go to state 97
    PRINT           reduce using rule 13 (rule -> scan_func .)
    SCAN            reduce using rule 13 (rule -> scan_func .)
    FOR             reduce using rule 13 (rule -> scan_func .)
    CONST           reduce using rule 13 (rule -> scan_func .)
    ID              reduce using rule 13 (rule -> scan_func .)
    APPEND          reduce using rule 13 (rule -> scan_func .)
    LEN             reduce using rule 13 (rule -> scan_func .)
    COPY            reduce using rule 13 (rule -> scan_func .)
    DELETE          reduce using rule 13 (rule -> scan_func .)
    IF              reduce using rule 13 (rule -> scan_func .)
    ELSE            reduce using rule 13 (rule -> scan_func .)
    TYPE            reduce using rule 13 (rule -> scan_func .)
    SWITCH          reduce using rule 13 (rule -> scan_func .)
    VAR             reduce using rule 13 (rule -> scan_func .)
    FUNC            reduce using rule 13 (rule -> scan_func .)
    INTEGER         reduce using rule 13 (rule -> scan_func .)
    FLOAT           reduce using rule 13 (rule -> scan_func .)
    NOT             reduce using rule 13 (rule -> scan_func .)
    RLLAVE          reduce using rule 13 (rule -> scan_func .)
    RETURN          reduce using rule 13 (rule -> scan_func .)
    STRING          reduce using rule 13 (rule -> scan_func .)
    TRUE            reduce using rule 13 (rule -> scan_func .)
    FALSE           reduce using rule 13 (rule -> scan_func .)
    INT32           reduce using rule 13 (rule -> scan_func .)
    INT64           reduce using rule 13 (rule -> scan_func .)
    FLOAT32         reduce using rule 13 (rule -> scan_func .)
    FLOAT64         reduce using rule 13 (rule -> scan_func .)
    BYTE            reduce using rule 13 (rule -> scan_func .)
    WFLOAT          reduce using rule 13 (rule -> scan_func .)
    WSTRING         reduce using rule 13 (rule -> scan_func .)
    WINT            reduce using rule 13 (rule -> scan_func .)
    BOOL            reduce using rule 13 (rule -> scan_func .)
    DEFAULT         reduce using rule 13 (rule -> scan_func .)
    CASE            reduce using rule 13 (rule -> scan_func .)


state 38

    (14) rule -> expression . COLON
    (15) rule -> expression .
    (140) value -> expression .

    COLON           shift and go to state 98
    PRINT           reduce using rule 15 (rule -> expression .)
    SCAN            reduce using rule 15 (rule -> expression .)
    FOR             reduce using rule 15 (rule -> expression .)
    CONST           reduce using rule 15 (rule -> expression .)
    ID              reduce using rule 15 (rule -> expression .)
    APPEND          reduce using rule 15 (rule -> expression .)
    LEN             reduce using rule 15 (rule -> expression .)
    COPY            reduce using rule 15 (rule -> expression .)
    DELETE          reduce using rule 15 (rule -> expression .)
    IF              reduce using rule 15 (rule -> expression .)
    ELSE            reduce using rule 15 (rule -> expression .)
    TYPE            reduce using rule 15 (rule -> expression .)
    SWITCH          reduce using rule 15 (rule -> expression .)
    VAR             reduce using rule 15 (rule -> expression .)
    FUNC            reduce using rule 15 (rule -> expression .)
    INTEGER         reduce using rule 15 (rule -> expression .)
    FLOAT           reduce using rule 15 (rule -> expression .)
    NOT             reduce using rule 15 (rule -> expression .)
    RLLAVE          reduce using rule 15 (rule -> expression .)
    RETURN          reduce using rule 15 (rule -> expression .)
    STRING          reduce using rule 15 (rule -> expression .)
    TRUE            reduce using rule 15 (rule -> expression .)
    FALSE           reduce using rule 15 (rule -> expression .)
    INT32           reduce using rule 15 (rule -> expression .)
    INT64           reduce using rule 15 (rule -> expression .)
    FLOAT32         reduce using rule 15 (rule -> expression .)
    FLOAT64         reduce using rule 15 (rule -> expression .)
    BYTE            reduce using rule 15 (rule -> expression .)
    WFLOAT          reduce using rule 15 (rule -> expression .)
    WSTRING         reduce using rule 15 (rule -> expression .)
    WINT            reduce using rule 15 (rule -> expression .)
    BOOL            reduce using rule 15 (rule -> expression .)
    DEFAULT         reduce using rule 15 (rule -> expression .)
    CASE            reduce using rule 15 (rule -> expression .)
    GREATER         reduce using rule 140 (value -> expression .)
    SMALLER         reduce using rule 140 (value -> expression .)
    GREATER_OR_EQUAL reduce using rule 140 (value -> expression .)
    SMALLER_OR_EQUAL reduce using rule 140 (value -> expression .)
    EQUAL_COMPARE   reduce using rule 140 (value -> expression .)
    NOT_EQUAL       reduce using rule 140 (value -> expression .)
    PLUS            reduce using rule 140 (value -> expression .)
    TIMES           reduce using rule 140 (value -> expression .)
    DIVIDE          reduce using rule 140 (value -> expression .)
    MINUS           reduce using rule 140 (value -> expression .)
    MOD             reduce using rule 140 (value -> expression .)


state 39

    (16) rule -> cicloFor .

    PRINT           reduce using rule 16 (rule -> cicloFor .)
    SCAN            reduce using rule 16 (rule -> cicloFor .)
    FOR             reduce using rule 16 (rule -> cicloFor .)
    CONST           reduce using rule 16 (rule -> cicloFor .)
    ID              reduce using rule 16 (rule -> cicloFor .)
    APPEND          reduce using rule 16 (rule -> cicloFor .)
    LEN             reduce using rule 16 (rule -> cicloFor .)
    COPY            reduce using rule 16 (rule -> cicloFor .)
    DELETE          reduce using rule 16 (rule -> cicloFor .)
    IF              reduce using rule 16 (rule -> cicloFor .)
    ELSE            reduce using rule 16 (rule -> cicloFor .)
    TYPE            reduce using rule 16 (rule -> cicloFor .)
    SWITCH          reduce using rule 16 (rule -> cicloFor .)
    VAR             reduce using rule 16 (rule -> cicloFor .)
    FUNC            reduce using rule 16 (rule -> cicloFor .)
    INTEGER         reduce using rule 16 (rule -> cicloFor .)
    FLOAT           reduce using rule 16 (rule -> cicloFor .)
    NOT             reduce using rule 16 (rule -> cicloFor .)
    RLLAVE          reduce using rule 16 (rule -> cicloFor .)
    RETURN          reduce using rule 16 (rule -> cicloFor .)
    STRING          reduce using rule 16 (rule -> cicloFor .)
    TRUE            reduce using rule 16 (rule -> cicloFor .)
    FALSE           reduce using rule 16 (rule -> cicloFor .)
    INT32           reduce using rule 16 (rule -> cicloFor .)
    INT64           reduce using rule 16 (rule -> cicloFor .)
    FLOAT32         reduce using rule 16 (rule -> cicloFor .)
    FLOAT64         reduce using rule 16 (rule -> cicloFor .)
    BYTE            reduce using rule 16 (rule -> cicloFor .)
    WFLOAT          reduce using rule 16 (rule -> cicloFor .)
    WSTRING         reduce using rule 16 (rule -> cicloFor .)
    WINT            reduce using rule 16 (rule -> cicloFor .)
    BOOL            reduce using rule 16 (rule -> cicloFor .)
    DEFAULT         reduce using rule 16 (rule -> cicloFor .)
    CASE            reduce using rule 16 (rule -> cicloFor .)


state 40

    (17) rule -> comparison .
    (194) logic_value -> comparison .

    PRINT           reduce using rule 17 (rule -> comparison .)
    SCAN            reduce using rule 17 (rule -> comparison .)
    FOR             reduce using rule 17 (rule -> comparison .)
    CONST           reduce using rule 17 (rule -> comparison .)
    ID              reduce using rule 17 (rule -> comparison .)
    APPEND          reduce using rule 17 (rule -> comparison .)
    LEN             reduce using rule 17 (rule -> comparison .)
    COPY            reduce using rule 17 (rule -> comparison .)
    DELETE          reduce using rule 17 (rule -> comparison .)
    IF              reduce using rule 17 (rule -> comparison .)
    ELSE            reduce using rule 17 (rule -> comparison .)
    TYPE            reduce using rule 17 (rule -> comparison .)
    SWITCH          reduce using rule 17 (rule -> comparison .)
    VAR             reduce using rule 17 (rule -> comparison .)
    FUNC            reduce using rule 17 (rule -> comparison .)
    INTEGER         reduce using rule 17 (rule -> comparison .)
    FLOAT           reduce using rule 17 (rule -> comparison .)
    NOT             reduce using rule 17 (rule -> comparison .)
    RLLAVE          reduce using rule 17 (rule -> comparison .)
    RETURN          reduce using rule 17 (rule -> comparison .)
    STRING          reduce using rule 17 (rule -> comparison .)
    TRUE            reduce using rule 17 (rule -> comparison .)
    FALSE           reduce using rule 17 (rule -> comparison .)
    INT32           reduce using rule 17 (rule -> comparison .)
    INT64           reduce using rule 17 (rule -> comparison .)
    FLOAT32         reduce using rule 17 (rule -> comparison .)
    FLOAT64         reduce using rule 17 (rule -> comparison .)
    BYTE            reduce using rule 17 (rule -> comparison .)
    WFLOAT          reduce using rule 17 (rule -> comparison .)
    WSTRING         reduce using rule 17 (rule -> comparison .)
    WINT            reduce using rule 17 (rule -> comparison .)
    BOOL            reduce using rule 17 (rule -> comparison .)
    DEFAULT         reduce using rule 17 (rule -> comparison .)
    CASE            reduce using rule 17 (rule -> comparison .)
    AND             reduce using rule 194 (logic_value -> comparison .)
    OR              reduce using rule 194 (logic_value -> comparison .)


state 41

    (18) rule -> logic_operation .

    PRINT           reduce using rule 18 (rule -> logic_operation .)
    SCAN            reduce using rule 18 (rule -> logic_operation .)
    FOR             reduce using rule 18 (rule -> logic_operation .)
    CONST           reduce using rule 18 (rule -> logic_operation .)
    ID              reduce using rule 18 (rule -> logic_operation .)
    APPEND          reduce using rule 18 (rule -> logic_operation .)
    LEN             reduce using rule 18 (rule -> logic_operation .)
    COPY            reduce using rule 18 (rule -> logic_operation .)
    DELETE          reduce using rule 18 (rule -> logic_operation .)
    IF              reduce using rule 18 (rule -> logic_operation .)
    ELSE            reduce using rule 18 (rule -> logic_operation .)
    TYPE            reduce using rule 18 (rule -> logic_operation .)
    SWITCH          reduce using rule 18 (rule -> logic_operation .)
    VAR             reduce using rule 18 (rule -> logic_operation .)
    FUNC            reduce using rule 18 (rule -> logic_operation .)
    INTEGER         reduce using rule 18 (rule -> logic_operation .)
    FLOAT           reduce using rule 18 (rule -> logic_operation .)
    NOT             reduce using rule 18 (rule -> logic_operation .)
    RLLAVE          reduce using rule 18 (rule -> logic_operation .)
    RETURN          reduce using rule 18 (rule -> logic_operation .)
    STRING          reduce using rule 18 (rule -> logic_operation .)
    TRUE            reduce using rule 18 (rule -> logic_operation .)
    FALSE           reduce using rule 18 (rule -> logic_operation .)
    INT32           reduce using rule 18 (rule -> logic_operation .)
    INT64           reduce using rule 18 (rule -> logic_operation .)
    FLOAT32         reduce using rule 18 (rule -> logic_operation .)
    FLOAT64         reduce using rule 18 (rule -> logic_operation .)
    BYTE            reduce using rule 18 (rule -> logic_operation .)
    WFLOAT          reduce using rule 18 (rule -> logic_operation .)
    WSTRING         reduce using rule 18 (rule -> logic_operation .)
    WINT            reduce using rule 18 (rule -> logic_operation .)
    BOOL            reduce using rule 18 (rule -> logic_operation .)
    DEFAULT         reduce using rule 18 (rule -> logic_operation .)
    CASE            reduce using rule 18 (rule -> logic_operation .)


state 42

    (19) rule -> decVar . COLON
    (20) rule -> decVar .

    COLON           shift and go to state 99
    PRINT           reduce using rule 20 (rule -> decVar .)
    SCAN            reduce using rule 20 (rule -> decVar .)
    FOR             reduce using rule 20 (rule -> decVar .)
    CONST           reduce using rule 20 (rule -> decVar .)
    ID              reduce using rule 20 (rule -> decVar .)
    APPEND          reduce using rule 20 (rule -> decVar .)
    LEN             reduce using rule 20 (rule -> decVar .)
    COPY            reduce using rule 20 (rule -> decVar .)
    DELETE          reduce using rule 20 (rule -> decVar .)
    IF              reduce using rule 20 (rule -> decVar .)
    ELSE            reduce using rule 20 (rule -> decVar .)
    TYPE            reduce using rule 20 (rule -> decVar .)
    SWITCH          reduce using rule 20 (rule -> decVar .)
    VAR             reduce using rule 20 (rule -> decVar .)
    FUNC            reduce using rule 20 (rule -> decVar .)
    INTEGER         reduce using rule 20 (rule -> decVar .)
    FLOAT           reduce using rule 20 (rule -> decVar .)
    NOT             reduce using rule 20 (rule -> decVar .)
    RLLAVE          reduce using rule 20 (rule -> decVar .)
    RETURN          reduce using rule 20 (rule -> decVar .)
    STRING          reduce using rule 20 (rule -> decVar .)
    TRUE            reduce using rule 20 (rule -> decVar .)
    FALSE           reduce using rule 20 (rule -> decVar .)
    INT32           reduce using rule 20 (rule -> decVar .)
    INT64           reduce using rule 20 (rule -> decVar .)
    FLOAT32         reduce using rule 20 (rule -> decVar .)
    FLOAT64         reduce using rule 20 (rule -> decVar .)
    BYTE            reduce using rule 20 (rule -> decVar .)
    WFLOAT          reduce using rule 20 (rule -> decVar .)
    WSTRING         reduce using rule 20 (rule -> decVar .)
    WINT            reduce using rule 20 (rule -> decVar .)
    BOOL            reduce using rule 20 (rule -> decVar .)
    DEFAULT         reduce using rule 20 (rule -> decVar .)
    CASE            reduce using rule 20 (rule -> decVar .)


state 43

    (21) rule -> decConst . COLON
    (22) rule -> decConst .

    COLON           shift and go to state 100
    PRINT           reduce using rule 22 (rule -> decConst .)
    SCAN            reduce using rule 22 (rule -> decConst .)
    FOR             reduce using rule 22 (rule -> decConst .)
    CONST           reduce using rule 22 (rule -> decConst .)
    ID              reduce using rule 22 (rule -> decConst .)
    APPEND          reduce using rule 22 (rule -> decConst .)
    LEN             reduce using rule 22 (rule -> decConst .)
    COPY            reduce using rule 22 (rule -> decConst .)
    DELETE          reduce using rule 22 (rule -> decConst .)
    IF              reduce using rule 22 (rule -> decConst .)
    ELSE            reduce using rule 22 (rule -> decConst .)
    TYPE            reduce using rule 22 (rule -> decConst .)
    SWITCH          reduce using rule 22 (rule -> decConst .)
    VAR             reduce using rule 22 (rule -> decConst .)
    FUNC            reduce using rule 22 (rule -> decConst .)
    INTEGER         reduce using rule 22 (rule -> decConst .)
    FLOAT           reduce using rule 22 (rule -> decConst .)
    NOT             reduce using rule 22 (rule -> decConst .)
    RLLAVE          reduce using rule 22 (rule -> decConst .)
    RETURN          reduce using rule 22 (rule -> decConst .)
    STRING          reduce using rule 22 (rule -> decConst .)
    TRUE            reduce using rule 22 (rule -> decConst .)
    FALSE           reduce using rule 22 (rule -> decConst .)
    INT32           reduce using rule 22 (rule -> decConst .)
    INT64           reduce using rule 22 (rule -> decConst .)
    FLOAT32         reduce using rule 22 (rule -> decConst .)
    FLOAT64         reduce using rule 22 (rule -> decConst .)
    BYTE            reduce using rule 22 (rule -> decConst .)
    WFLOAT          reduce using rule 22 (rule -> decConst .)
    WSTRING         reduce using rule 22 (rule -> decConst .)
    WINT            reduce using rule 22 (rule -> decConst .)
    BOOL            reduce using rule 22 (rule -> decConst .)
    DEFAULT         reduce using rule 22 (rule -> decConst .)
    CASE            reduce using rule 22 (rule -> decConst .)


state 44

    (23) rule -> var_asignation .
    (24) rule -> var_asignation . COLON

    PRINT           reduce using rule 23 (rule -> var_asignation .)
    SCAN            reduce using rule 23 (rule -> var_asignation .)
    FOR             reduce using rule 23 (rule -> var_asignation .)
    CONST           reduce using rule 23 (rule -> var_asignation .)
    ID              reduce using rule 23 (rule -> var_asignation .)
    APPEND          reduce using rule 23 (rule -> var_asignation .)
    LEN             reduce using rule 23 (rule -> var_asignation .)
    COPY            reduce using rule 23 (rule -> var_asignation .)
    DELETE          reduce using rule 23 (rule -> var_asignation .)
    IF              reduce using rule 23 (rule -> var_asignation .)
    ELSE            reduce using rule 23 (rule -> var_asignation .)
    TYPE            reduce using rule 23 (rule -> var_asignation .)
    SWITCH          reduce using rule 23 (rule -> var_asignation .)
    VAR             reduce using rule 23 (rule -> var_asignation .)
    FUNC            reduce using rule 23 (rule -> var_asignation .)
    INTEGER         reduce using rule 23 (rule -> var_asignation .)
    FLOAT           reduce using rule 23 (rule -> var_asignation .)
    NOT             reduce using rule 23 (rule -> var_asignation .)
    RLLAVE          reduce using rule 23 (rule -> var_asignation .)
    RETURN          reduce using rule 23 (rule -> var_asignation .)
    STRING          reduce using rule 23 (rule -> var_asignation .)
    TRUE            reduce using rule 23 (rule -> var_asignation .)
    FALSE           reduce using rule 23 (rule -> var_asignation .)
    INT32           reduce using rule 23 (rule -> var_asignation .)
    INT64           reduce using rule 23 (rule -> var_asignation .)
    FLOAT32         reduce using rule 23 (rule -> var_asignation .)
    FLOAT64         reduce using rule 23 (rule -> var_asignation .)
    BYTE            reduce using rule 23 (rule -> var_asignation .)
    WFLOAT          reduce using rule 23 (rule -> var_asignation .)
    WSTRING         reduce using rule 23 (rule -> var_asignation .)
    WINT            reduce using rule 23 (rule -> var_asignation .)
    BOOL            reduce using rule 23 (rule -> var_asignation .)
    DEFAULT         reduce using rule 23 (rule -> var_asignation .)
    CASE            reduce using rule 23 (rule -> var_asignation .)
    COLON           shift and go to state 101


state 45

    (25) rule -> funciones .
    (26) rule -> funciones . COLON
    (183) something_ex -> funciones .

  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for SCAN resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for CONST resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for ID resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for APPEND resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for LEN resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for COPY resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for DELETE resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for IF resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for ELSE resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for TYPE resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for SWITCH resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for VAR resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for FUNC resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for INTEGER resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for FLOAT resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for NOT resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for RETURN resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for STRING resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for TRUE resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for FALSE resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for INT32 resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for INT64 resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for FLOAT32 resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for FLOAT64 resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for BYTE resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for WFLOAT resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for WSTRING resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for WINT resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for BOOL resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 25 (rule -> funciones .)
  ! reduce/reduce conflict for CASE resolved using rule 25 (rule -> funciones .)
    PRINT           reduce using rule 25 (rule -> funciones .)
    SCAN            reduce using rule 25 (rule -> funciones .)
    FOR             reduce using rule 25 (rule -> funciones .)
    CONST           reduce using rule 25 (rule -> funciones .)
    ID              reduce using rule 25 (rule -> funciones .)
    APPEND          reduce using rule 25 (rule -> funciones .)
    LEN             reduce using rule 25 (rule -> funciones .)
    COPY            reduce using rule 25 (rule -> funciones .)
    DELETE          reduce using rule 25 (rule -> funciones .)
    IF              reduce using rule 25 (rule -> funciones .)
    ELSE            reduce using rule 25 (rule -> funciones .)
    TYPE            reduce using rule 25 (rule -> funciones .)
    SWITCH          reduce using rule 25 (rule -> funciones .)
    VAR             reduce using rule 25 (rule -> funciones .)
    FUNC            reduce using rule 25 (rule -> funciones .)
    INTEGER         reduce using rule 25 (rule -> funciones .)
    FLOAT           reduce using rule 25 (rule -> funciones .)
    NOT             reduce using rule 25 (rule -> funciones .)
    RLLAVE          reduce using rule 25 (rule -> funciones .)
    RETURN          reduce using rule 25 (rule -> funciones .)
    STRING          reduce using rule 25 (rule -> funciones .)
    TRUE            reduce using rule 25 (rule -> funciones .)
    FALSE           reduce using rule 25 (rule -> funciones .)
    INT32           reduce using rule 25 (rule -> funciones .)
    INT64           reduce using rule 25 (rule -> funciones .)
    FLOAT32         reduce using rule 25 (rule -> funciones .)
    FLOAT64         reduce using rule 25 (rule -> funciones .)
    BYTE            reduce using rule 25 (rule -> funciones .)
    WFLOAT          reduce using rule 25 (rule -> funciones .)
    WSTRING         reduce using rule 25 (rule -> funciones .)
    WINT            reduce using rule 25 (rule -> funciones .)
    BOOL            reduce using rule 25 (rule -> funciones .)
    DEFAULT         reduce using rule 25 (rule -> funciones .)
    CASE            reduce using rule 25 (rule -> funciones .)
    COLON           shift and go to state 102
    GREATER         reduce using rule 183 (something_ex -> funciones .)
    SMALLER         reduce using rule 183 (something_ex -> funciones .)
    GREATER_OR_EQUAL reduce using rule 183 (something_ex -> funciones .)
    SMALLER_OR_EQUAL reduce using rule 183 (something_ex -> funciones .)
    EQUAL_COMPARE   reduce using rule 183 (something_ex -> funciones .)
    NOT_EQUAL       reduce using rule 183 (something_ex -> funciones .)
    PLUS            reduce using rule 183 (something_ex -> funciones .)
    TIMES           reduce using rule 183 (something_ex -> funciones .)
    DIVIDE          reduce using rule 183 (something_ex -> funciones .)
    MINUS           reduce using rule 183 (something_ex -> funciones .)
    MOD             reduce using rule 183 (something_ex -> funciones .)

  ! COLON           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! PRINT           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! SCAN            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FOR             [ reduce using rule 183 (something_ex -> funciones .) ]
  ! CONST           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! ID              [ reduce using rule 183 (something_ex -> funciones .) ]
  ! APPEND          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! LEN             [ reduce using rule 183 (something_ex -> funciones .) ]
  ! COPY            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! DELETE          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! IF              [ reduce using rule 183 (something_ex -> funciones .) ]
  ! ELSE            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! TYPE            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! SWITCH          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! VAR             [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FUNC            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! INTEGER         [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FLOAT           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! NOT             [ reduce using rule 183 (something_ex -> funciones .) ]
  ! RLLAVE          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! RETURN          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! STRING          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! TRUE            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FALSE           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! INT32           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! INT64           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FLOAT32         [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FLOAT64         [ reduce using rule 183 (something_ex -> funciones .) ]
  ! BYTE            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! WFLOAT          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! WSTRING         [ reduce using rule 183 (something_ex -> funciones .) ]
  ! WINT            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! BOOL            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! DEFAULT         [ reduce using rule 183 (something_ex -> funciones .) ]
  ! CASE            [ reduce using rule 183 (something_ex -> funciones .) ]


state 46

    (27) rule -> SenIF .

    PRINT           reduce using rule 27 (rule -> SenIF .)
    SCAN            reduce using rule 27 (rule -> SenIF .)
    FOR             reduce using rule 27 (rule -> SenIF .)
    CONST           reduce using rule 27 (rule -> SenIF .)
    ID              reduce using rule 27 (rule -> SenIF .)
    APPEND          reduce using rule 27 (rule -> SenIF .)
    LEN             reduce using rule 27 (rule -> SenIF .)
    COPY            reduce using rule 27 (rule -> SenIF .)
    DELETE          reduce using rule 27 (rule -> SenIF .)
    IF              reduce using rule 27 (rule -> SenIF .)
    ELSE            reduce using rule 27 (rule -> SenIF .)
    TYPE            reduce using rule 27 (rule -> SenIF .)
    SWITCH          reduce using rule 27 (rule -> SenIF .)
    VAR             reduce using rule 27 (rule -> SenIF .)
    FUNC            reduce using rule 27 (rule -> SenIF .)
    INTEGER         reduce using rule 27 (rule -> SenIF .)
    FLOAT           reduce using rule 27 (rule -> SenIF .)
    NOT             reduce using rule 27 (rule -> SenIF .)
    RLLAVE          reduce using rule 27 (rule -> SenIF .)
    RETURN          reduce using rule 27 (rule -> SenIF .)
    STRING          reduce using rule 27 (rule -> SenIF .)
    TRUE            reduce using rule 27 (rule -> SenIF .)
    FALSE           reduce using rule 27 (rule -> SenIF .)
    INT32           reduce using rule 27 (rule -> SenIF .)
    INT64           reduce using rule 27 (rule -> SenIF .)
    FLOAT32         reduce using rule 27 (rule -> SenIF .)
    FLOAT64         reduce using rule 27 (rule -> SenIF .)
    BYTE            reduce using rule 27 (rule -> SenIF .)
    WFLOAT          reduce using rule 27 (rule -> SenIF .)
    WSTRING         reduce using rule 27 (rule -> SenIF .)
    WINT            reduce using rule 27 (rule -> SenIF .)
    BOOL            reduce using rule 27 (rule -> SenIF .)
    DEFAULT         reduce using rule 27 (rule -> SenIF .)
    CASE            reduce using rule 27 (rule -> SenIF .)


state 47

    (28) rule -> SenElseIF .

    PRINT           reduce using rule 28 (rule -> SenElseIF .)
    SCAN            reduce using rule 28 (rule -> SenElseIF .)
    FOR             reduce using rule 28 (rule -> SenElseIF .)
    CONST           reduce using rule 28 (rule -> SenElseIF .)
    ID              reduce using rule 28 (rule -> SenElseIF .)
    APPEND          reduce using rule 28 (rule -> SenElseIF .)
    LEN             reduce using rule 28 (rule -> SenElseIF .)
    COPY            reduce using rule 28 (rule -> SenElseIF .)
    DELETE          reduce using rule 28 (rule -> SenElseIF .)
    IF              reduce using rule 28 (rule -> SenElseIF .)
    ELSE            reduce using rule 28 (rule -> SenElseIF .)
    TYPE            reduce using rule 28 (rule -> SenElseIF .)
    SWITCH          reduce using rule 28 (rule -> SenElseIF .)
    VAR             reduce using rule 28 (rule -> SenElseIF .)
    FUNC            reduce using rule 28 (rule -> SenElseIF .)
    INTEGER         reduce using rule 28 (rule -> SenElseIF .)
    FLOAT           reduce using rule 28 (rule -> SenElseIF .)
    NOT             reduce using rule 28 (rule -> SenElseIF .)
    RLLAVE          reduce using rule 28 (rule -> SenElseIF .)
    RETURN          reduce using rule 28 (rule -> SenElseIF .)
    STRING          reduce using rule 28 (rule -> SenElseIF .)
    TRUE            reduce using rule 28 (rule -> SenElseIF .)
    FALSE           reduce using rule 28 (rule -> SenElseIF .)
    INT32           reduce using rule 28 (rule -> SenElseIF .)
    INT64           reduce using rule 28 (rule -> SenElseIF .)
    FLOAT32         reduce using rule 28 (rule -> SenElseIF .)
    FLOAT64         reduce using rule 28 (rule -> SenElseIF .)
    BYTE            reduce using rule 28 (rule -> SenElseIF .)
    WFLOAT          reduce using rule 28 (rule -> SenElseIF .)
    WSTRING         reduce using rule 28 (rule -> SenElseIF .)
    WINT            reduce using rule 28 (rule -> SenElseIF .)
    BOOL            reduce using rule 28 (rule -> SenElseIF .)
    DEFAULT         reduce using rule 28 (rule -> SenElseIF .)
    CASE            reduce using rule 28 (rule -> SenElseIF .)


state 48

    (29) rule -> SenElse .

    PRINT           reduce using rule 29 (rule -> SenElse .)
    SCAN            reduce using rule 29 (rule -> SenElse .)
    FOR             reduce using rule 29 (rule -> SenElse .)
    CONST           reduce using rule 29 (rule -> SenElse .)
    ID              reduce using rule 29 (rule -> SenElse .)
    APPEND          reduce using rule 29 (rule -> SenElse .)
    LEN             reduce using rule 29 (rule -> SenElse .)
    COPY            reduce using rule 29 (rule -> SenElse .)
    DELETE          reduce using rule 29 (rule -> SenElse .)
    IF              reduce using rule 29 (rule -> SenElse .)
    ELSE            reduce using rule 29 (rule -> SenElse .)
    TYPE            reduce using rule 29 (rule -> SenElse .)
    SWITCH          reduce using rule 29 (rule -> SenElse .)
    VAR             reduce using rule 29 (rule -> SenElse .)
    FUNC            reduce using rule 29 (rule -> SenElse .)
    INTEGER         reduce using rule 29 (rule -> SenElse .)
    FLOAT           reduce using rule 29 (rule -> SenElse .)
    NOT             reduce using rule 29 (rule -> SenElse .)
    RLLAVE          reduce using rule 29 (rule -> SenElse .)
    RETURN          reduce using rule 29 (rule -> SenElse .)
    STRING          reduce using rule 29 (rule -> SenElse .)
    TRUE            reduce using rule 29 (rule -> SenElse .)
    FALSE           reduce using rule 29 (rule -> SenElse .)
    INT32           reduce using rule 29 (rule -> SenElse .)
    INT64           reduce using rule 29 (rule -> SenElse .)
    FLOAT32         reduce using rule 29 (rule -> SenElse .)
    FLOAT64         reduce using rule 29 (rule -> SenElse .)
    BYTE            reduce using rule 29 (rule -> SenElse .)
    WFLOAT          reduce using rule 29 (rule -> SenElse .)
    WSTRING         reduce using rule 29 (rule -> SenElse .)
    WINT            reduce using rule 29 (rule -> SenElse .)
    BOOL            reduce using rule 29 (rule -> SenElse .)
    DEFAULT         reduce using rule 29 (rule -> SenElse .)
    CASE            reduce using rule 29 (rule -> SenElse .)


state 49

    (30) rule -> SenStruct .

    PRINT           reduce using rule 30 (rule -> SenStruct .)
    SCAN            reduce using rule 30 (rule -> SenStruct .)
    FOR             reduce using rule 30 (rule -> SenStruct .)
    CONST           reduce using rule 30 (rule -> SenStruct .)
    ID              reduce using rule 30 (rule -> SenStruct .)
    APPEND          reduce using rule 30 (rule -> SenStruct .)
    LEN             reduce using rule 30 (rule -> SenStruct .)
    COPY            reduce using rule 30 (rule -> SenStruct .)
    DELETE          reduce using rule 30 (rule -> SenStruct .)
    IF              reduce using rule 30 (rule -> SenStruct .)
    ELSE            reduce using rule 30 (rule -> SenStruct .)
    TYPE            reduce using rule 30 (rule -> SenStruct .)
    SWITCH          reduce using rule 30 (rule -> SenStruct .)
    VAR             reduce using rule 30 (rule -> SenStruct .)
    FUNC            reduce using rule 30 (rule -> SenStruct .)
    INTEGER         reduce using rule 30 (rule -> SenStruct .)
    FLOAT           reduce using rule 30 (rule -> SenStruct .)
    NOT             reduce using rule 30 (rule -> SenStruct .)
    RLLAVE          reduce using rule 30 (rule -> SenStruct .)
    RETURN          reduce using rule 30 (rule -> SenStruct .)
    STRING          reduce using rule 30 (rule -> SenStruct .)
    TRUE            reduce using rule 30 (rule -> SenStruct .)
    FALSE           reduce using rule 30 (rule -> SenStruct .)
    INT32           reduce using rule 30 (rule -> SenStruct .)
    INT64           reduce using rule 30 (rule -> SenStruct .)
    FLOAT32         reduce using rule 30 (rule -> SenStruct .)
    FLOAT64         reduce using rule 30 (rule -> SenStruct .)
    BYTE            reduce using rule 30 (rule -> SenStruct .)
    WFLOAT          reduce using rule 30 (rule -> SenStruct .)
    WSTRING         reduce using rule 30 (rule -> SenStruct .)
    WINT            reduce using rule 30 (rule -> SenStruct .)
    BOOL            reduce using rule 30 (rule -> SenStruct .)
    DEFAULT         reduce using rule 30 (rule -> SenStruct .)
    CASE            reduce using rule 30 (rule -> SenStruct .)


state 50

    (31) rule -> cStruct .

    PRINT           reduce using rule 31 (rule -> cStruct .)
    SCAN            reduce using rule 31 (rule -> cStruct .)
    FOR             reduce using rule 31 (rule -> cStruct .)
    CONST           reduce using rule 31 (rule -> cStruct .)
    ID              reduce using rule 31 (rule -> cStruct .)
    APPEND          reduce using rule 31 (rule -> cStruct .)
    LEN             reduce using rule 31 (rule -> cStruct .)
    COPY            reduce using rule 31 (rule -> cStruct .)
    DELETE          reduce using rule 31 (rule -> cStruct .)
    IF              reduce using rule 31 (rule -> cStruct .)
    ELSE            reduce using rule 31 (rule -> cStruct .)
    TYPE            reduce using rule 31 (rule -> cStruct .)
    SWITCH          reduce using rule 31 (rule -> cStruct .)
    VAR             reduce using rule 31 (rule -> cStruct .)
    FUNC            reduce using rule 31 (rule -> cStruct .)
    INTEGER         reduce using rule 31 (rule -> cStruct .)
    FLOAT           reduce using rule 31 (rule -> cStruct .)
    NOT             reduce using rule 31 (rule -> cStruct .)
    RLLAVE          reduce using rule 31 (rule -> cStruct .)
    RETURN          reduce using rule 31 (rule -> cStruct .)
    STRING          reduce using rule 31 (rule -> cStruct .)
    TRUE            reduce using rule 31 (rule -> cStruct .)
    FALSE           reduce using rule 31 (rule -> cStruct .)
    INT32           reduce using rule 31 (rule -> cStruct .)
    INT64           reduce using rule 31 (rule -> cStruct .)
    FLOAT32         reduce using rule 31 (rule -> cStruct .)
    FLOAT64         reduce using rule 31 (rule -> cStruct .)
    BYTE            reduce using rule 31 (rule -> cStruct .)
    WFLOAT          reduce using rule 31 (rule -> cStruct .)
    WSTRING         reduce using rule 31 (rule -> cStruct .)
    WINT            reduce using rule 31 (rule -> cStruct .)
    BOOL            reduce using rule 31 (rule -> cStruct .)
    DEFAULT         reduce using rule 31 (rule -> cStruct .)
    CASE            reduce using rule 31 (rule -> cStruct .)


state 51

    (32) rule -> switch_statement .

    PRINT           reduce using rule 32 (rule -> switch_statement .)
    SCAN            reduce using rule 32 (rule -> switch_statement .)
    FOR             reduce using rule 32 (rule -> switch_statement .)
    CONST           reduce using rule 32 (rule -> switch_statement .)
    ID              reduce using rule 32 (rule -> switch_statement .)
    APPEND          reduce using rule 32 (rule -> switch_statement .)
    LEN             reduce using rule 32 (rule -> switch_statement .)
    COPY            reduce using rule 32 (rule -> switch_statement .)
    DELETE          reduce using rule 32 (rule -> switch_statement .)
    IF              reduce using rule 32 (rule -> switch_statement .)
    ELSE            reduce using rule 32 (rule -> switch_statement .)
    TYPE            reduce using rule 32 (rule -> switch_statement .)
    SWITCH          reduce using rule 32 (rule -> switch_statement .)
    VAR             reduce using rule 32 (rule -> switch_statement .)
    FUNC            reduce using rule 32 (rule -> switch_statement .)
    INTEGER         reduce using rule 32 (rule -> switch_statement .)
    FLOAT           reduce using rule 32 (rule -> switch_statement .)
    NOT             reduce using rule 32 (rule -> switch_statement .)
    RLLAVE          reduce using rule 32 (rule -> switch_statement .)
    RETURN          reduce using rule 32 (rule -> switch_statement .)
    STRING          reduce using rule 32 (rule -> switch_statement .)
    TRUE            reduce using rule 32 (rule -> switch_statement .)
    FALSE           reduce using rule 32 (rule -> switch_statement .)
    INT32           reduce using rule 32 (rule -> switch_statement .)
    INT64           reduce using rule 32 (rule -> switch_statement .)
    FLOAT32         reduce using rule 32 (rule -> switch_statement .)
    FLOAT64         reduce using rule 32 (rule -> switch_statement .)
    BYTE            reduce using rule 32 (rule -> switch_statement .)
    WFLOAT          reduce using rule 32 (rule -> switch_statement .)
    WSTRING         reduce using rule 32 (rule -> switch_statement .)
    WINT            reduce using rule 32 (rule -> switch_statement .)
    BOOL            reduce using rule 32 (rule -> switch_statement .)
    DEFAULT         reduce using rule 32 (rule -> switch_statement .)
    CASE            reduce using rule 32 (rule -> switch_statement .)


state 52

    (33) rule -> array_declaration . COLON
    (34) rule -> array_declaration .

    COLON           shift and go to state 103
    PRINT           reduce using rule 34 (rule -> array_declaration .)
    SCAN            reduce using rule 34 (rule -> array_declaration .)
    FOR             reduce using rule 34 (rule -> array_declaration .)
    CONST           reduce using rule 34 (rule -> array_declaration .)
    ID              reduce using rule 34 (rule -> array_declaration .)
    APPEND          reduce using rule 34 (rule -> array_declaration .)
    LEN             reduce using rule 34 (rule -> array_declaration .)
    COPY            reduce using rule 34 (rule -> array_declaration .)
    DELETE          reduce using rule 34 (rule -> array_declaration .)
    IF              reduce using rule 34 (rule -> array_declaration .)
    ELSE            reduce using rule 34 (rule -> array_declaration .)
    TYPE            reduce using rule 34 (rule -> array_declaration .)
    SWITCH          reduce using rule 34 (rule -> array_declaration .)
    VAR             reduce using rule 34 (rule -> array_declaration .)
    FUNC            reduce using rule 34 (rule -> array_declaration .)
    INTEGER         reduce using rule 34 (rule -> array_declaration .)
    FLOAT           reduce using rule 34 (rule -> array_declaration .)
    NOT             reduce using rule 34 (rule -> array_declaration .)
    RLLAVE          reduce using rule 34 (rule -> array_declaration .)
    RETURN          reduce using rule 34 (rule -> array_declaration .)
    STRING          reduce using rule 34 (rule -> array_declaration .)
    TRUE            reduce using rule 34 (rule -> array_declaration .)
    FALSE           reduce using rule 34 (rule -> array_declaration .)
    INT32           reduce using rule 34 (rule -> array_declaration .)
    INT64           reduce using rule 34 (rule -> array_declaration .)
    FLOAT32         reduce using rule 34 (rule -> array_declaration .)
    FLOAT64         reduce using rule 34 (rule -> array_declaration .)
    BYTE            reduce using rule 34 (rule -> array_declaration .)
    WFLOAT          reduce using rule 34 (rule -> array_declaration .)
    WSTRING         reduce using rule 34 (rule -> array_declaration .)
    WINT            reduce using rule 34 (rule -> array_declaration .)
    BOOL            reduce using rule 34 (rule -> array_declaration .)
    DEFAULT         reduce using rule 34 (rule -> array_declaration .)
    CASE            reduce using rule 34 (rule -> array_declaration .)


state 53

    (35) rule -> array_var . COLON
    (36) rule -> array_var .
    (247) array_assignment -> array_var . EQUAL something
    (74) data_structure -> array_var .

  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for SCAN resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for FOR resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for CONST resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for ID resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for APPEND resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for LEN resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for COPY resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for DELETE resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for IF resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for ELSE resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for TYPE resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for SWITCH resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for VAR resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for FUNC resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for INTEGER resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for FLOAT resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for NOT resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for RETURN resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for STRING resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for TRUE resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for FALSE resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for INT32 resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for INT64 resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for FLOAT32 resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for FLOAT64 resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for BYTE resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for WFLOAT resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for WSTRING resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for WINT resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for BOOL resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 36 (rule -> array_var .)
  ! reduce/reduce conflict for CASE resolved using rule 36 (rule -> array_var .)
    COLON           shift and go to state 104
    PRINT           reduce using rule 36 (rule -> array_var .)
    SCAN            reduce using rule 36 (rule -> array_var .)
    FOR             reduce using rule 36 (rule -> array_var .)
    CONST           reduce using rule 36 (rule -> array_var .)
    ID              reduce using rule 36 (rule -> array_var .)
    APPEND          reduce using rule 36 (rule -> array_var .)
    LEN             reduce using rule 36 (rule -> array_var .)
    COPY            reduce using rule 36 (rule -> array_var .)
    DELETE          reduce using rule 36 (rule -> array_var .)
    IF              reduce using rule 36 (rule -> array_var .)
    ELSE            reduce using rule 36 (rule -> array_var .)
    TYPE            reduce using rule 36 (rule -> array_var .)
    SWITCH          reduce using rule 36 (rule -> array_var .)
    VAR             reduce using rule 36 (rule -> array_var .)
    FUNC            reduce using rule 36 (rule -> array_var .)
    INTEGER         reduce using rule 36 (rule -> array_var .)
    FLOAT           reduce using rule 36 (rule -> array_var .)
    NOT             reduce using rule 36 (rule -> array_var .)
    RLLAVE          reduce using rule 36 (rule -> array_var .)
    RETURN          reduce using rule 36 (rule -> array_var .)
    STRING          reduce using rule 36 (rule -> array_var .)
    TRUE            reduce using rule 36 (rule -> array_var .)
    FALSE           reduce using rule 36 (rule -> array_var .)
    INT32           reduce using rule 36 (rule -> array_var .)
    INT64           reduce using rule 36 (rule -> array_var .)
    FLOAT32         reduce using rule 36 (rule -> array_var .)
    FLOAT64         reduce using rule 36 (rule -> array_var .)
    BYTE            reduce using rule 36 (rule -> array_var .)
    WFLOAT          reduce using rule 36 (rule -> array_var .)
    WSTRING         reduce using rule 36 (rule -> array_var .)
    WINT            reduce using rule 36 (rule -> array_var .)
    BOOL            reduce using rule 36 (rule -> array_var .)
    DEFAULT         reduce using rule 36 (rule -> array_var .)
    CASE            reduce using rule 36 (rule -> array_var .)
    EQUAL           shift and go to state 105
    GREATER         reduce using rule 74 (data_structure -> array_var .)
    SMALLER         reduce using rule 74 (data_structure -> array_var .)
    GREATER_OR_EQUAL reduce using rule 74 (data_structure -> array_var .)
    SMALLER_OR_EQUAL reduce using rule 74 (data_structure -> array_var .)
    EQUAL_COMPARE   reduce using rule 74 (data_structure -> array_var .)
    NOT_EQUAL       reduce using rule 74 (data_structure -> array_var .)
    PLUS            reduce using rule 74 (data_structure -> array_var .)
    TIMES           reduce using rule 74 (data_structure -> array_var .)
    DIVIDE          reduce using rule 74 (data_structure -> array_var .)
    MINUS           reduce using rule 74 (data_structure -> array_var .)
    MOD             reduce using rule 74 (data_structure -> array_var .)

  ! COLON           [ reduce using rule 74 (data_structure -> array_var .) ]
  ! PRINT           [ reduce using rule 74 (data_structure -> array_var .) ]
  ! SCAN            [ reduce using rule 74 (data_structure -> array_var .) ]
  ! FOR             [ reduce using rule 74 (data_structure -> array_var .) ]
  ! CONST           [ reduce using rule 74 (data_structure -> array_var .) ]
  ! ID              [ reduce using rule 74 (data_structure -> array_var .) ]
  ! APPEND          [ reduce using rule 74 (data_structure -> array_var .) ]
  ! LEN             [ reduce using rule 74 (data_structure -> array_var .) ]
  ! COPY            [ reduce using rule 74 (data_structure -> array_var .) ]
  ! DELETE          [ reduce using rule 74 (data_structure -> array_var .) ]
  ! IF              [ reduce using rule 74 (data_structure -> array_var .) ]
  ! ELSE            [ reduce using rule 74 (data_structure -> array_var .) ]
  ! TYPE            [ reduce using rule 74 (data_structure -> array_var .) ]
  ! SWITCH          [ reduce using rule 74 (data_structure -> array_var .) ]
  ! VAR             [ reduce using rule 74 (data_structure -> array_var .) ]
  ! FUNC            [ reduce using rule 74 (data_structure -> array_var .) ]
  ! INTEGER         [ reduce using rule 74 (data_structure -> array_var .) ]
  ! FLOAT           [ reduce using rule 74 (data_structure -> array_var .) ]
  ! NOT             [ reduce using rule 74 (data_structure -> array_var .) ]
  ! RLLAVE          [ reduce using rule 74 (data_structure -> array_var .) ]
  ! RETURN          [ reduce using rule 74 (data_structure -> array_var .) ]
  ! STRING          [ reduce using rule 74 (data_structure -> array_var .) ]
  ! TRUE            [ reduce using rule 74 (data_structure -> array_var .) ]
  ! FALSE           [ reduce using rule 74 (data_structure -> array_var .) ]
  ! INT32           [ reduce using rule 74 (data_structure -> array_var .) ]
  ! INT64           [ reduce using rule 74 (data_structure -> array_var .) ]
  ! FLOAT32         [ reduce using rule 74 (data_structure -> array_var .) ]
  ! FLOAT64         [ reduce using rule 74 (data_structure -> array_var .) ]
  ! BYTE            [ reduce using rule 74 (data_structure -> array_var .) ]
  ! WFLOAT          [ reduce using rule 74 (data_structure -> array_var .) ]
  ! WSTRING         [ reduce using rule 74 (data_structure -> array_var .) ]
  ! WINT            [ reduce using rule 74 (data_structure -> array_var .) ]
  ! BOOL            [ reduce using rule 74 (data_structure -> array_var .) ]
  ! DEFAULT         [ reduce using rule 74 (data_structure -> array_var .) ]
  ! CASE            [ reduce using rule 74 (data_structure -> array_var .) ]


state 54

    (37) rule -> array_assignment . COLON
    (38) rule -> array_assignment .

    COLON           shift and go to state 106
    PRINT           reduce using rule 38 (rule -> array_assignment .)
    SCAN            reduce using rule 38 (rule -> array_assignment .)
    FOR             reduce using rule 38 (rule -> array_assignment .)
    CONST           reduce using rule 38 (rule -> array_assignment .)
    ID              reduce using rule 38 (rule -> array_assignment .)
    APPEND          reduce using rule 38 (rule -> array_assignment .)
    LEN             reduce using rule 38 (rule -> array_assignment .)
    COPY            reduce using rule 38 (rule -> array_assignment .)
    DELETE          reduce using rule 38 (rule -> array_assignment .)
    IF              reduce using rule 38 (rule -> array_assignment .)
    ELSE            reduce using rule 38 (rule -> array_assignment .)
    TYPE            reduce using rule 38 (rule -> array_assignment .)
    SWITCH          reduce using rule 38 (rule -> array_assignment .)
    VAR             reduce using rule 38 (rule -> array_assignment .)
    FUNC            reduce using rule 38 (rule -> array_assignment .)
    INTEGER         reduce using rule 38 (rule -> array_assignment .)
    FLOAT           reduce using rule 38 (rule -> array_assignment .)
    NOT             reduce using rule 38 (rule -> array_assignment .)
    RLLAVE          reduce using rule 38 (rule -> array_assignment .)
    RETURN          reduce using rule 38 (rule -> array_assignment .)
    STRING          reduce using rule 38 (rule -> array_assignment .)
    TRUE            reduce using rule 38 (rule -> array_assignment .)
    FALSE           reduce using rule 38 (rule -> array_assignment .)
    INT32           reduce using rule 38 (rule -> array_assignment .)
    INT64           reduce using rule 38 (rule -> array_assignment .)
    FLOAT32         reduce using rule 38 (rule -> array_assignment .)
    FLOAT64         reduce using rule 38 (rule -> array_assignment .)
    BYTE            reduce using rule 38 (rule -> array_assignment .)
    WFLOAT          reduce using rule 38 (rule -> array_assignment .)
    WSTRING         reduce using rule 38 (rule -> array_assignment .)
    WINT            reduce using rule 38 (rule -> array_assignment .)
    BOOL            reduce using rule 38 (rule -> array_assignment .)
    DEFAULT         reduce using rule 38 (rule -> array_assignment .)
    CASE            reduce using rule 38 (rule -> array_assignment .)


state 55

    (39) rule -> slice_declaration . COLON
    (40) rule -> slice_declaration .

    COLON           shift and go to state 107
    PRINT           reduce using rule 40 (rule -> slice_declaration .)
    SCAN            reduce using rule 40 (rule -> slice_declaration .)
    FOR             reduce using rule 40 (rule -> slice_declaration .)
    CONST           reduce using rule 40 (rule -> slice_declaration .)
    ID              reduce using rule 40 (rule -> slice_declaration .)
    APPEND          reduce using rule 40 (rule -> slice_declaration .)
    LEN             reduce using rule 40 (rule -> slice_declaration .)
    COPY            reduce using rule 40 (rule -> slice_declaration .)
    DELETE          reduce using rule 40 (rule -> slice_declaration .)
    IF              reduce using rule 40 (rule -> slice_declaration .)
    ELSE            reduce using rule 40 (rule -> slice_declaration .)
    TYPE            reduce using rule 40 (rule -> slice_declaration .)
    SWITCH          reduce using rule 40 (rule -> slice_declaration .)
    VAR             reduce using rule 40 (rule -> slice_declaration .)
    FUNC            reduce using rule 40 (rule -> slice_declaration .)
    INTEGER         reduce using rule 40 (rule -> slice_declaration .)
    FLOAT           reduce using rule 40 (rule -> slice_declaration .)
    NOT             reduce using rule 40 (rule -> slice_declaration .)
    RLLAVE          reduce using rule 40 (rule -> slice_declaration .)
    RETURN          reduce using rule 40 (rule -> slice_declaration .)
    STRING          reduce using rule 40 (rule -> slice_declaration .)
    TRUE            reduce using rule 40 (rule -> slice_declaration .)
    FALSE           reduce using rule 40 (rule -> slice_declaration .)
    INT32           reduce using rule 40 (rule -> slice_declaration .)
    INT64           reduce using rule 40 (rule -> slice_declaration .)
    FLOAT32         reduce using rule 40 (rule -> slice_declaration .)
    FLOAT64         reduce using rule 40 (rule -> slice_declaration .)
    BYTE            reduce using rule 40 (rule -> slice_declaration .)
    WFLOAT          reduce using rule 40 (rule -> slice_declaration .)
    WSTRING         reduce using rule 40 (rule -> slice_declaration .)
    WINT            reduce using rule 40 (rule -> slice_declaration .)
    BOOL            reduce using rule 40 (rule -> slice_declaration .)
    DEFAULT         reduce using rule 40 (rule -> slice_declaration .)
    CASE            reduce using rule 40 (rule -> slice_declaration .)


state 56

    (41) rule -> slice_var . COLON
    (42) rule -> slice_var .
    (161) slice_assignment -> slice_var . EQUAL something_s
    (76) data_structure -> slice_var .

  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for SCAN resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for FOR resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for CONST resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for ID resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for APPEND resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for LEN resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for COPY resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for DELETE resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for IF resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for ELSE resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for TYPE resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for SWITCH resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for VAR resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for FUNC resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for INTEGER resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for FLOAT resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for NOT resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for RETURN resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for STRING resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for TRUE resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for FALSE resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for INT32 resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for INT64 resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for FLOAT32 resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for FLOAT64 resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for BYTE resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for WFLOAT resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for WSTRING resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for WINT resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for BOOL resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 42 (rule -> slice_var .)
  ! reduce/reduce conflict for CASE resolved using rule 42 (rule -> slice_var .)
    COLON           shift and go to state 108
    PRINT           reduce using rule 42 (rule -> slice_var .)
    SCAN            reduce using rule 42 (rule -> slice_var .)
    FOR             reduce using rule 42 (rule -> slice_var .)
    CONST           reduce using rule 42 (rule -> slice_var .)
    ID              reduce using rule 42 (rule -> slice_var .)
    APPEND          reduce using rule 42 (rule -> slice_var .)
    LEN             reduce using rule 42 (rule -> slice_var .)
    COPY            reduce using rule 42 (rule -> slice_var .)
    DELETE          reduce using rule 42 (rule -> slice_var .)
    IF              reduce using rule 42 (rule -> slice_var .)
    ELSE            reduce using rule 42 (rule -> slice_var .)
    TYPE            reduce using rule 42 (rule -> slice_var .)
    SWITCH          reduce using rule 42 (rule -> slice_var .)
    VAR             reduce using rule 42 (rule -> slice_var .)
    FUNC            reduce using rule 42 (rule -> slice_var .)
    INTEGER         reduce using rule 42 (rule -> slice_var .)
    FLOAT           reduce using rule 42 (rule -> slice_var .)
    NOT             reduce using rule 42 (rule -> slice_var .)
    RLLAVE          reduce using rule 42 (rule -> slice_var .)
    RETURN          reduce using rule 42 (rule -> slice_var .)
    STRING          reduce using rule 42 (rule -> slice_var .)
    TRUE            reduce using rule 42 (rule -> slice_var .)
    FALSE           reduce using rule 42 (rule -> slice_var .)
    INT32           reduce using rule 42 (rule -> slice_var .)
    INT64           reduce using rule 42 (rule -> slice_var .)
    FLOAT32         reduce using rule 42 (rule -> slice_var .)
    FLOAT64         reduce using rule 42 (rule -> slice_var .)
    BYTE            reduce using rule 42 (rule -> slice_var .)
    WFLOAT          reduce using rule 42 (rule -> slice_var .)
    WSTRING         reduce using rule 42 (rule -> slice_var .)
    WINT            reduce using rule 42 (rule -> slice_var .)
    BOOL            reduce using rule 42 (rule -> slice_var .)
    DEFAULT         reduce using rule 42 (rule -> slice_var .)
    CASE            reduce using rule 42 (rule -> slice_var .)
    EQUAL           shift and go to state 109
    GREATER         reduce using rule 76 (data_structure -> slice_var .)
    SMALLER         reduce using rule 76 (data_structure -> slice_var .)
    GREATER_OR_EQUAL reduce using rule 76 (data_structure -> slice_var .)
    SMALLER_OR_EQUAL reduce using rule 76 (data_structure -> slice_var .)
    EQUAL_COMPARE   reduce using rule 76 (data_structure -> slice_var .)
    NOT_EQUAL       reduce using rule 76 (data_structure -> slice_var .)
    PLUS            reduce using rule 76 (data_structure -> slice_var .)
    TIMES           reduce using rule 76 (data_structure -> slice_var .)
    DIVIDE          reduce using rule 76 (data_structure -> slice_var .)
    MINUS           reduce using rule 76 (data_structure -> slice_var .)
    MOD             reduce using rule 76 (data_structure -> slice_var .)

  ! COLON           [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! PRINT           [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! SCAN            [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! FOR             [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! CONST           [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! ID              [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! APPEND          [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! LEN             [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! COPY            [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! DELETE          [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! IF              [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! ELSE            [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! TYPE            [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! SWITCH          [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! VAR             [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! FUNC            [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! INTEGER         [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! FLOAT           [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! NOT             [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! RLLAVE          [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! RETURN          [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! STRING          [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! TRUE            [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! FALSE           [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! INT32           [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! INT64           [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! FLOAT32         [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! FLOAT64         [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! BYTE            [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! WFLOAT          [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! WSTRING         [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! WINT            [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! BOOL            [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! DEFAULT         [ reduce using rule 76 (data_structure -> slice_var .) ]
  ! CASE            [ reduce using rule 76 (data_structure -> slice_var .) ]


state 57

    (43) rule -> slice_assignment . COLON
    (44) rule -> slice_assignment .

    COLON           shift and go to state 110
    PRINT           reduce using rule 44 (rule -> slice_assignment .)
    SCAN            reduce using rule 44 (rule -> slice_assignment .)
    FOR             reduce using rule 44 (rule -> slice_assignment .)
    CONST           reduce using rule 44 (rule -> slice_assignment .)
    ID              reduce using rule 44 (rule -> slice_assignment .)
    APPEND          reduce using rule 44 (rule -> slice_assignment .)
    LEN             reduce using rule 44 (rule -> slice_assignment .)
    COPY            reduce using rule 44 (rule -> slice_assignment .)
    DELETE          reduce using rule 44 (rule -> slice_assignment .)
    IF              reduce using rule 44 (rule -> slice_assignment .)
    ELSE            reduce using rule 44 (rule -> slice_assignment .)
    TYPE            reduce using rule 44 (rule -> slice_assignment .)
    SWITCH          reduce using rule 44 (rule -> slice_assignment .)
    VAR             reduce using rule 44 (rule -> slice_assignment .)
    FUNC            reduce using rule 44 (rule -> slice_assignment .)
    INTEGER         reduce using rule 44 (rule -> slice_assignment .)
    FLOAT           reduce using rule 44 (rule -> slice_assignment .)
    NOT             reduce using rule 44 (rule -> slice_assignment .)
    RLLAVE          reduce using rule 44 (rule -> slice_assignment .)
    RETURN          reduce using rule 44 (rule -> slice_assignment .)
    STRING          reduce using rule 44 (rule -> slice_assignment .)
    TRUE            reduce using rule 44 (rule -> slice_assignment .)
    FALSE           reduce using rule 44 (rule -> slice_assignment .)
    INT32           reduce using rule 44 (rule -> slice_assignment .)
    INT64           reduce using rule 44 (rule -> slice_assignment .)
    FLOAT32         reduce using rule 44 (rule -> slice_assignment .)
    FLOAT64         reduce using rule 44 (rule -> slice_assignment .)
    BYTE            reduce using rule 44 (rule -> slice_assignment .)
    WFLOAT          reduce using rule 44 (rule -> slice_assignment .)
    WSTRING         reduce using rule 44 (rule -> slice_assignment .)
    WINT            reduce using rule 44 (rule -> slice_assignment .)
    BOOL            reduce using rule 44 (rule -> slice_assignment .)
    DEFAULT         reduce using rule 44 (rule -> slice_assignment .)
    CASE            reduce using rule 44 (rule -> slice_assignment .)


state 58

    (45) rule -> map_declaration . COLON
    (46) rule -> map_declaration .

    COLON           shift and go to state 111
    PRINT           reduce using rule 46 (rule -> map_declaration .)
    SCAN            reduce using rule 46 (rule -> map_declaration .)
    FOR             reduce using rule 46 (rule -> map_declaration .)
    CONST           reduce using rule 46 (rule -> map_declaration .)
    ID              reduce using rule 46 (rule -> map_declaration .)
    APPEND          reduce using rule 46 (rule -> map_declaration .)
    LEN             reduce using rule 46 (rule -> map_declaration .)
    COPY            reduce using rule 46 (rule -> map_declaration .)
    DELETE          reduce using rule 46 (rule -> map_declaration .)
    IF              reduce using rule 46 (rule -> map_declaration .)
    ELSE            reduce using rule 46 (rule -> map_declaration .)
    TYPE            reduce using rule 46 (rule -> map_declaration .)
    SWITCH          reduce using rule 46 (rule -> map_declaration .)
    VAR             reduce using rule 46 (rule -> map_declaration .)
    FUNC            reduce using rule 46 (rule -> map_declaration .)
    INTEGER         reduce using rule 46 (rule -> map_declaration .)
    FLOAT           reduce using rule 46 (rule -> map_declaration .)
    NOT             reduce using rule 46 (rule -> map_declaration .)
    RLLAVE          reduce using rule 46 (rule -> map_declaration .)
    RETURN          reduce using rule 46 (rule -> map_declaration .)
    STRING          reduce using rule 46 (rule -> map_declaration .)
    TRUE            reduce using rule 46 (rule -> map_declaration .)
    FALSE           reduce using rule 46 (rule -> map_declaration .)
    INT32           reduce using rule 46 (rule -> map_declaration .)
    INT64           reduce using rule 46 (rule -> map_declaration .)
    FLOAT32         reduce using rule 46 (rule -> map_declaration .)
    FLOAT64         reduce using rule 46 (rule -> map_declaration .)
    BYTE            reduce using rule 46 (rule -> map_declaration .)
    WFLOAT          reduce using rule 46 (rule -> map_declaration .)
    WSTRING         reduce using rule 46 (rule -> map_declaration .)
    WINT            reduce using rule 46 (rule -> map_declaration .)
    BOOL            reduce using rule 46 (rule -> map_declaration .)
    DEFAULT         reduce using rule 46 (rule -> map_declaration .)
    CASE            reduce using rule 46 (rule -> map_declaration .)


state 59

    (47) rule -> map_assignment . COLON
    (48) rule -> map_assignment .

    COLON           shift and go to state 112
    PRINT           reduce using rule 48 (rule -> map_assignment .)
    SCAN            reduce using rule 48 (rule -> map_assignment .)
    FOR             reduce using rule 48 (rule -> map_assignment .)
    CONST           reduce using rule 48 (rule -> map_assignment .)
    ID              reduce using rule 48 (rule -> map_assignment .)
    APPEND          reduce using rule 48 (rule -> map_assignment .)
    LEN             reduce using rule 48 (rule -> map_assignment .)
    COPY            reduce using rule 48 (rule -> map_assignment .)
    DELETE          reduce using rule 48 (rule -> map_assignment .)
    IF              reduce using rule 48 (rule -> map_assignment .)
    ELSE            reduce using rule 48 (rule -> map_assignment .)
    TYPE            reduce using rule 48 (rule -> map_assignment .)
    SWITCH          reduce using rule 48 (rule -> map_assignment .)
    VAR             reduce using rule 48 (rule -> map_assignment .)
    FUNC            reduce using rule 48 (rule -> map_assignment .)
    INTEGER         reduce using rule 48 (rule -> map_assignment .)
    FLOAT           reduce using rule 48 (rule -> map_assignment .)
    NOT             reduce using rule 48 (rule -> map_assignment .)
    RLLAVE          reduce using rule 48 (rule -> map_assignment .)
    RETURN          reduce using rule 48 (rule -> map_assignment .)
    STRING          reduce using rule 48 (rule -> map_assignment .)
    TRUE            reduce using rule 48 (rule -> map_assignment .)
    FALSE           reduce using rule 48 (rule -> map_assignment .)
    INT32           reduce using rule 48 (rule -> map_assignment .)
    INT64           reduce using rule 48 (rule -> map_assignment .)
    FLOAT32         reduce using rule 48 (rule -> map_assignment .)
    FLOAT64         reduce using rule 48 (rule -> map_assignment .)
    BYTE            reduce using rule 48 (rule -> map_assignment .)
    WFLOAT          reduce using rule 48 (rule -> map_assignment .)
    WSTRING         reduce using rule 48 (rule -> map_assignment .)
    WINT            reduce using rule 48 (rule -> map_assignment .)
    BOOL            reduce using rule 48 (rule -> map_assignment .)
    DEFAULT         reduce using rule 48 (rule -> map_assignment .)
    CASE            reduce using rule 48 (rule -> map_assignment .)


state 60

    (49) rule -> func_declaration .

    PRINT           reduce using rule 49 (rule -> func_declaration .)
    SCAN            reduce using rule 49 (rule -> func_declaration .)
    FOR             reduce using rule 49 (rule -> func_declaration .)
    CONST           reduce using rule 49 (rule -> func_declaration .)
    ID              reduce using rule 49 (rule -> func_declaration .)
    APPEND          reduce using rule 49 (rule -> func_declaration .)
    LEN             reduce using rule 49 (rule -> func_declaration .)
    COPY            reduce using rule 49 (rule -> func_declaration .)
    DELETE          reduce using rule 49 (rule -> func_declaration .)
    IF              reduce using rule 49 (rule -> func_declaration .)
    ELSE            reduce using rule 49 (rule -> func_declaration .)
    TYPE            reduce using rule 49 (rule -> func_declaration .)
    SWITCH          reduce using rule 49 (rule -> func_declaration .)
    VAR             reduce using rule 49 (rule -> func_declaration .)
    FUNC            reduce using rule 49 (rule -> func_declaration .)
    INTEGER         reduce using rule 49 (rule -> func_declaration .)
    FLOAT           reduce using rule 49 (rule -> func_declaration .)
    NOT             reduce using rule 49 (rule -> func_declaration .)
    RLLAVE          reduce using rule 49 (rule -> func_declaration .)
    RETURN          reduce using rule 49 (rule -> func_declaration .)
    STRING          reduce using rule 49 (rule -> func_declaration .)
    TRUE            reduce using rule 49 (rule -> func_declaration .)
    FALSE           reduce using rule 49 (rule -> func_declaration .)
    INT32           reduce using rule 49 (rule -> func_declaration .)
    INT64           reduce using rule 49 (rule -> func_declaration .)
    FLOAT32         reduce using rule 49 (rule -> func_declaration .)
    FLOAT64         reduce using rule 49 (rule -> func_declaration .)
    BYTE            reduce using rule 49 (rule -> func_declaration .)
    WFLOAT          reduce using rule 49 (rule -> func_declaration .)
    WSTRING         reduce using rule 49 (rule -> func_declaration .)
    WINT            reduce using rule 49 (rule -> func_declaration .)
    BOOL            reduce using rule 49 (rule -> func_declaration .)
    DEFAULT         reduce using rule 49 (rule -> func_declaration .)
    CASE            reduce using rule 49 (rule -> func_declaration .)


state 61

    (50) rule -> main_func .

    PRINT           reduce using rule 50 (rule -> main_func .)
    SCAN            reduce using rule 50 (rule -> main_func .)
    FOR             reduce using rule 50 (rule -> main_func .)
    CONST           reduce using rule 50 (rule -> main_func .)
    ID              reduce using rule 50 (rule -> main_func .)
    APPEND          reduce using rule 50 (rule -> main_func .)
    LEN             reduce using rule 50 (rule -> main_func .)
    COPY            reduce using rule 50 (rule -> main_func .)
    DELETE          reduce using rule 50 (rule -> main_func .)
    IF              reduce using rule 50 (rule -> main_func .)
    ELSE            reduce using rule 50 (rule -> main_func .)
    TYPE            reduce using rule 50 (rule -> main_func .)
    SWITCH          reduce using rule 50 (rule -> main_func .)
    VAR             reduce using rule 50 (rule -> main_func .)
    FUNC            reduce using rule 50 (rule -> main_func .)
    INTEGER         reduce using rule 50 (rule -> main_func .)
    FLOAT           reduce using rule 50 (rule -> main_func .)
    NOT             reduce using rule 50 (rule -> main_func .)
    RLLAVE          reduce using rule 50 (rule -> main_func .)
    RETURN          reduce using rule 50 (rule -> main_func .)
    STRING          reduce using rule 50 (rule -> main_func .)
    TRUE            reduce using rule 50 (rule -> main_func .)
    FALSE           reduce using rule 50 (rule -> main_func .)
    INT32           reduce using rule 50 (rule -> main_func .)
    INT64           reduce using rule 50 (rule -> main_func .)
    FLOAT32         reduce using rule 50 (rule -> main_func .)
    FLOAT64         reduce using rule 50 (rule -> main_func .)
    BYTE            reduce using rule 50 (rule -> main_func .)
    WFLOAT          reduce using rule 50 (rule -> main_func .)
    WSTRING         reduce using rule 50 (rule -> main_func .)
    WINT            reduce using rule 50 (rule -> main_func .)
    BOOL            reduce using rule 50 (rule -> main_func .)
    DEFAULT         reduce using rule 50 (rule -> main_func .)
    CASE            reduce using rule 50 (rule -> main_func .)


state 62

    (173) impresion -> PRINT . LPAREN something RPAREN
    (174) impresion -> PRINT . LPAREN error RPAREN

    LPAREN          shift and go to state 113


state 63

    (201) scan_func -> SCAN . LPAREN POINTER RPAREN

    LPAREN          shift and go to state 114


state 64

    (175) expression -> something_ex .
    (176) expression -> something_ex . adicionaEx
    (177) adicionaEx -> . op something_ex
    (178) adicionaEx -> . op something_ex adicionaEx
    (141) op -> . GREATER
    (142) op -> . SMALLER
    (143) op -> . GREATER_OR_EQUAL
    (144) op -> . SMALLER_OR_EQUAL
    (145) op -> . EQUAL_COMPARE
    (146) op -> . NOT_EQUAL
    (184) op -> . PLUS
    (185) op -> . TIMES
    (186) op -> . DIVIDE
    (187) op -> . MINUS
    (188) op -> . MOD

  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for GREATER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SMALLER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_COMPARE resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    COLON           reduce using rule 175 (expression -> something_ex .)
    PRINT           reduce using rule 175 (expression -> something_ex .)
    SCAN            reduce using rule 175 (expression -> something_ex .)
    FOR             reduce using rule 175 (expression -> something_ex .)
    CONST           reduce using rule 175 (expression -> something_ex .)
    ID              reduce using rule 175 (expression -> something_ex .)
    APPEND          reduce using rule 175 (expression -> something_ex .)
    LEN             reduce using rule 175 (expression -> something_ex .)
    COPY            reduce using rule 175 (expression -> something_ex .)
    DELETE          reduce using rule 175 (expression -> something_ex .)
    IF              reduce using rule 175 (expression -> something_ex .)
    ELSE            reduce using rule 175 (expression -> something_ex .)
    TYPE            reduce using rule 175 (expression -> something_ex .)
    SWITCH          reduce using rule 175 (expression -> something_ex .)
    VAR             reduce using rule 175 (expression -> something_ex .)
    FUNC            reduce using rule 175 (expression -> something_ex .)
    INTEGER         reduce using rule 175 (expression -> something_ex .)
    FLOAT           reduce using rule 175 (expression -> something_ex .)
    NOT             reduce using rule 175 (expression -> something_ex .)
    RLLAVE          reduce using rule 175 (expression -> something_ex .)
    RETURN          reduce using rule 175 (expression -> something_ex .)
    STRING          reduce using rule 175 (expression -> something_ex .)
    TRUE            reduce using rule 175 (expression -> something_ex .)
    FALSE           reduce using rule 175 (expression -> something_ex .)
    INT32           reduce using rule 175 (expression -> something_ex .)
    INT64           reduce using rule 175 (expression -> something_ex .)
    FLOAT32         reduce using rule 175 (expression -> something_ex .)
    FLOAT64         reduce using rule 175 (expression -> something_ex .)
    BYTE            reduce using rule 175 (expression -> something_ex .)
    WFLOAT          reduce using rule 175 (expression -> something_ex .)
    WSTRING         reduce using rule 175 (expression -> something_ex .)
    WINT            reduce using rule 175 (expression -> something_ex .)
    BOOL            reduce using rule 175 (expression -> something_ex .)
    DEFAULT         reduce using rule 175 (expression -> something_ex .)
    CASE            reduce using rule 175 (expression -> something_ex .)
    RPAREN          reduce using rule 175 (expression -> something_ex .)
    AND             reduce using rule 175 (expression -> something_ex .)
    OR              reduce using rule 175 (expression -> something_ex .)
    LLLAVE          reduce using rule 175 (expression -> something_ex .)
    RCORCHE         reduce using rule 175 (expression -> something_ex .)
    COMA            reduce using rule 175 (expression -> something_ex .)
    GREATER         shift and go to state 117
    SMALLER         shift and go to state 118
    GREATER_OR_EQUAL shift and go to state 119
    SMALLER_OR_EQUAL shift and go to state 120
    EQUAL_COMPARE   shift and go to state 121
    NOT_EQUAL       shift and go to state 122
    PLUS            shift and go to state 123
    TIMES           shift and go to state 124
    DIVIDE          shift and go to state 125
    MINUS           shift and go to state 126
    MOD             shift and go to state 127

  ! GREATER         [ reduce using rule 175 (expression -> something_ex .) ]
  ! SMALLER         [ reduce using rule 175 (expression -> something_ex .) ]
  ! GREATER_OR_EQUAL [ reduce using rule 175 (expression -> something_ex .) ]
  ! SMALLER_OR_EQUAL [ reduce using rule 175 (expression -> something_ex .) ]
  ! EQUAL_COMPARE   [ reduce using rule 175 (expression -> something_ex .) ]
  ! NOT_EQUAL       [ reduce using rule 175 (expression -> something_ex .) ]
  ! PLUS            [ reduce using rule 175 (expression -> something_ex .) ]
  ! TIMES           [ reduce using rule 175 (expression -> something_ex .) ]
  ! DIVIDE          [ reduce using rule 175 (expression -> something_ex .) ]
  ! MINUS           [ reduce using rule 175 (expression -> something_ex .) ]
  ! MOD             [ reduce using rule 175 (expression -> something_ex .) ]

    adicionaEx                     shift and go to state 115
    op                             shift and go to state 116

state 65

    (166) cicloFor -> FOR . comparison LLLAVE codigo RLLAVE
    (167) cicloFor -> FOR . logic_operation LLLAVE codigo RLLAVE
    (168) cicloFor -> FOR . decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (171) decVarOne -> . ID DEQUAL ID
    (172) decVarOne -> . ID DEQUAL INTEGER
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    ID              shift and go to state 131
    NOT             shift and go to state 87
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    comparison                     shift and go to state 128
    logic_operation                shift and go to state 129
    decVarOne                      shift and go to state 130
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    expression                     shift and go to state 132
    something_ex                   shift and go to state 64
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 66

    (138) comparison -> value . op value
    (141) op -> . GREATER
    (142) op -> . SMALLER
    (143) op -> . GREATER_OR_EQUAL
    (144) op -> . SMALLER_OR_EQUAL
    (145) op -> . EQUAL_COMPARE
    (146) op -> . NOT_EQUAL
    (184) op -> . PLUS
    (185) op -> . TIMES
    (186) op -> . DIVIDE
    (187) op -> . MINUS
    (188) op -> . MOD

    GREATER         shift and go to state 117
    SMALLER         shift and go to state 118
    GREATER_OR_EQUAL shift and go to state 119
    SMALLER_OR_EQUAL shift and go to state 120
    EQUAL_COMPARE   shift and go to state 121
    NOT_EQUAL       shift and go to state 122
    PLUS            shift and go to state 123
    TIMES           shift and go to state 124
    DIVIDE          shift and go to state 125
    MINUS           shift and go to state 126
    MOD             shift and go to state 127

    op                             shift and go to state 137

state 67

    (189) logic_operation -> logic_value . logic_recu
    (191) logic_recu -> . logic_op logic_value
    (192) logic_recu -> . logic_op logic_value logic_recu
    (198) logic_op -> . AND
    (199) logic_op -> . OR

    AND             shift and go to state 140
    OR              shift and go to state 141

    logic_recu                     shift and go to state 138
    logic_op                       shift and go to state 139

state 68

    (190) logic_operation -> negation .
    (193) logic_value -> negation .

    PRINT           reduce using rule 190 (logic_operation -> negation .)
    SCAN            reduce using rule 190 (logic_operation -> negation .)
    FOR             reduce using rule 190 (logic_operation -> negation .)
    CONST           reduce using rule 190 (logic_operation -> negation .)
    ID              reduce using rule 190 (logic_operation -> negation .)
    APPEND          reduce using rule 190 (logic_operation -> negation .)
    LEN             reduce using rule 190 (logic_operation -> negation .)
    COPY            reduce using rule 190 (logic_operation -> negation .)
    DELETE          reduce using rule 190 (logic_operation -> negation .)
    IF              reduce using rule 190 (logic_operation -> negation .)
    ELSE            reduce using rule 190 (logic_operation -> negation .)
    TYPE            reduce using rule 190 (logic_operation -> negation .)
    SWITCH          reduce using rule 190 (logic_operation -> negation .)
    VAR             reduce using rule 190 (logic_operation -> negation .)
    FUNC            reduce using rule 190 (logic_operation -> negation .)
    INTEGER         reduce using rule 190 (logic_operation -> negation .)
    FLOAT           reduce using rule 190 (logic_operation -> negation .)
    NOT             reduce using rule 190 (logic_operation -> negation .)
    RLLAVE          reduce using rule 190 (logic_operation -> negation .)
    RETURN          reduce using rule 190 (logic_operation -> negation .)
    STRING          reduce using rule 190 (logic_operation -> negation .)
    TRUE            reduce using rule 190 (logic_operation -> negation .)
    FALSE           reduce using rule 190 (logic_operation -> negation .)
    INT32           reduce using rule 190 (logic_operation -> negation .)
    INT64           reduce using rule 190 (logic_operation -> negation .)
    FLOAT32         reduce using rule 190 (logic_operation -> negation .)
    FLOAT64         reduce using rule 190 (logic_operation -> negation .)
    BYTE            reduce using rule 190 (logic_operation -> negation .)
    WFLOAT          reduce using rule 190 (logic_operation -> negation .)
    WSTRING         reduce using rule 190 (logic_operation -> negation .)
    WINT            reduce using rule 190 (logic_operation -> negation .)
    BOOL            reduce using rule 190 (logic_operation -> negation .)
    DEFAULT         reduce using rule 190 (logic_operation -> negation .)
    CASE            reduce using rule 190 (logic_operation -> negation .)
    LLLAVE          reduce using rule 190 (logic_operation -> negation .)
    COLON           reduce using rule 190 (logic_operation -> negation .)
    RPAREN          reduce using rule 190 (logic_operation -> negation .)
    RCORCHE         reduce using rule 190 (logic_operation -> negation .)
    COMA            reduce using rule 190 (logic_operation -> negation .)
    AND             reduce using rule 193 (logic_value -> negation .)
    OR              reduce using rule 193 (logic_value -> negation .)


state 69

    (112) decVar -> static .

    COLON           reduce using rule 112 (decVar -> static .)
    PRINT           reduce using rule 112 (decVar -> static .)
    SCAN            reduce using rule 112 (decVar -> static .)
    FOR             reduce using rule 112 (decVar -> static .)
    CONST           reduce using rule 112 (decVar -> static .)
    ID              reduce using rule 112 (decVar -> static .)
    APPEND          reduce using rule 112 (decVar -> static .)
    LEN             reduce using rule 112 (decVar -> static .)
    COPY            reduce using rule 112 (decVar -> static .)
    DELETE          reduce using rule 112 (decVar -> static .)
    IF              reduce using rule 112 (decVar -> static .)
    ELSE            reduce using rule 112 (decVar -> static .)
    TYPE            reduce using rule 112 (decVar -> static .)
    SWITCH          reduce using rule 112 (decVar -> static .)
    VAR             reduce using rule 112 (decVar -> static .)
    FUNC            reduce using rule 112 (decVar -> static .)
    INTEGER         reduce using rule 112 (decVar -> static .)
    FLOAT           reduce using rule 112 (decVar -> static .)
    NOT             reduce using rule 112 (decVar -> static .)
    RLLAVE          reduce using rule 112 (decVar -> static .)
    RETURN          reduce using rule 112 (decVar -> static .)
    STRING          reduce using rule 112 (decVar -> static .)
    TRUE            reduce using rule 112 (decVar -> static .)
    FALSE           reduce using rule 112 (decVar -> static .)
    INT32           reduce using rule 112 (decVar -> static .)
    INT64           reduce using rule 112 (decVar -> static .)
    FLOAT32         reduce using rule 112 (decVar -> static .)
    FLOAT64         reduce using rule 112 (decVar -> static .)
    BYTE            reduce using rule 112 (decVar -> static .)
    WFLOAT          reduce using rule 112 (decVar -> static .)
    WSTRING         reduce using rule 112 (decVar -> static .)
    WINT            reduce using rule 112 (decVar -> static .)
    BOOL            reduce using rule 112 (decVar -> static .)
    DEFAULT         reduce using rule 112 (decVar -> static .)
    CASE            reduce using rule 112 (decVar -> static .)


state 70

    (113) decVar -> dynamic .

    COLON           reduce using rule 113 (decVar -> dynamic .)
    PRINT           reduce using rule 113 (decVar -> dynamic .)
    SCAN            reduce using rule 113 (decVar -> dynamic .)
    FOR             reduce using rule 113 (decVar -> dynamic .)
    CONST           reduce using rule 113 (decVar -> dynamic .)
    ID              reduce using rule 113 (decVar -> dynamic .)
    APPEND          reduce using rule 113 (decVar -> dynamic .)
    LEN             reduce using rule 113 (decVar -> dynamic .)
    COPY            reduce using rule 113 (decVar -> dynamic .)
    DELETE          reduce using rule 113 (decVar -> dynamic .)
    IF              reduce using rule 113 (decVar -> dynamic .)
    ELSE            reduce using rule 113 (decVar -> dynamic .)
    TYPE            reduce using rule 113 (decVar -> dynamic .)
    SWITCH          reduce using rule 113 (decVar -> dynamic .)
    VAR             reduce using rule 113 (decVar -> dynamic .)
    FUNC            reduce using rule 113 (decVar -> dynamic .)
    INTEGER         reduce using rule 113 (decVar -> dynamic .)
    FLOAT           reduce using rule 113 (decVar -> dynamic .)
    NOT             reduce using rule 113 (decVar -> dynamic .)
    RLLAVE          reduce using rule 113 (decVar -> dynamic .)
    RETURN          reduce using rule 113 (decVar -> dynamic .)
    STRING          reduce using rule 113 (decVar -> dynamic .)
    TRUE            reduce using rule 113 (decVar -> dynamic .)
    FALSE           reduce using rule 113 (decVar -> dynamic .)
    INT32           reduce using rule 113 (decVar -> dynamic .)
    INT64           reduce using rule 113 (decVar -> dynamic .)
    FLOAT32         reduce using rule 113 (decVar -> dynamic .)
    FLOAT64         reduce using rule 113 (decVar -> dynamic .)
    BYTE            reduce using rule 113 (decVar -> dynamic .)
    WFLOAT          reduce using rule 113 (decVar -> dynamic .)
    WSTRING         reduce using rule 113 (decVar -> dynamic .)
    WINT            reduce using rule 113 (decVar -> dynamic .)
    BOOL            reduce using rule 113 (decVar -> dynamic .)
    DEFAULT         reduce using rule 113 (decVar -> dynamic .)
    CASE            reduce using rule 113 (decVar -> dynamic .)


state 71

    (109) decConst -> CONST . ID data_type_and_value
    (110) decConst -> CONST . ID EQUAL ID
    (111) decConst -> CONST . ID EQUAL data_structure

    ID              shift and go to state 142


state 72

    (77) var_asignation -> ID . EQUAL any
    (101) cStruct -> ID . DEQUAL ID LLLAVE asignaciones RLLAVE
    (243) array_var -> ID . LCORCHE index RCORCHE
    (150) slice_declaration -> ID . DEQUAL funM
    (151) slice_declaration -> ID . DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> ID . LCORCHE index_s RCORCHE
    (179) something_ex -> ID .
    (139) value -> ID .
    (195) logic_value -> ID .
    (124) dynamic -> ID . DEQUAL algo
    (202) call_func -> ID . LPAREN list_params RPAREN
    (203) call_func -> ID . LPAREN RPAREN
    (249) map_var -> ID . LCORCHE key RCORCHE

  ! reduce/reduce conflict for GREATER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for GREATER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for EQUAL_COMPARE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MOD resolved using rule 139 (value -> ID .)
    EQUAL           shift and go to state 143
    DEQUAL          shift and go to state 144
    LCORCHE         shift and go to state 145
    COLON           reduce using rule 179 (something_ex -> ID .)
    PRINT           reduce using rule 179 (something_ex -> ID .)
    SCAN            reduce using rule 179 (something_ex -> ID .)
    FOR             reduce using rule 179 (something_ex -> ID .)
    CONST           reduce using rule 179 (something_ex -> ID .)
    ID              reduce using rule 179 (something_ex -> ID .)
    APPEND          reduce using rule 179 (something_ex -> ID .)
    LEN             reduce using rule 179 (something_ex -> ID .)
    COPY            reduce using rule 179 (something_ex -> ID .)
    DELETE          reduce using rule 179 (something_ex -> ID .)
    IF              reduce using rule 179 (something_ex -> ID .)
    ELSE            reduce using rule 179 (something_ex -> ID .)
    TYPE            reduce using rule 179 (something_ex -> ID .)
    SWITCH          reduce using rule 179 (something_ex -> ID .)
    VAR             reduce using rule 179 (something_ex -> ID .)
    FUNC            reduce using rule 179 (something_ex -> ID .)
    INTEGER         reduce using rule 179 (something_ex -> ID .)
    FLOAT           reduce using rule 179 (something_ex -> ID .)
    NOT             reduce using rule 179 (something_ex -> ID .)
    RLLAVE          reduce using rule 179 (something_ex -> ID .)
    RETURN          reduce using rule 179 (something_ex -> ID .)
    STRING          reduce using rule 179 (something_ex -> ID .)
    TRUE            reduce using rule 179 (something_ex -> ID .)
    FALSE           reduce using rule 179 (something_ex -> ID .)
    INT32           reduce using rule 179 (something_ex -> ID .)
    INT64           reduce using rule 179 (something_ex -> ID .)
    FLOAT32         reduce using rule 179 (something_ex -> ID .)
    FLOAT64         reduce using rule 179 (something_ex -> ID .)
    BYTE            reduce using rule 179 (something_ex -> ID .)
    WFLOAT          reduce using rule 179 (something_ex -> ID .)
    WSTRING         reduce using rule 179 (something_ex -> ID .)
    WINT            reduce using rule 179 (something_ex -> ID .)
    BOOL            reduce using rule 179 (something_ex -> ID .)
    DEFAULT         reduce using rule 179 (something_ex -> ID .)
    CASE            reduce using rule 179 (something_ex -> ID .)
    GREATER         reduce using rule 139 (value -> ID .)
    SMALLER         reduce using rule 139 (value -> ID .)
    GREATER_OR_EQUAL reduce using rule 139 (value -> ID .)
    SMALLER_OR_EQUAL reduce using rule 139 (value -> ID .)
    EQUAL_COMPARE   reduce using rule 139 (value -> ID .)
    NOT_EQUAL       reduce using rule 139 (value -> ID .)
    PLUS            reduce using rule 139 (value -> ID .)
    TIMES           reduce using rule 139 (value -> ID .)
    DIVIDE          reduce using rule 139 (value -> ID .)
    MINUS           reduce using rule 139 (value -> ID .)
    MOD             reduce using rule 139 (value -> ID .)
    AND             reduce using rule 195 (logic_value -> ID .)
    OR              reduce using rule 195 (logic_value -> ID .)
    LPAREN          shift and go to state 146

  ! GREATER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! GREATER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! EQUAL_COMPARE   [ reduce using rule 179 (something_ex -> ID .) ]
  ! NOT_EQUAL       [ reduce using rule 179 (something_ex -> ID .) ]
  ! PLUS            [ reduce using rule 179 (something_ex -> ID .) ]
  ! TIMES           [ reduce using rule 179 (something_ex -> ID .) ]
  ! DIVIDE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! MINUS           [ reduce using rule 179 (something_ex -> ID .) ]
  ! MOD             [ reduce using rule 179 (something_ex -> ID .) ]


state 73

    (182) something_ex -> data_structure .

    GREATER         reduce using rule 182 (something_ex -> data_structure .)
    SMALLER         reduce using rule 182 (something_ex -> data_structure .)
    GREATER_OR_EQUAL reduce using rule 182 (something_ex -> data_structure .)
    SMALLER_OR_EQUAL reduce using rule 182 (something_ex -> data_structure .)
    EQUAL_COMPARE   reduce using rule 182 (something_ex -> data_structure .)
    NOT_EQUAL       reduce using rule 182 (something_ex -> data_structure .)
    PLUS            reduce using rule 182 (something_ex -> data_structure .)
    TIMES           reduce using rule 182 (something_ex -> data_structure .)
    DIVIDE          reduce using rule 182 (something_ex -> data_structure .)
    MINUS           reduce using rule 182 (something_ex -> data_structure .)
    MOD             reduce using rule 182 (something_ex -> data_structure .)
    COLON           reduce using rule 182 (something_ex -> data_structure .)
    PRINT           reduce using rule 182 (something_ex -> data_structure .)
    SCAN            reduce using rule 182 (something_ex -> data_structure .)
    FOR             reduce using rule 182 (something_ex -> data_structure .)
    CONST           reduce using rule 182 (something_ex -> data_structure .)
    ID              reduce using rule 182 (something_ex -> data_structure .)
    APPEND          reduce using rule 182 (something_ex -> data_structure .)
    LEN             reduce using rule 182 (something_ex -> data_structure .)
    COPY            reduce using rule 182 (something_ex -> data_structure .)
    DELETE          reduce using rule 182 (something_ex -> data_structure .)
    IF              reduce using rule 182 (something_ex -> data_structure .)
    ELSE            reduce using rule 182 (something_ex -> data_structure .)
    TYPE            reduce using rule 182 (something_ex -> data_structure .)
    SWITCH          reduce using rule 182 (something_ex -> data_structure .)
    VAR             reduce using rule 182 (something_ex -> data_structure .)
    FUNC            reduce using rule 182 (something_ex -> data_structure .)
    INTEGER         reduce using rule 182 (something_ex -> data_structure .)
    FLOAT           reduce using rule 182 (something_ex -> data_structure .)
    NOT             reduce using rule 182 (something_ex -> data_structure .)
    RLLAVE          reduce using rule 182 (something_ex -> data_structure .)
    RETURN          reduce using rule 182 (something_ex -> data_structure .)
    STRING          reduce using rule 182 (something_ex -> data_structure .)
    TRUE            reduce using rule 182 (something_ex -> data_structure .)
    FALSE           reduce using rule 182 (something_ex -> data_structure .)
    INT32           reduce using rule 182 (something_ex -> data_structure .)
    INT64           reduce using rule 182 (something_ex -> data_structure .)
    FLOAT32         reduce using rule 182 (something_ex -> data_structure .)
    FLOAT64         reduce using rule 182 (something_ex -> data_structure .)
    BYTE            reduce using rule 182 (something_ex -> data_structure .)
    WFLOAT          reduce using rule 182 (something_ex -> data_structure .)
    WSTRING         reduce using rule 182 (something_ex -> data_structure .)
    WINT            reduce using rule 182 (something_ex -> data_structure .)
    BOOL            reduce using rule 182 (something_ex -> data_structure .)
    DEFAULT         reduce using rule 182 (something_ex -> data_structure .)
    CASE            reduce using rule 182 (something_ex -> data_structure .)
    RPAREN          reduce using rule 182 (something_ex -> data_structure .)
    AND             reduce using rule 182 (something_ex -> data_structure .)
    OR              reduce using rule 182 (something_ex -> data_structure .)
    LLLAVE          reduce using rule 182 (something_ex -> data_structure .)
    RCORCHE         reduce using rule 182 (something_ex -> data_structure .)
    COMA            reduce using rule 182 (something_ex -> data_structure .)


state 74

    (130) funciones -> APPEND . LPAREN ID COMA values RPAREN
    (131) funciones -> APPEND . LPAREN ID COMA ID RPAREN

    LPAREN          shift and go to state 147


state 75

    (132) funciones -> LEN . LPAREN ID RPAREN

    LPAREN          shift and go to state 148


state 76

    (133) funciones -> COPY . LPAREN ID COMA ID RPAREN

    LPAREN          shift and go to state 149


state 77

    (134) funciones -> DELETE . LPAREN ID COMA clave RPAREN

    LPAREN          shift and go to state 150


state 78

    (135) funciones -> call_func .

    COLON           reduce using rule 135 (funciones -> call_func .)
    PRINT           reduce using rule 135 (funciones -> call_func .)
    SCAN            reduce using rule 135 (funciones -> call_func .)
    FOR             reduce using rule 135 (funciones -> call_func .)
    CONST           reduce using rule 135 (funciones -> call_func .)
    ID              reduce using rule 135 (funciones -> call_func .)
    APPEND          reduce using rule 135 (funciones -> call_func .)
    LEN             reduce using rule 135 (funciones -> call_func .)
    COPY            reduce using rule 135 (funciones -> call_func .)
    DELETE          reduce using rule 135 (funciones -> call_func .)
    IF              reduce using rule 135 (funciones -> call_func .)
    ELSE            reduce using rule 135 (funciones -> call_func .)
    TYPE            reduce using rule 135 (funciones -> call_func .)
    SWITCH          reduce using rule 135 (funciones -> call_func .)
    VAR             reduce using rule 135 (funciones -> call_func .)
    FUNC            reduce using rule 135 (funciones -> call_func .)
    INTEGER         reduce using rule 135 (funciones -> call_func .)
    FLOAT           reduce using rule 135 (funciones -> call_func .)
    NOT             reduce using rule 135 (funciones -> call_func .)
    RLLAVE          reduce using rule 135 (funciones -> call_func .)
    GREATER         reduce using rule 135 (funciones -> call_func .)
    SMALLER         reduce using rule 135 (funciones -> call_func .)
    GREATER_OR_EQUAL reduce using rule 135 (funciones -> call_func .)
    SMALLER_OR_EQUAL reduce using rule 135 (funciones -> call_func .)
    EQUAL_COMPARE   reduce using rule 135 (funciones -> call_func .)
    NOT_EQUAL       reduce using rule 135 (funciones -> call_func .)
    PLUS            reduce using rule 135 (funciones -> call_func .)
    TIMES           reduce using rule 135 (funciones -> call_func .)
    DIVIDE          reduce using rule 135 (funciones -> call_func .)
    MINUS           reduce using rule 135 (funciones -> call_func .)
    MOD             reduce using rule 135 (funciones -> call_func .)
    RETURN          reduce using rule 135 (funciones -> call_func .)
    STRING          reduce using rule 135 (funciones -> call_func .)
    TRUE            reduce using rule 135 (funciones -> call_func .)
    FALSE           reduce using rule 135 (funciones -> call_func .)
    INT32           reduce using rule 135 (funciones -> call_func .)
    INT64           reduce using rule 135 (funciones -> call_func .)
    FLOAT32         reduce using rule 135 (funciones -> call_func .)
    FLOAT64         reduce using rule 135 (funciones -> call_func .)
    BYTE            reduce using rule 135 (funciones -> call_func .)
    WFLOAT          reduce using rule 135 (funciones -> call_func .)
    WSTRING         reduce using rule 135 (funciones -> call_func .)
    WINT            reduce using rule 135 (funciones -> call_func .)
    BOOL            reduce using rule 135 (funciones -> call_func .)
    DEFAULT         reduce using rule 135 (funciones -> call_func .)
    CASE            reduce using rule 135 (funciones -> call_func .)
    RPAREN          reduce using rule 135 (funciones -> call_func .)
    AND             reduce using rule 135 (funciones -> call_func .)
    OR              reduce using rule 135 (funciones -> call_func .)
    LLLAVE          reduce using rule 135 (funciones -> call_func .)
    RCORCHE         reduce using rule 135 (funciones -> call_func .)
    COMA            reduce using rule 135 (funciones -> call_func .)


state 79

    (88) SenIF -> IF . comparison LLLAVE codigo RLLAVE
    (89) SenIF -> IF . logic_operation LLLAVE codigo RLLAVE
    (90) SenIF -> IF . TRUE LLLAVE codigo RLLAVE
    (91) SenIF -> IF . FALSE LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    TRUE            shift and go to state 153
    FALSE           shift and go to state 154
    ID              shift and go to state 155
    NOT             shift and go to state 87
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    comparison                     shift and go to state 151
    logic_operation                shift and go to state 152
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    expression                     shift and go to state 132
    something_ex                   shift and go to state 64
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 80

    (92) SenElseIF -> ELSE . IF comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> ELSE . IF logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> ELSE . IF TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> ELSE . IF FALSE LLLAVE codigo RLLAVE
    (96) SenElse -> ELSE . LLLAVE codigo RLLAVE

    IF              shift and go to state 156
    LLLAVE          shift and go to state 157


state 81

    (97) SenStruct -> TYPE . ID STRUCT LLLAVE declaration RLLAVE

    ID              shift and go to state 158


state 82

    (233) switch_statement -> SWITCH . ID LLLAVE cases RLLAVE

    ID              shift and go to state 159


state 83

    (238) array_declaration -> VAR . ID LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> VAR . ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (147) slice_declaration -> VAR . ID LCORCHE RCORCHE data_types
    (148) slice_declaration -> VAR . ID EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> VAR . ID EQUAL funM
    (248) map_declaration -> VAR . ID LCORCHE data_types RCORCHE data_types
    (120) single -> VAR . ID data_types
    (121) single -> VAR . ID data_types EQUAL funciones
    (122) single -> VAR . ID data_types EQUAL data_structure
    (123) single -> VAR . ID data_type_and_value
    (117) list_var -> VAR . ID COMA more

    ID              shift and go to state 160


state 84

    (253) map_assignment -> map_var . EQUAL something
    (75) data_structure -> map_var .

    EQUAL           shift and go to state 161
    GREATER         reduce using rule 75 (data_structure -> map_var .)
    SMALLER         reduce using rule 75 (data_structure -> map_var .)
    GREATER_OR_EQUAL reduce using rule 75 (data_structure -> map_var .)
    SMALLER_OR_EQUAL reduce using rule 75 (data_structure -> map_var .)
    EQUAL_COMPARE   reduce using rule 75 (data_structure -> map_var .)
    NOT_EQUAL       reduce using rule 75 (data_structure -> map_var .)
    PLUS            reduce using rule 75 (data_structure -> map_var .)
    TIMES           reduce using rule 75 (data_structure -> map_var .)
    DIVIDE          reduce using rule 75 (data_structure -> map_var .)
    MINUS           reduce using rule 75 (data_structure -> map_var .)
    MOD             reduce using rule 75 (data_structure -> map_var .)
    COLON           reduce using rule 75 (data_structure -> map_var .)
    PRINT           reduce using rule 75 (data_structure -> map_var .)
    SCAN            reduce using rule 75 (data_structure -> map_var .)
    FOR             reduce using rule 75 (data_structure -> map_var .)
    CONST           reduce using rule 75 (data_structure -> map_var .)
    ID              reduce using rule 75 (data_structure -> map_var .)
    APPEND          reduce using rule 75 (data_structure -> map_var .)
    LEN             reduce using rule 75 (data_structure -> map_var .)
    COPY            reduce using rule 75 (data_structure -> map_var .)
    DELETE          reduce using rule 75 (data_structure -> map_var .)
    IF              reduce using rule 75 (data_structure -> map_var .)
    ELSE            reduce using rule 75 (data_structure -> map_var .)
    TYPE            reduce using rule 75 (data_structure -> map_var .)
    SWITCH          reduce using rule 75 (data_structure -> map_var .)
    VAR             reduce using rule 75 (data_structure -> map_var .)
    FUNC            reduce using rule 75 (data_structure -> map_var .)
    INTEGER         reduce using rule 75 (data_structure -> map_var .)
    FLOAT           reduce using rule 75 (data_structure -> map_var .)
    NOT             reduce using rule 75 (data_structure -> map_var .)
    RLLAVE          reduce using rule 75 (data_structure -> map_var .)
    RETURN          reduce using rule 75 (data_structure -> map_var .)
    STRING          reduce using rule 75 (data_structure -> map_var .)
    TRUE            reduce using rule 75 (data_structure -> map_var .)
    FALSE           reduce using rule 75 (data_structure -> map_var .)
    INT32           reduce using rule 75 (data_structure -> map_var .)
    INT64           reduce using rule 75 (data_structure -> map_var .)
    FLOAT32         reduce using rule 75 (data_structure -> map_var .)
    FLOAT64         reduce using rule 75 (data_structure -> map_var .)
    BYTE            reduce using rule 75 (data_structure -> map_var .)
    WFLOAT          reduce using rule 75 (data_structure -> map_var .)
    WSTRING         reduce using rule 75 (data_structure -> map_var .)
    WINT            reduce using rule 75 (data_structure -> map_var .)
    BOOL            reduce using rule 75 (data_structure -> map_var .)
    DEFAULT         reduce using rule 75 (data_structure -> map_var .)
    CASE            reduce using rule 75 (data_structure -> map_var .)


state 85

    (180) something_ex -> INTEGER .

    GREATER         reduce using rule 180 (something_ex -> INTEGER .)
    SMALLER         reduce using rule 180 (something_ex -> INTEGER .)
    GREATER_OR_EQUAL reduce using rule 180 (something_ex -> INTEGER .)
    SMALLER_OR_EQUAL reduce using rule 180 (something_ex -> INTEGER .)
    EQUAL_COMPARE   reduce using rule 180 (something_ex -> INTEGER .)
    NOT_EQUAL       reduce using rule 180 (something_ex -> INTEGER .)
    PLUS            reduce using rule 180 (something_ex -> INTEGER .)
    TIMES           reduce using rule 180 (something_ex -> INTEGER .)
    DIVIDE          reduce using rule 180 (something_ex -> INTEGER .)
    MINUS           reduce using rule 180 (something_ex -> INTEGER .)
    MOD             reduce using rule 180 (something_ex -> INTEGER .)
    COLON           reduce using rule 180 (something_ex -> INTEGER .)
    PRINT           reduce using rule 180 (something_ex -> INTEGER .)
    SCAN            reduce using rule 180 (something_ex -> INTEGER .)
    FOR             reduce using rule 180 (something_ex -> INTEGER .)
    CONST           reduce using rule 180 (something_ex -> INTEGER .)
    ID              reduce using rule 180 (something_ex -> INTEGER .)
    APPEND          reduce using rule 180 (something_ex -> INTEGER .)
    LEN             reduce using rule 180 (something_ex -> INTEGER .)
    COPY            reduce using rule 180 (something_ex -> INTEGER .)
    DELETE          reduce using rule 180 (something_ex -> INTEGER .)
    IF              reduce using rule 180 (something_ex -> INTEGER .)
    ELSE            reduce using rule 180 (something_ex -> INTEGER .)
    TYPE            reduce using rule 180 (something_ex -> INTEGER .)
    SWITCH          reduce using rule 180 (something_ex -> INTEGER .)
    VAR             reduce using rule 180 (something_ex -> INTEGER .)
    FUNC            reduce using rule 180 (something_ex -> INTEGER .)
    INTEGER         reduce using rule 180 (something_ex -> INTEGER .)
    FLOAT           reduce using rule 180 (something_ex -> INTEGER .)
    NOT             reduce using rule 180 (something_ex -> INTEGER .)
    RLLAVE          reduce using rule 180 (something_ex -> INTEGER .)
    RETURN          reduce using rule 180 (something_ex -> INTEGER .)
    STRING          reduce using rule 180 (something_ex -> INTEGER .)
    TRUE            reduce using rule 180 (something_ex -> INTEGER .)
    FALSE           reduce using rule 180 (something_ex -> INTEGER .)
    INT32           reduce using rule 180 (something_ex -> INTEGER .)
    INT64           reduce using rule 180 (something_ex -> INTEGER .)
    FLOAT32         reduce using rule 180 (something_ex -> INTEGER .)
    FLOAT64         reduce using rule 180 (something_ex -> INTEGER .)
    BYTE            reduce using rule 180 (something_ex -> INTEGER .)
    WFLOAT          reduce using rule 180 (something_ex -> INTEGER .)
    WSTRING         reduce using rule 180 (something_ex -> INTEGER .)
    WINT            reduce using rule 180 (something_ex -> INTEGER .)
    BOOL            reduce using rule 180 (something_ex -> INTEGER .)
    DEFAULT         reduce using rule 180 (something_ex -> INTEGER .)
    CASE            reduce using rule 180 (something_ex -> INTEGER .)
    RPAREN          reduce using rule 180 (something_ex -> INTEGER .)
    AND             reduce using rule 180 (something_ex -> INTEGER .)
    OR              reduce using rule 180 (something_ex -> INTEGER .)
    LLLAVE          reduce using rule 180 (something_ex -> INTEGER .)
    RCORCHE         reduce using rule 180 (something_ex -> INTEGER .)
    COMA            reduce using rule 180 (something_ex -> INTEGER .)


state 86

    (181) something_ex -> FLOAT .

    GREATER         reduce using rule 181 (something_ex -> FLOAT .)
    SMALLER         reduce using rule 181 (something_ex -> FLOAT .)
    GREATER_OR_EQUAL reduce using rule 181 (something_ex -> FLOAT .)
    SMALLER_OR_EQUAL reduce using rule 181 (something_ex -> FLOAT .)
    EQUAL_COMPARE   reduce using rule 181 (something_ex -> FLOAT .)
    NOT_EQUAL       reduce using rule 181 (something_ex -> FLOAT .)
    PLUS            reduce using rule 181 (something_ex -> FLOAT .)
    TIMES           reduce using rule 181 (something_ex -> FLOAT .)
    DIVIDE          reduce using rule 181 (something_ex -> FLOAT .)
    MINUS           reduce using rule 181 (something_ex -> FLOAT .)
    MOD             reduce using rule 181 (something_ex -> FLOAT .)
    COLON           reduce using rule 181 (something_ex -> FLOAT .)
    PRINT           reduce using rule 181 (something_ex -> FLOAT .)
    SCAN            reduce using rule 181 (something_ex -> FLOAT .)
    FOR             reduce using rule 181 (something_ex -> FLOAT .)
    CONST           reduce using rule 181 (something_ex -> FLOAT .)
    ID              reduce using rule 181 (something_ex -> FLOAT .)
    APPEND          reduce using rule 181 (something_ex -> FLOAT .)
    LEN             reduce using rule 181 (something_ex -> FLOAT .)
    COPY            reduce using rule 181 (something_ex -> FLOAT .)
    DELETE          reduce using rule 181 (something_ex -> FLOAT .)
    IF              reduce using rule 181 (something_ex -> FLOAT .)
    ELSE            reduce using rule 181 (something_ex -> FLOAT .)
    TYPE            reduce using rule 181 (something_ex -> FLOAT .)
    SWITCH          reduce using rule 181 (something_ex -> FLOAT .)
    VAR             reduce using rule 181 (something_ex -> FLOAT .)
    FUNC            reduce using rule 181 (something_ex -> FLOAT .)
    INTEGER         reduce using rule 181 (something_ex -> FLOAT .)
    FLOAT           reduce using rule 181 (something_ex -> FLOAT .)
    NOT             reduce using rule 181 (something_ex -> FLOAT .)
    RLLAVE          reduce using rule 181 (something_ex -> FLOAT .)
    RETURN          reduce using rule 181 (something_ex -> FLOAT .)
    STRING          reduce using rule 181 (something_ex -> FLOAT .)
    TRUE            reduce using rule 181 (something_ex -> FLOAT .)
    FALSE           reduce using rule 181 (something_ex -> FLOAT .)
    INT32           reduce using rule 181 (something_ex -> FLOAT .)
    INT64           reduce using rule 181 (something_ex -> FLOAT .)
    FLOAT32         reduce using rule 181 (something_ex -> FLOAT .)
    FLOAT64         reduce using rule 181 (something_ex -> FLOAT .)
    BYTE            reduce using rule 181 (something_ex -> FLOAT .)
    WFLOAT          reduce using rule 181 (something_ex -> FLOAT .)
    WSTRING         reduce using rule 181 (something_ex -> FLOAT .)
    WINT            reduce using rule 181 (something_ex -> FLOAT .)
    BOOL            reduce using rule 181 (something_ex -> FLOAT .)
    DEFAULT         reduce using rule 181 (something_ex -> FLOAT .)
    CASE            reduce using rule 181 (something_ex -> FLOAT .)
    RPAREN          reduce using rule 181 (something_ex -> FLOAT .)
    AND             reduce using rule 181 (something_ex -> FLOAT .)
    OR              reduce using rule 181 (something_ex -> FLOAT .)
    LLLAVE          reduce using rule 181 (something_ex -> FLOAT .)
    RCORCHE         reduce using rule 181 (something_ex -> FLOAT .)
    COMA            reduce using rule 181 (something_ex -> FLOAT .)


state 87

    (196) negation -> NOT . comparison
    (197) negation -> NOT . ID
    (138) comparison -> . value op value
    (139) value -> . ID
    (140) value -> . expression
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    ID              shift and go to state 163
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    comparison                     shift and go to state 162
    value                          shift and go to state 66
    expression                     shift and go to state 132
    something_ex                   shift and go to state 64
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 88

    (114) static -> single .

    COLON           reduce using rule 114 (static -> single .)
    PRINT           reduce using rule 114 (static -> single .)
    SCAN            reduce using rule 114 (static -> single .)
    FOR             reduce using rule 114 (static -> single .)
    CONST           reduce using rule 114 (static -> single .)
    ID              reduce using rule 114 (static -> single .)
    APPEND          reduce using rule 114 (static -> single .)
    LEN             reduce using rule 114 (static -> single .)
    COPY            reduce using rule 114 (static -> single .)
    DELETE          reduce using rule 114 (static -> single .)
    IF              reduce using rule 114 (static -> single .)
    ELSE            reduce using rule 114 (static -> single .)
    TYPE            reduce using rule 114 (static -> single .)
    SWITCH          reduce using rule 114 (static -> single .)
    VAR             reduce using rule 114 (static -> single .)
    FUNC            reduce using rule 114 (static -> single .)
    INTEGER         reduce using rule 114 (static -> single .)
    FLOAT           reduce using rule 114 (static -> single .)
    NOT             reduce using rule 114 (static -> single .)
    RLLAVE          reduce using rule 114 (static -> single .)
    RETURN          reduce using rule 114 (static -> single .)
    STRING          reduce using rule 114 (static -> single .)
    TRUE            reduce using rule 114 (static -> single .)
    FALSE           reduce using rule 114 (static -> single .)
    INT32           reduce using rule 114 (static -> single .)
    INT64           reduce using rule 114 (static -> single .)
    FLOAT32         reduce using rule 114 (static -> single .)
    FLOAT64         reduce using rule 114 (static -> single .)
    BYTE            reduce using rule 114 (static -> single .)
    WFLOAT          reduce using rule 114 (static -> single .)
    WSTRING         reduce using rule 114 (static -> single .)
    WINT            reduce using rule 114 (static -> single .)
    BOOL            reduce using rule 114 (static -> single .)
    DEFAULT         reduce using rule 114 (static -> single .)
    CASE            reduce using rule 114 (static -> single .)


state 89

    (115) static -> multiple .

    COLON           reduce using rule 115 (static -> multiple .)
    PRINT           reduce using rule 115 (static -> multiple .)
    SCAN            reduce using rule 115 (static -> multiple .)
    FOR             reduce using rule 115 (static -> multiple .)
    CONST           reduce using rule 115 (static -> multiple .)
    ID              reduce using rule 115 (static -> multiple .)
    APPEND          reduce using rule 115 (static -> multiple .)
    LEN             reduce using rule 115 (static -> multiple .)
    COPY            reduce using rule 115 (static -> multiple .)
    DELETE          reduce using rule 115 (static -> multiple .)
    IF              reduce using rule 115 (static -> multiple .)
    ELSE            reduce using rule 115 (static -> multiple .)
    TYPE            reduce using rule 115 (static -> multiple .)
    SWITCH          reduce using rule 115 (static -> multiple .)
    VAR             reduce using rule 115 (static -> multiple .)
    FUNC            reduce using rule 115 (static -> multiple .)
    INTEGER         reduce using rule 115 (static -> multiple .)
    FLOAT           reduce using rule 115 (static -> multiple .)
    NOT             reduce using rule 115 (static -> multiple .)
    RLLAVE          reduce using rule 115 (static -> multiple .)
    RETURN          reduce using rule 115 (static -> multiple .)
    STRING          reduce using rule 115 (static -> multiple .)
    TRUE            reduce using rule 115 (static -> multiple .)
    FALSE           reduce using rule 115 (static -> multiple .)
    INT32           reduce using rule 115 (static -> multiple .)
    INT64           reduce using rule 115 (static -> multiple .)
    FLOAT32         reduce using rule 115 (static -> multiple .)
    FLOAT64         reduce using rule 115 (static -> multiple .)
    BYTE            reduce using rule 115 (static -> multiple .)
    WFLOAT          reduce using rule 115 (static -> multiple .)
    WSTRING         reduce using rule 115 (static -> multiple .)
    WINT            reduce using rule 115 (static -> multiple .)
    BOOL            reduce using rule 115 (static -> multiple .)
    DEFAULT         reduce using rule 115 (static -> multiple .)
    CASE            reduce using rule 115 (static -> multiple .)


state 90

    (116) multiple -> list_var . data_types
    (56) data_types -> . INT32
    (57) data_types -> . INT64
    (58) data_types -> . FLOAT32
    (59) data_types -> . FLOAT64
    (60) data_types -> . BYTE
    (61) data_types -> . WFLOAT
    (62) data_types -> . WSTRING
    (63) data_types -> . WINT
    (64) data_types -> . BOOL

    INT32           shift and go to state 22
    INT64           shift and go to state 23
    FLOAT32         shift and go to state 24
    FLOAT64         shift and go to state 25
    BYTE            shift and go to state 26
    WFLOAT          shift and go to state 27
    WSTRING         shift and go to state 28
    WINT            shift and go to state 29
    BOOL            shift and go to state 30

    data_types                     shift and go to state 164

state 91

    (267) more_params -> ID data_types COMA . params
    (265) params -> . ID data_types
    (266) params -> . more_params
    (267) more_params -> . ID data_types COMA params

    ID              shift and go to state 17

    params                         shift and go to state 165
    more_params                    shift and go to state 19

state 92

    (254) func_declaration -> FUNC ID LPAREN params RPAREN data_types . LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> FUNC ID LPAREN params RPAREN data_types . LLLAVE RETURN body RLLAVE

    LLLAVE          shift and go to state 166


state 93

    (256) func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE . codigo RLLAVE
    (7) codigo -> . rule
    (8) codigo -> . more_rules
    (10) rule -> . impresion COLON
    (11) rule -> . impresion
    (12) rule -> . scan_func COLON
    (13) rule -> . scan_func
    (14) rule -> . expression COLON
    (15) rule -> . expression
    (16) rule -> . cicloFor
    (17) rule -> . comparison
    (18) rule -> . logic_operation
    (19) rule -> . decVar COLON
    (20) rule -> . decVar
    (21) rule -> . decConst COLON
    (22) rule -> . decConst
    (23) rule -> . var_asignation
    (24) rule -> . var_asignation COLON
    (25) rule -> . funciones
    (26) rule -> . funciones COLON
    (27) rule -> . SenIF
    (28) rule -> . SenElseIF
    (29) rule -> . SenElse
    (30) rule -> . SenStruct
    (31) rule -> . cStruct
    (32) rule -> . switch_statement
    (33) rule -> . array_declaration COLON
    (34) rule -> . array_declaration
    (35) rule -> . array_var COLON
    (36) rule -> . array_var
    (37) rule -> . array_assignment COLON
    (38) rule -> . array_assignment
    (39) rule -> . slice_declaration COLON
    (40) rule -> . slice_declaration
    (41) rule -> . slice_var COLON
    (42) rule -> . slice_var
    (43) rule -> . slice_assignment COLON
    (44) rule -> . slice_assignment
    (45) rule -> . map_declaration COLON
    (46) rule -> . map_declaration
    (47) rule -> . map_assignment COLON
    (48) rule -> . map_assignment
    (49) rule -> . func_declaration
    (50) rule -> . main_func
    (9) more_rules -> . rule codigo
    (173) impresion -> . PRINT LPAREN something RPAREN
    (174) impresion -> . PRINT LPAREN error RPAREN
    (201) scan_func -> . SCAN LPAREN POINTER RPAREN
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (166) cicloFor -> . FOR comparison LLLAVE codigo RLLAVE
    (167) cicloFor -> . FOR logic_operation LLLAVE codigo RLLAVE
    (168) cicloFor -> . FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (112) decVar -> . static
    (113) decVar -> . dynamic
    (109) decConst -> . CONST ID data_type_and_value
    (110) decConst -> . CONST ID EQUAL ID
    (111) decConst -> . CONST ID EQUAL data_structure
    (77) var_asignation -> . ID EQUAL any
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (88) SenIF -> . IF comparison LLLAVE codigo RLLAVE
    (89) SenIF -> . IF logic_operation LLLAVE codigo RLLAVE
    (90) SenIF -> . IF TRUE LLLAVE codigo RLLAVE
    (91) SenIF -> . IF FALSE LLLAVE codigo RLLAVE
    (92) SenElseIF -> . ELSE IF comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> . ELSE IF logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> . ELSE IF TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> . ELSE IF FALSE LLLAVE codigo RLLAVE
    (96) SenElse -> . ELSE LLLAVE codigo RLLAVE
    (97) SenStruct -> . TYPE ID STRUCT LLLAVE declaration RLLAVE
    (101) cStruct -> . ID DEQUAL ID LLLAVE asignaciones RLLAVE
    (233) switch_statement -> . SWITCH ID LLLAVE cases RLLAVE
    (238) array_declaration -> . VAR ID LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> . VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (243) array_var -> . ID LCORCHE index RCORCHE
    (247) array_assignment -> . array_var EQUAL something
    (147) slice_declaration -> . VAR ID LCORCHE RCORCHE data_types
    (148) slice_declaration -> . VAR ID EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> . VAR ID EQUAL funM
    (150) slice_declaration -> . ID DEQUAL funM
    (151) slice_declaration -> . ID DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (161) slice_assignment -> . slice_var EQUAL something_s
    (248) map_declaration -> . VAR ID LCORCHE data_types RCORCHE data_types
    (253) map_assignment -> . map_var EQUAL something
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (114) static -> . single
    (115) static -> . multiple
    (124) dynamic -> . ID DEQUAL algo
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (249) map_var -> . ID LCORCHE key RCORCHE
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (120) single -> . VAR ID data_types
    (121) single -> . VAR ID data_types EQUAL funciones
    (122) single -> . VAR ID data_types EQUAL data_structure
    (123) single -> . VAR ID data_type_and_value
    (116) multiple -> . list_var data_types
    (117) list_var -> . VAR ID COMA more

    PRINT           shift and go to state 62
    SCAN            shift and go to state 63
    FOR             shift and go to state 65
    CONST           shift and go to state 71
    ID              shift and go to state 72
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    IF              shift and go to state 79
    ELSE            shift and go to state 80
    TYPE            shift and go to state 81
    SWITCH          shift and go to state 82
    VAR             shift and go to state 83
    FUNC            shift and go to state 32
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    NOT             shift and go to state 87

    codigo                         shift and go to state 167
    rule                           shift and go to state 34
    more_rules                     shift and go to state 35
    impresion                      shift and go to state 36
    scan_func                      shift and go to state 37
    expression                     shift and go to state 38
    cicloFor                       shift and go to state 39
    comparison                     shift and go to state 40
    logic_operation                shift and go to state 41
    decVar                         shift and go to state 42
    decConst                       shift and go to state 43
    var_asignation                 shift and go to state 44
    funciones                      shift and go to state 45
    SenIF                          shift and go to state 46
    SenElseIF                      shift and go to state 47
    SenElse                        shift and go to state 48
    SenStruct                      shift and go to state 49
    cStruct                        shift and go to state 50
    switch_statement               shift and go to state 51
    array_declaration              shift and go to state 52
    array_var                      shift and go to state 53
    array_assignment               shift and go to state 54
    slice_declaration              shift and go to state 55
    slice_var                      shift and go to state 56
    slice_assignment               shift and go to state 57
    map_declaration                shift and go to state 58
    map_assignment                 shift and go to state 59
    func_declaration               shift and go to state 60
    main_func                      shift and go to state 61
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    static                         shift and go to state 69
    dynamic                        shift and go to state 70
    data_structure                 shift and go to state 73
    call_func                      shift and go to state 78
    map_var                        shift and go to state 84
    single                         shift and go to state 88
    multiple                       shift and go to state 89
    list_var                       shift and go to state 90

state 94

    (200) main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .

    FUNC            reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    $end            reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    PRINT           reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    SCAN            reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    FOR             reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    CONST           reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    ID              reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    APPEND          reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    LEN             reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    COPY            reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    DELETE          reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    IF              reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    ELSE            reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    TYPE            reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    SWITCH          reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    VAR             reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    INTEGER         reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    FLOAT           reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    NOT             reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    RLLAVE          reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    RETURN          reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    STRING          reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    TRUE            reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    FALSE           reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    INT32           reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    INT64           reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    FLOAT32         reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    FLOAT64         reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    BYTE            reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    WFLOAT          reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    WSTRING         reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    WINT            reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    BOOL            reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    DEFAULT         reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)
    CASE            reduce using rule 200 (main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE .)


state 95

    (9) more_rules -> rule codigo .

    RLLAVE          reduce using rule 9 (more_rules -> rule codigo .)
    RETURN          reduce using rule 9 (more_rules -> rule codigo .)
    ID              reduce using rule 9 (more_rules -> rule codigo .)
    STRING          reduce using rule 9 (more_rules -> rule codigo .)
    INTEGER         reduce using rule 9 (more_rules -> rule codigo .)
    FLOAT           reduce using rule 9 (more_rules -> rule codigo .)
    TRUE            reduce using rule 9 (more_rules -> rule codigo .)
    FALSE           reduce using rule 9 (more_rules -> rule codigo .)
    NOT             reduce using rule 9 (more_rules -> rule codigo .)
    APPEND          reduce using rule 9 (more_rules -> rule codigo .)
    LEN             reduce using rule 9 (more_rules -> rule codigo .)
    COPY            reduce using rule 9 (more_rules -> rule codigo .)
    DELETE          reduce using rule 9 (more_rules -> rule codigo .)
    INT32           reduce using rule 9 (more_rules -> rule codigo .)
    INT64           reduce using rule 9 (more_rules -> rule codigo .)
    FLOAT32         reduce using rule 9 (more_rules -> rule codigo .)
    FLOAT64         reduce using rule 9 (more_rules -> rule codigo .)
    BYTE            reduce using rule 9 (more_rules -> rule codigo .)
    WFLOAT          reduce using rule 9 (more_rules -> rule codigo .)
    WSTRING         reduce using rule 9 (more_rules -> rule codigo .)
    WINT            reduce using rule 9 (more_rules -> rule codigo .)
    BOOL            reduce using rule 9 (more_rules -> rule codigo .)
    DEFAULT         reduce using rule 9 (more_rules -> rule codigo .)
    CASE            reduce using rule 9 (more_rules -> rule codigo .)


state 96

    (10) rule -> impresion COLON .

    PRINT           reduce using rule 10 (rule -> impresion COLON .)
    SCAN            reduce using rule 10 (rule -> impresion COLON .)
    FOR             reduce using rule 10 (rule -> impresion COLON .)
    CONST           reduce using rule 10 (rule -> impresion COLON .)
    ID              reduce using rule 10 (rule -> impresion COLON .)
    APPEND          reduce using rule 10 (rule -> impresion COLON .)
    LEN             reduce using rule 10 (rule -> impresion COLON .)
    COPY            reduce using rule 10 (rule -> impresion COLON .)
    DELETE          reduce using rule 10 (rule -> impresion COLON .)
    IF              reduce using rule 10 (rule -> impresion COLON .)
    ELSE            reduce using rule 10 (rule -> impresion COLON .)
    TYPE            reduce using rule 10 (rule -> impresion COLON .)
    SWITCH          reduce using rule 10 (rule -> impresion COLON .)
    VAR             reduce using rule 10 (rule -> impresion COLON .)
    FUNC            reduce using rule 10 (rule -> impresion COLON .)
    INTEGER         reduce using rule 10 (rule -> impresion COLON .)
    FLOAT           reduce using rule 10 (rule -> impresion COLON .)
    NOT             reduce using rule 10 (rule -> impresion COLON .)
    RLLAVE          reduce using rule 10 (rule -> impresion COLON .)
    RETURN          reduce using rule 10 (rule -> impresion COLON .)
    STRING          reduce using rule 10 (rule -> impresion COLON .)
    TRUE            reduce using rule 10 (rule -> impresion COLON .)
    FALSE           reduce using rule 10 (rule -> impresion COLON .)
    INT32           reduce using rule 10 (rule -> impresion COLON .)
    INT64           reduce using rule 10 (rule -> impresion COLON .)
    FLOAT32         reduce using rule 10 (rule -> impresion COLON .)
    FLOAT64         reduce using rule 10 (rule -> impresion COLON .)
    BYTE            reduce using rule 10 (rule -> impresion COLON .)
    WFLOAT          reduce using rule 10 (rule -> impresion COLON .)
    WSTRING         reduce using rule 10 (rule -> impresion COLON .)
    WINT            reduce using rule 10 (rule -> impresion COLON .)
    BOOL            reduce using rule 10 (rule -> impresion COLON .)
    DEFAULT         reduce using rule 10 (rule -> impresion COLON .)
    CASE            reduce using rule 10 (rule -> impresion COLON .)


state 97

    (12) rule -> scan_func COLON .

    PRINT           reduce using rule 12 (rule -> scan_func COLON .)
    SCAN            reduce using rule 12 (rule -> scan_func COLON .)
    FOR             reduce using rule 12 (rule -> scan_func COLON .)
    CONST           reduce using rule 12 (rule -> scan_func COLON .)
    ID              reduce using rule 12 (rule -> scan_func COLON .)
    APPEND          reduce using rule 12 (rule -> scan_func COLON .)
    LEN             reduce using rule 12 (rule -> scan_func COLON .)
    COPY            reduce using rule 12 (rule -> scan_func COLON .)
    DELETE          reduce using rule 12 (rule -> scan_func COLON .)
    IF              reduce using rule 12 (rule -> scan_func COLON .)
    ELSE            reduce using rule 12 (rule -> scan_func COLON .)
    TYPE            reduce using rule 12 (rule -> scan_func COLON .)
    SWITCH          reduce using rule 12 (rule -> scan_func COLON .)
    VAR             reduce using rule 12 (rule -> scan_func COLON .)
    FUNC            reduce using rule 12 (rule -> scan_func COLON .)
    INTEGER         reduce using rule 12 (rule -> scan_func COLON .)
    FLOAT           reduce using rule 12 (rule -> scan_func COLON .)
    NOT             reduce using rule 12 (rule -> scan_func COLON .)
    RLLAVE          reduce using rule 12 (rule -> scan_func COLON .)
    RETURN          reduce using rule 12 (rule -> scan_func COLON .)
    STRING          reduce using rule 12 (rule -> scan_func COLON .)
    TRUE            reduce using rule 12 (rule -> scan_func COLON .)
    FALSE           reduce using rule 12 (rule -> scan_func COLON .)
    INT32           reduce using rule 12 (rule -> scan_func COLON .)
    INT64           reduce using rule 12 (rule -> scan_func COLON .)
    FLOAT32         reduce using rule 12 (rule -> scan_func COLON .)
    FLOAT64         reduce using rule 12 (rule -> scan_func COLON .)
    BYTE            reduce using rule 12 (rule -> scan_func COLON .)
    WFLOAT          reduce using rule 12 (rule -> scan_func COLON .)
    WSTRING         reduce using rule 12 (rule -> scan_func COLON .)
    WINT            reduce using rule 12 (rule -> scan_func COLON .)
    BOOL            reduce using rule 12 (rule -> scan_func COLON .)
    DEFAULT         reduce using rule 12 (rule -> scan_func COLON .)
    CASE            reduce using rule 12 (rule -> scan_func COLON .)


state 98

    (14) rule -> expression COLON .

    PRINT           reduce using rule 14 (rule -> expression COLON .)
    SCAN            reduce using rule 14 (rule -> expression COLON .)
    FOR             reduce using rule 14 (rule -> expression COLON .)
    CONST           reduce using rule 14 (rule -> expression COLON .)
    ID              reduce using rule 14 (rule -> expression COLON .)
    APPEND          reduce using rule 14 (rule -> expression COLON .)
    LEN             reduce using rule 14 (rule -> expression COLON .)
    COPY            reduce using rule 14 (rule -> expression COLON .)
    DELETE          reduce using rule 14 (rule -> expression COLON .)
    IF              reduce using rule 14 (rule -> expression COLON .)
    ELSE            reduce using rule 14 (rule -> expression COLON .)
    TYPE            reduce using rule 14 (rule -> expression COLON .)
    SWITCH          reduce using rule 14 (rule -> expression COLON .)
    VAR             reduce using rule 14 (rule -> expression COLON .)
    FUNC            reduce using rule 14 (rule -> expression COLON .)
    INTEGER         reduce using rule 14 (rule -> expression COLON .)
    FLOAT           reduce using rule 14 (rule -> expression COLON .)
    NOT             reduce using rule 14 (rule -> expression COLON .)
    RLLAVE          reduce using rule 14 (rule -> expression COLON .)
    RETURN          reduce using rule 14 (rule -> expression COLON .)
    STRING          reduce using rule 14 (rule -> expression COLON .)
    TRUE            reduce using rule 14 (rule -> expression COLON .)
    FALSE           reduce using rule 14 (rule -> expression COLON .)
    INT32           reduce using rule 14 (rule -> expression COLON .)
    INT64           reduce using rule 14 (rule -> expression COLON .)
    FLOAT32         reduce using rule 14 (rule -> expression COLON .)
    FLOAT64         reduce using rule 14 (rule -> expression COLON .)
    BYTE            reduce using rule 14 (rule -> expression COLON .)
    WFLOAT          reduce using rule 14 (rule -> expression COLON .)
    WSTRING         reduce using rule 14 (rule -> expression COLON .)
    WINT            reduce using rule 14 (rule -> expression COLON .)
    BOOL            reduce using rule 14 (rule -> expression COLON .)
    DEFAULT         reduce using rule 14 (rule -> expression COLON .)
    CASE            reduce using rule 14 (rule -> expression COLON .)


state 99

    (19) rule -> decVar COLON .

    PRINT           reduce using rule 19 (rule -> decVar COLON .)
    SCAN            reduce using rule 19 (rule -> decVar COLON .)
    FOR             reduce using rule 19 (rule -> decVar COLON .)
    CONST           reduce using rule 19 (rule -> decVar COLON .)
    ID              reduce using rule 19 (rule -> decVar COLON .)
    APPEND          reduce using rule 19 (rule -> decVar COLON .)
    LEN             reduce using rule 19 (rule -> decVar COLON .)
    COPY            reduce using rule 19 (rule -> decVar COLON .)
    DELETE          reduce using rule 19 (rule -> decVar COLON .)
    IF              reduce using rule 19 (rule -> decVar COLON .)
    ELSE            reduce using rule 19 (rule -> decVar COLON .)
    TYPE            reduce using rule 19 (rule -> decVar COLON .)
    SWITCH          reduce using rule 19 (rule -> decVar COLON .)
    VAR             reduce using rule 19 (rule -> decVar COLON .)
    FUNC            reduce using rule 19 (rule -> decVar COLON .)
    INTEGER         reduce using rule 19 (rule -> decVar COLON .)
    FLOAT           reduce using rule 19 (rule -> decVar COLON .)
    NOT             reduce using rule 19 (rule -> decVar COLON .)
    RLLAVE          reduce using rule 19 (rule -> decVar COLON .)
    RETURN          reduce using rule 19 (rule -> decVar COLON .)
    STRING          reduce using rule 19 (rule -> decVar COLON .)
    TRUE            reduce using rule 19 (rule -> decVar COLON .)
    FALSE           reduce using rule 19 (rule -> decVar COLON .)
    INT32           reduce using rule 19 (rule -> decVar COLON .)
    INT64           reduce using rule 19 (rule -> decVar COLON .)
    FLOAT32         reduce using rule 19 (rule -> decVar COLON .)
    FLOAT64         reduce using rule 19 (rule -> decVar COLON .)
    BYTE            reduce using rule 19 (rule -> decVar COLON .)
    WFLOAT          reduce using rule 19 (rule -> decVar COLON .)
    WSTRING         reduce using rule 19 (rule -> decVar COLON .)
    WINT            reduce using rule 19 (rule -> decVar COLON .)
    BOOL            reduce using rule 19 (rule -> decVar COLON .)
    DEFAULT         reduce using rule 19 (rule -> decVar COLON .)
    CASE            reduce using rule 19 (rule -> decVar COLON .)


state 100

    (21) rule -> decConst COLON .

    PRINT           reduce using rule 21 (rule -> decConst COLON .)
    SCAN            reduce using rule 21 (rule -> decConst COLON .)
    FOR             reduce using rule 21 (rule -> decConst COLON .)
    CONST           reduce using rule 21 (rule -> decConst COLON .)
    ID              reduce using rule 21 (rule -> decConst COLON .)
    APPEND          reduce using rule 21 (rule -> decConst COLON .)
    LEN             reduce using rule 21 (rule -> decConst COLON .)
    COPY            reduce using rule 21 (rule -> decConst COLON .)
    DELETE          reduce using rule 21 (rule -> decConst COLON .)
    IF              reduce using rule 21 (rule -> decConst COLON .)
    ELSE            reduce using rule 21 (rule -> decConst COLON .)
    TYPE            reduce using rule 21 (rule -> decConst COLON .)
    SWITCH          reduce using rule 21 (rule -> decConst COLON .)
    VAR             reduce using rule 21 (rule -> decConst COLON .)
    FUNC            reduce using rule 21 (rule -> decConst COLON .)
    INTEGER         reduce using rule 21 (rule -> decConst COLON .)
    FLOAT           reduce using rule 21 (rule -> decConst COLON .)
    NOT             reduce using rule 21 (rule -> decConst COLON .)
    RLLAVE          reduce using rule 21 (rule -> decConst COLON .)
    RETURN          reduce using rule 21 (rule -> decConst COLON .)
    STRING          reduce using rule 21 (rule -> decConst COLON .)
    TRUE            reduce using rule 21 (rule -> decConst COLON .)
    FALSE           reduce using rule 21 (rule -> decConst COLON .)
    INT32           reduce using rule 21 (rule -> decConst COLON .)
    INT64           reduce using rule 21 (rule -> decConst COLON .)
    FLOAT32         reduce using rule 21 (rule -> decConst COLON .)
    FLOAT64         reduce using rule 21 (rule -> decConst COLON .)
    BYTE            reduce using rule 21 (rule -> decConst COLON .)
    WFLOAT          reduce using rule 21 (rule -> decConst COLON .)
    WSTRING         reduce using rule 21 (rule -> decConst COLON .)
    WINT            reduce using rule 21 (rule -> decConst COLON .)
    BOOL            reduce using rule 21 (rule -> decConst COLON .)
    DEFAULT         reduce using rule 21 (rule -> decConst COLON .)
    CASE            reduce using rule 21 (rule -> decConst COLON .)


state 101

    (24) rule -> var_asignation COLON .

    PRINT           reduce using rule 24 (rule -> var_asignation COLON .)
    SCAN            reduce using rule 24 (rule -> var_asignation COLON .)
    FOR             reduce using rule 24 (rule -> var_asignation COLON .)
    CONST           reduce using rule 24 (rule -> var_asignation COLON .)
    ID              reduce using rule 24 (rule -> var_asignation COLON .)
    APPEND          reduce using rule 24 (rule -> var_asignation COLON .)
    LEN             reduce using rule 24 (rule -> var_asignation COLON .)
    COPY            reduce using rule 24 (rule -> var_asignation COLON .)
    DELETE          reduce using rule 24 (rule -> var_asignation COLON .)
    IF              reduce using rule 24 (rule -> var_asignation COLON .)
    ELSE            reduce using rule 24 (rule -> var_asignation COLON .)
    TYPE            reduce using rule 24 (rule -> var_asignation COLON .)
    SWITCH          reduce using rule 24 (rule -> var_asignation COLON .)
    VAR             reduce using rule 24 (rule -> var_asignation COLON .)
    FUNC            reduce using rule 24 (rule -> var_asignation COLON .)
    INTEGER         reduce using rule 24 (rule -> var_asignation COLON .)
    FLOAT           reduce using rule 24 (rule -> var_asignation COLON .)
    NOT             reduce using rule 24 (rule -> var_asignation COLON .)
    RLLAVE          reduce using rule 24 (rule -> var_asignation COLON .)
    RETURN          reduce using rule 24 (rule -> var_asignation COLON .)
    STRING          reduce using rule 24 (rule -> var_asignation COLON .)
    TRUE            reduce using rule 24 (rule -> var_asignation COLON .)
    FALSE           reduce using rule 24 (rule -> var_asignation COLON .)
    INT32           reduce using rule 24 (rule -> var_asignation COLON .)
    INT64           reduce using rule 24 (rule -> var_asignation COLON .)
    FLOAT32         reduce using rule 24 (rule -> var_asignation COLON .)
    FLOAT64         reduce using rule 24 (rule -> var_asignation COLON .)
    BYTE            reduce using rule 24 (rule -> var_asignation COLON .)
    WFLOAT          reduce using rule 24 (rule -> var_asignation COLON .)
    WSTRING         reduce using rule 24 (rule -> var_asignation COLON .)
    WINT            reduce using rule 24 (rule -> var_asignation COLON .)
    BOOL            reduce using rule 24 (rule -> var_asignation COLON .)
    DEFAULT         reduce using rule 24 (rule -> var_asignation COLON .)
    CASE            reduce using rule 24 (rule -> var_asignation COLON .)


state 102

    (26) rule -> funciones COLON .

    PRINT           reduce using rule 26 (rule -> funciones COLON .)
    SCAN            reduce using rule 26 (rule -> funciones COLON .)
    FOR             reduce using rule 26 (rule -> funciones COLON .)
    CONST           reduce using rule 26 (rule -> funciones COLON .)
    ID              reduce using rule 26 (rule -> funciones COLON .)
    APPEND          reduce using rule 26 (rule -> funciones COLON .)
    LEN             reduce using rule 26 (rule -> funciones COLON .)
    COPY            reduce using rule 26 (rule -> funciones COLON .)
    DELETE          reduce using rule 26 (rule -> funciones COLON .)
    IF              reduce using rule 26 (rule -> funciones COLON .)
    ELSE            reduce using rule 26 (rule -> funciones COLON .)
    TYPE            reduce using rule 26 (rule -> funciones COLON .)
    SWITCH          reduce using rule 26 (rule -> funciones COLON .)
    VAR             reduce using rule 26 (rule -> funciones COLON .)
    FUNC            reduce using rule 26 (rule -> funciones COLON .)
    INTEGER         reduce using rule 26 (rule -> funciones COLON .)
    FLOAT           reduce using rule 26 (rule -> funciones COLON .)
    NOT             reduce using rule 26 (rule -> funciones COLON .)
    RLLAVE          reduce using rule 26 (rule -> funciones COLON .)
    RETURN          reduce using rule 26 (rule -> funciones COLON .)
    STRING          reduce using rule 26 (rule -> funciones COLON .)
    TRUE            reduce using rule 26 (rule -> funciones COLON .)
    FALSE           reduce using rule 26 (rule -> funciones COLON .)
    INT32           reduce using rule 26 (rule -> funciones COLON .)
    INT64           reduce using rule 26 (rule -> funciones COLON .)
    FLOAT32         reduce using rule 26 (rule -> funciones COLON .)
    FLOAT64         reduce using rule 26 (rule -> funciones COLON .)
    BYTE            reduce using rule 26 (rule -> funciones COLON .)
    WFLOAT          reduce using rule 26 (rule -> funciones COLON .)
    WSTRING         reduce using rule 26 (rule -> funciones COLON .)
    WINT            reduce using rule 26 (rule -> funciones COLON .)
    BOOL            reduce using rule 26 (rule -> funciones COLON .)
    DEFAULT         reduce using rule 26 (rule -> funciones COLON .)
    CASE            reduce using rule 26 (rule -> funciones COLON .)


state 103

    (33) rule -> array_declaration COLON .

    PRINT           reduce using rule 33 (rule -> array_declaration COLON .)
    SCAN            reduce using rule 33 (rule -> array_declaration COLON .)
    FOR             reduce using rule 33 (rule -> array_declaration COLON .)
    CONST           reduce using rule 33 (rule -> array_declaration COLON .)
    ID              reduce using rule 33 (rule -> array_declaration COLON .)
    APPEND          reduce using rule 33 (rule -> array_declaration COLON .)
    LEN             reduce using rule 33 (rule -> array_declaration COLON .)
    COPY            reduce using rule 33 (rule -> array_declaration COLON .)
    DELETE          reduce using rule 33 (rule -> array_declaration COLON .)
    IF              reduce using rule 33 (rule -> array_declaration COLON .)
    ELSE            reduce using rule 33 (rule -> array_declaration COLON .)
    TYPE            reduce using rule 33 (rule -> array_declaration COLON .)
    SWITCH          reduce using rule 33 (rule -> array_declaration COLON .)
    VAR             reduce using rule 33 (rule -> array_declaration COLON .)
    FUNC            reduce using rule 33 (rule -> array_declaration COLON .)
    INTEGER         reduce using rule 33 (rule -> array_declaration COLON .)
    FLOAT           reduce using rule 33 (rule -> array_declaration COLON .)
    NOT             reduce using rule 33 (rule -> array_declaration COLON .)
    RLLAVE          reduce using rule 33 (rule -> array_declaration COLON .)
    RETURN          reduce using rule 33 (rule -> array_declaration COLON .)
    STRING          reduce using rule 33 (rule -> array_declaration COLON .)
    TRUE            reduce using rule 33 (rule -> array_declaration COLON .)
    FALSE           reduce using rule 33 (rule -> array_declaration COLON .)
    INT32           reduce using rule 33 (rule -> array_declaration COLON .)
    INT64           reduce using rule 33 (rule -> array_declaration COLON .)
    FLOAT32         reduce using rule 33 (rule -> array_declaration COLON .)
    FLOAT64         reduce using rule 33 (rule -> array_declaration COLON .)
    BYTE            reduce using rule 33 (rule -> array_declaration COLON .)
    WFLOAT          reduce using rule 33 (rule -> array_declaration COLON .)
    WSTRING         reduce using rule 33 (rule -> array_declaration COLON .)
    WINT            reduce using rule 33 (rule -> array_declaration COLON .)
    BOOL            reduce using rule 33 (rule -> array_declaration COLON .)
    DEFAULT         reduce using rule 33 (rule -> array_declaration COLON .)
    CASE            reduce using rule 33 (rule -> array_declaration COLON .)


state 104

    (35) rule -> array_var COLON .

    PRINT           reduce using rule 35 (rule -> array_var COLON .)
    SCAN            reduce using rule 35 (rule -> array_var COLON .)
    FOR             reduce using rule 35 (rule -> array_var COLON .)
    CONST           reduce using rule 35 (rule -> array_var COLON .)
    ID              reduce using rule 35 (rule -> array_var COLON .)
    APPEND          reduce using rule 35 (rule -> array_var COLON .)
    LEN             reduce using rule 35 (rule -> array_var COLON .)
    COPY            reduce using rule 35 (rule -> array_var COLON .)
    DELETE          reduce using rule 35 (rule -> array_var COLON .)
    IF              reduce using rule 35 (rule -> array_var COLON .)
    ELSE            reduce using rule 35 (rule -> array_var COLON .)
    TYPE            reduce using rule 35 (rule -> array_var COLON .)
    SWITCH          reduce using rule 35 (rule -> array_var COLON .)
    VAR             reduce using rule 35 (rule -> array_var COLON .)
    FUNC            reduce using rule 35 (rule -> array_var COLON .)
    INTEGER         reduce using rule 35 (rule -> array_var COLON .)
    FLOAT           reduce using rule 35 (rule -> array_var COLON .)
    NOT             reduce using rule 35 (rule -> array_var COLON .)
    RLLAVE          reduce using rule 35 (rule -> array_var COLON .)
    RETURN          reduce using rule 35 (rule -> array_var COLON .)
    STRING          reduce using rule 35 (rule -> array_var COLON .)
    TRUE            reduce using rule 35 (rule -> array_var COLON .)
    FALSE           reduce using rule 35 (rule -> array_var COLON .)
    INT32           reduce using rule 35 (rule -> array_var COLON .)
    INT64           reduce using rule 35 (rule -> array_var COLON .)
    FLOAT32         reduce using rule 35 (rule -> array_var COLON .)
    FLOAT64         reduce using rule 35 (rule -> array_var COLON .)
    BYTE            reduce using rule 35 (rule -> array_var COLON .)
    WFLOAT          reduce using rule 35 (rule -> array_var COLON .)
    WSTRING         reduce using rule 35 (rule -> array_var COLON .)
    WINT            reduce using rule 35 (rule -> array_var COLON .)
    BOOL            reduce using rule 35 (rule -> array_var COLON .)
    DEFAULT         reduce using rule 35 (rule -> array_var COLON .)
    CASE            reduce using rule 35 (rule -> array_var COLON .)


state 105

    (247) array_assignment -> array_var EQUAL . something
    (83) something -> . ID
    (84) something -> . data_structure
    (85) something -> . values
    (86) something -> . operations
    (87) something -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (51) values -> . STRING
    (52) values -> . INTEGER
    (53) values -> . FLOAT
    (54) values -> . TRUE
    (55) values -> . FALSE
    (65) operations -> . expression
    (66) operations -> . comparison
    (67) operations -> . logic_operation
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID

    ID              shift and go to state 169
    STRING          shift and go to state 174
    INTEGER         shift and go to state 175
    FLOAT           shift and go to state 176
    TRUE            shift and go to state 177
    FALSE           shift and go to state 178
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    NOT             shift and go to state 87

    array_var                      shift and go to state 134
    something                      shift and go to state 168
    data_structure                 shift and go to state 170
    values                         shift and go to state 171
    operations                     shift and go to state 172
    funciones                      shift and go to state 173
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    expression                     shift and go to state 179
    comparison                     shift and go to state 180
    logic_operation                shift and go to state 181
    call_func                      shift and go to state 78
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68

state 106

    (37) rule -> array_assignment COLON .

    PRINT           reduce using rule 37 (rule -> array_assignment COLON .)
    SCAN            reduce using rule 37 (rule -> array_assignment COLON .)
    FOR             reduce using rule 37 (rule -> array_assignment COLON .)
    CONST           reduce using rule 37 (rule -> array_assignment COLON .)
    ID              reduce using rule 37 (rule -> array_assignment COLON .)
    APPEND          reduce using rule 37 (rule -> array_assignment COLON .)
    LEN             reduce using rule 37 (rule -> array_assignment COLON .)
    COPY            reduce using rule 37 (rule -> array_assignment COLON .)
    DELETE          reduce using rule 37 (rule -> array_assignment COLON .)
    IF              reduce using rule 37 (rule -> array_assignment COLON .)
    ELSE            reduce using rule 37 (rule -> array_assignment COLON .)
    TYPE            reduce using rule 37 (rule -> array_assignment COLON .)
    SWITCH          reduce using rule 37 (rule -> array_assignment COLON .)
    VAR             reduce using rule 37 (rule -> array_assignment COLON .)
    FUNC            reduce using rule 37 (rule -> array_assignment COLON .)
    INTEGER         reduce using rule 37 (rule -> array_assignment COLON .)
    FLOAT           reduce using rule 37 (rule -> array_assignment COLON .)
    NOT             reduce using rule 37 (rule -> array_assignment COLON .)
    RLLAVE          reduce using rule 37 (rule -> array_assignment COLON .)
    RETURN          reduce using rule 37 (rule -> array_assignment COLON .)
    STRING          reduce using rule 37 (rule -> array_assignment COLON .)
    TRUE            reduce using rule 37 (rule -> array_assignment COLON .)
    FALSE           reduce using rule 37 (rule -> array_assignment COLON .)
    INT32           reduce using rule 37 (rule -> array_assignment COLON .)
    INT64           reduce using rule 37 (rule -> array_assignment COLON .)
    FLOAT32         reduce using rule 37 (rule -> array_assignment COLON .)
    FLOAT64         reduce using rule 37 (rule -> array_assignment COLON .)
    BYTE            reduce using rule 37 (rule -> array_assignment COLON .)
    WFLOAT          reduce using rule 37 (rule -> array_assignment COLON .)
    WSTRING         reduce using rule 37 (rule -> array_assignment COLON .)
    WINT            reduce using rule 37 (rule -> array_assignment COLON .)
    BOOL            reduce using rule 37 (rule -> array_assignment COLON .)
    DEFAULT         reduce using rule 37 (rule -> array_assignment COLON .)
    CASE            reduce using rule 37 (rule -> array_assignment COLON .)


state 107

    (39) rule -> slice_declaration COLON .

    PRINT           reduce using rule 39 (rule -> slice_declaration COLON .)
    SCAN            reduce using rule 39 (rule -> slice_declaration COLON .)
    FOR             reduce using rule 39 (rule -> slice_declaration COLON .)
    CONST           reduce using rule 39 (rule -> slice_declaration COLON .)
    ID              reduce using rule 39 (rule -> slice_declaration COLON .)
    APPEND          reduce using rule 39 (rule -> slice_declaration COLON .)
    LEN             reduce using rule 39 (rule -> slice_declaration COLON .)
    COPY            reduce using rule 39 (rule -> slice_declaration COLON .)
    DELETE          reduce using rule 39 (rule -> slice_declaration COLON .)
    IF              reduce using rule 39 (rule -> slice_declaration COLON .)
    ELSE            reduce using rule 39 (rule -> slice_declaration COLON .)
    TYPE            reduce using rule 39 (rule -> slice_declaration COLON .)
    SWITCH          reduce using rule 39 (rule -> slice_declaration COLON .)
    VAR             reduce using rule 39 (rule -> slice_declaration COLON .)
    FUNC            reduce using rule 39 (rule -> slice_declaration COLON .)
    INTEGER         reduce using rule 39 (rule -> slice_declaration COLON .)
    FLOAT           reduce using rule 39 (rule -> slice_declaration COLON .)
    NOT             reduce using rule 39 (rule -> slice_declaration COLON .)
    RLLAVE          reduce using rule 39 (rule -> slice_declaration COLON .)
    RETURN          reduce using rule 39 (rule -> slice_declaration COLON .)
    STRING          reduce using rule 39 (rule -> slice_declaration COLON .)
    TRUE            reduce using rule 39 (rule -> slice_declaration COLON .)
    FALSE           reduce using rule 39 (rule -> slice_declaration COLON .)
    INT32           reduce using rule 39 (rule -> slice_declaration COLON .)
    INT64           reduce using rule 39 (rule -> slice_declaration COLON .)
    FLOAT32         reduce using rule 39 (rule -> slice_declaration COLON .)
    FLOAT64         reduce using rule 39 (rule -> slice_declaration COLON .)
    BYTE            reduce using rule 39 (rule -> slice_declaration COLON .)
    WFLOAT          reduce using rule 39 (rule -> slice_declaration COLON .)
    WSTRING         reduce using rule 39 (rule -> slice_declaration COLON .)
    WINT            reduce using rule 39 (rule -> slice_declaration COLON .)
    BOOL            reduce using rule 39 (rule -> slice_declaration COLON .)
    DEFAULT         reduce using rule 39 (rule -> slice_declaration COLON .)
    CASE            reduce using rule 39 (rule -> slice_declaration COLON .)


state 108

    (41) rule -> slice_var COLON .

    PRINT           reduce using rule 41 (rule -> slice_var COLON .)
    SCAN            reduce using rule 41 (rule -> slice_var COLON .)
    FOR             reduce using rule 41 (rule -> slice_var COLON .)
    CONST           reduce using rule 41 (rule -> slice_var COLON .)
    ID              reduce using rule 41 (rule -> slice_var COLON .)
    APPEND          reduce using rule 41 (rule -> slice_var COLON .)
    LEN             reduce using rule 41 (rule -> slice_var COLON .)
    COPY            reduce using rule 41 (rule -> slice_var COLON .)
    DELETE          reduce using rule 41 (rule -> slice_var COLON .)
    IF              reduce using rule 41 (rule -> slice_var COLON .)
    ELSE            reduce using rule 41 (rule -> slice_var COLON .)
    TYPE            reduce using rule 41 (rule -> slice_var COLON .)
    SWITCH          reduce using rule 41 (rule -> slice_var COLON .)
    VAR             reduce using rule 41 (rule -> slice_var COLON .)
    FUNC            reduce using rule 41 (rule -> slice_var COLON .)
    INTEGER         reduce using rule 41 (rule -> slice_var COLON .)
    FLOAT           reduce using rule 41 (rule -> slice_var COLON .)
    NOT             reduce using rule 41 (rule -> slice_var COLON .)
    RLLAVE          reduce using rule 41 (rule -> slice_var COLON .)
    RETURN          reduce using rule 41 (rule -> slice_var COLON .)
    STRING          reduce using rule 41 (rule -> slice_var COLON .)
    TRUE            reduce using rule 41 (rule -> slice_var COLON .)
    FALSE           reduce using rule 41 (rule -> slice_var COLON .)
    INT32           reduce using rule 41 (rule -> slice_var COLON .)
    INT64           reduce using rule 41 (rule -> slice_var COLON .)
    FLOAT32         reduce using rule 41 (rule -> slice_var COLON .)
    FLOAT64         reduce using rule 41 (rule -> slice_var COLON .)
    BYTE            reduce using rule 41 (rule -> slice_var COLON .)
    WFLOAT          reduce using rule 41 (rule -> slice_var COLON .)
    WSTRING         reduce using rule 41 (rule -> slice_var COLON .)
    WINT            reduce using rule 41 (rule -> slice_var COLON .)
    BOOL            reduce using rule 41 (rule -> slice_var COLON .)
    DEFAULT         reduce using rule 41 (rule -> slice_var COLON .)
    CASE            reduce using rule 41 (rule -> slice_var COLON .)


state 109

    (161) slice_assignment -> slice_var EQUAL . something_s
    (162) something_s -> . ID
    (163) something_s -> . array_var
    (164) something_s -> . values
    (165) something_s -> . operations
    (243) array_var -> . ID LCORCHE index RCORCHE
    (51) values -> . STRING
    (52) values -> . INTEGER
    (53) values -> . FLOAT
    (54) values -> . TRUE
    (55) values -> . FALSE
    (65) operations -> . expression
    (66) operations -> . comparison
    (67) operations -> . logic_operation
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    ID              shift and go to state 183
    STRING          shift and go to state 174
    INTEGER         shift and go to state 175
    FLOAT           shift and go to state 176
    TRUE            shift and go to state 177
    FALSE           shift and go to state 178
    NOT             shift and go to state 87
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    slice_var                      shift and go to state 136
    something_s                    shift and go to state 182
    array_var                      shift and go to state 184
    values                         shift and go to state 185
    operations                     shift and go to state 186
    expression                     shift and go to state 179
    comparison                     shift and go to state 180
    logic_operation                shift and go to state 181
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    map_var                        shift and go to state 135
    call_func                      shift and go to state 78

state 110

    (43) rule -> slice_assignment COLON .

    PRINT           reduce using rule 43 (rule -> slice_assignment COLON .)
    SCAN            reduce using rule 43 (rule -> slice_assignment COLON .)
    FOR             reduce using rule 43 (rule -> slice_assignment COLON .)
    CONST           reduce using rule 43 (rule -> slice_assignment COLON .)
    ID              reduce using rule 43 (rule -> slice_assignment COLON .)
    APPEND          reduce using rule 43 (rule -> slice_assignment COLON .)
    LEN             reduce using rule 43 (rule -> slice_assignment COLON .)
    COPY            reduce using rule 43 (rule -> slice_assignment COLON .)
    DELETE          reduce using rule 43 (rule -> slice_assignment COLON .)
    IF              reduce using rule 43 (rule -> slice_assignment COLON .)
    ELSE            reduce using rule 43 (rule -> slice_assignment COLON .)
    TYPE            reduce using rule 43 (rule -> slice_assignment COLON .)
    SWITCH          reduce using rule 43 (rule -> slice_assignment COLON .)
    VAR             reduce using rule 43 (rule -> slice_assignment COLON .)
    FUNC            reduce using rule 43 (rule -> slice_assignment COLON .)
    INTEGER         reduce using rule 43 (rule -> slice_assignment COLON .)
    FLOAT           reduce using rule 43 (rule -> slice_assignment COLON .)
    NOT             reduce using rule 43 (rule -> slice_assignment COLON .)
    RLLAVE          reduce using rule 43 (rule -> slice_assignment COLON .)
    RETURN          reduce using rule 43 (rule -> slice_assignment COLON .)
    STRING          reduce using rule 43 (rule -> slice_assignment COLON .)
    TRUE            reduce using rule 43 (rule -> slice_assignment COLON .)
    FALSE           reduce using rule 43 (rule -> slice_assignment COLON .)
    INT32           reduce using rule 43 (rule -> slice_assignment COLON .)
    INT64           reduce using rule 43 (rule -> slice_assignment COLON .)
    FLOAT32         reduce using rule 43 (rule -> slice_assignment COLON .)
    FLOAT64         reduce using rule 43 (rule -> slice_assignment COLON .)
    BYTE            reduce using rule 43 (rule -> slice_assignment COLON .)
    WFLOAT          reduce using rule 43 (rule -> slice_assignment COLON .)
    WSTRING         reduce using rule 43 (rule -> slice_assignment COLON .)
    WINT            reduce using rule 43 (rule -> slice_assignment COLON .)
    BOOL            reduce using rule 43 (rule -> slice_assignment COLON .)
    DEFAULT         reduce using rule 43 (rule -> slice_assignment COLON .)
    CASE            reduce using rule 43 (rule -> slice_assignment COLON .)


state 111

    (45) rule -> map_declaration COLON .

    PRINT           reduce using rule 45 (rule -> map_declaration COLON .)
    SCAN            reduce using rule 45 (rule -> map_declaration COLON .)
    FOR             reduce using rule 45 (rule -> map_declaration COLON .)
    CONST           reduce using rule 45 (rule -> map_declaration COLON .)
    ID              reduce using rule 45 (rule -> map_declaration COLON .)
    APPEND          reduce using rule 45 (rule -> map_declaration COLON .)
    LEN             reduce using rule 45 (rule -> map_declaration COLON .)
    COPY            reduce using rule 45 (rule -> map_declaration COLON .)
    DELETE          reduce using rule 45 (rule -> map_declaration COLON .)
    IF              reduce using rule 45 (rule -> map_declaration COLON .)
    ELSE            reduce using rule 45 (rule -> map_declaration COLON .)
    TYPE            reduce using rule 45 (rule -> map_declaration COLON .)
    SWITCH          reduce using rule 45 (rule -> map_declaration COLON .)
    VAR             reduce using rule 45 (rule -> map_declaration COLON .)
    FUNC            reduce using rule 45 (rule -> map_declaration COLON .)
    INTEGER         reduce using rule 45 (rule -> map_declaration COLON .)
    FLOAT           reduce using rule 45 (rule -> map_declaration COLON .)
    NOT             reduce using rule 45 (rule -> map_declaration COLON .)
    RLLAVE          reduce using rule 45 (rule -> map_declaration COLON .)
    RETURN          reduce using rule 45 (rule -> map_declaration COLON .)
    STRING          reduce using rule 45 (rule -> map_declaration COLON .)
    TRUE            reduce using rule 45 (rule -> map_declaration COLON .)
    FALSE           reduce using rule 45 (rule -> map_declaration COLON .)
    INT32           reduce using rule 45 (rule -> map_declaration COLON .)
    INT64           reduce using rule 45 (rule -> map_declaration COLON .)
    FLOAT32         reduce using rule 45 (rule -> map_declaration COLON .)
    FLOAT64         reduce using rule 45 (rule -> map_declaration COLON .)
    BYTE            reduce using rule 45 (rule -> map_declaration COLON .)
    WFLOAT          reduce using rule 45 (rule -> map_declaration COLON .)
    WSTRING         reduce using rule 45 (rule -> map_declaration COLON .)
    WINT            reduce using rule 45 (rule -> map_declaration COLON .)
    BOOL            reduce using rule 45 (rule -> map_declaration COLON .)
    DEFAULT         reduce using rule 45 (rule -> map_declaration COLON .)
    CASE            reduce using rule 45 (rule -> map_declaration COLON .)


state 112

    (47) rule -> map_assignment COLON .

    PRINT           reduce using rule 47 (rule -> map_assignment COLON .)
    SCAN            reduce using rule 47 (rule -> map_assignment COLON .)
    FOR             reduce using rule 47 (rule -> map_assignment COLON .)
    CONST           reduce using rule 47 (rule -> map_assignment COLON .)
    ID              reduce using rule 47 (rule -> map_assignment COLON .)
    APPEND          reduce using rule 47 (rule -> map_assignment COLON .)
    LEN             reduce using rule 47 (rule -> map_assignment COLON .)
    COPY            reduce using rule 47 (rule -> map_assignment COLON .)
    DELETE          reduce using rule 47 (rule -> map_assignment COLON .)
    IF              reduce using rule 47 (rule -> map_assignment COLON .)
    ELSE            reduce using rule 47 (rule -> map_assignment COLON .)
    TYPE            reduce using rule 47 (rule -> map_assignment COLON .)
    SWITCH          reduce using rule 47 (rule -> map_assignment COLON .)
    VAR             reduce using rule 47 (rule -> map_assignment COLON .)
    FUNC            reduce using rule 47 (rule -> map_assignment COLON .)
    INTEGER         reduce using rule 47 (rule -> map_assignment COLON .)
    FLOAT           reduce using rule 47 (rule -> map_assignment COLON .)
    NOT             reduce using rule 47 (rule -> map_assignment COLON .)
    RLLAVE          reduce using rule 47 (rule -> map_assignment COLON .)
    RETURN          reduce using rule 47 (rule -> map_assignment COLON .)
    STRING          reduce using rule 47 (rule -> map_assignment COLON .)
    TRUE            reduce using rule 47 (rule -> map_assignment COLON .)
    FALSE           reduce using rule 47 (rule -> map_assignment COLON .)
    INT32           reduce using rule 47 (rule -> map_assignment COLON .)
    INT64           reduce using rule 47 (rule -> map_assignment COLON .)
    FLOAT32         reduce using rule 47 (rule -> map_assignment COLON .)
    FLOAT64         reduce using rule 47 (rule -> map_assignment COLON .)
    BYTE            reduce using rule 47 (rule -> map_assignment COLON .)
    WFLOAT          reduce using rule 47 (rule -> map_assignment COLON .)
    WSTRING         reduce using rule 47 (rule -> map_assignment COLON .)
    WINT            reduce using rule 47 (rule -> map_assignment COLON .)
    BOOL            reduce using rule 47 (rule -> map_assignment COLON .)
    DEFAULT         reduce using rule 47 (rule -> map_assignment COLON .)
    CASE            reduce using rule 47 (rule -> map_assignment COLON .)


state 113

    (173) impresion -> PRINT LPAREN . something RPAREN
    (174) impresion -> PRINT LPAREN . error RPAREN
    (83) something -> . ID
    (84) something -> . data_structure
    (85) something -> . values
    (86) something -> . operations
    (87) something -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (51) values -> . STRING
    (52) values -> . INTEGER
    (53) values -> . FLOAT
    (54) values -> . TRUE
    (55) values -> . FALSE
    (65) operations -> . expression
    (66) operations -> . comparison
    (67) operations -> . logic_operation
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID

    error           shift and go to state 188
    ID              shift and go to state 169
    STRING          shift and go to state 174
    INTEGER         shift and go to state 175
    FLOAT           shift and go to state 176
    TRUE            shift and go to state 177
    FALSE           shift and go to state 178
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    NOT             shift and go to state 87

    something                      shift and go to state 187
    data_structure                 shift and go to state 170
    values                         shift and go to state 171
    operations                     shift and go to state 172
    funciones                      shift and go to state 173
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    expression                     shift and go to state 179
    comparison                     shift and go to state 180
    logic_operation                shift and go to state 181
    call_func                      shift and go to state 78
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68

state 114

    (201) scan_func -> SCAN LPAREN . POINTER RPAREN

    POINTER         shift and go to state 189


state 115

    (176) expression -> something_ex adicionaEx .

    COLON           reduce using rule 176 (expression -> something_ex adicionaEx .)
    PRINT           reduce using rule 176 (expression -> something_ex adicionaEx .)
    SCAN            reduce using rule 176 (expression -> something_ex adicionaEx .)
    FOR             reduce using rule 176 (expression -> something_ex adicionaEx .)
    CONST           reduce using rule 176 (expression -> something_ex adicionaEx .)
    ID              reduce using rule 176 (expression -> something_ex adicionaEx .)
    APPEND          reduce using rule 176 (expression -> something_ex adicionaEx .)
    LEN             reduce using rule 176 (expression -> something_ex adicionaEx .)
    COPY            reduce using rule 176 (expression -> something_ex adicionaEx .)
    DELETE          reduce using rule 176 (expression -> something_ex adicionaEx .)
    IF              reduce using rule 176 (expression -> something_ex adicionaEx .)
    ELSE            reduce using rule 176 (expression -> something_ex adicionaEx .)
    TYPE            reduce using rule 176 (expression -> something_ex adicionaEx .)
    SWITCH          reduce using rule 176 (expression -> something_ex adicionaEx .)
    VAR             reduce using rule 176 (expression -> something_ex adicionaEx .)
    FUNC            reduce using rule 176 (expression -> something_ex adicionaEx .)
    INTEGER         reduce using rule 176 (expression -> something_ex adicionaEx .)
    FLOAT           reduce using rule 176 (expression -> something_ex adicionaEx .)
    NOT             reduce using rule 176 (expression -> something_ex adicionaEx .)
    RLLAVE          reduce using rule 176 (expression -> something_ex adicionaEx .)
    GREATER         reduce using rule 176 (expression -> something_ex adicionaEx .)
    SMALLER         reduce using rule 176 (expression -> something_ex adicionaEx .)
    GREATER_OR_EQUAL reduce using rule 176 (expression -> something_ex adicionaEx .)
    SMALLER_OR_EQUAL reduce using rule 176 (expression -> something_ex adicionaEx .)
    EQUAL_COMPARE   reduce using rule 176 (expression -> something_ex adicionaEx .)
    NOT_EQUAL       reduce using rule 176 (expression -> something_ex adicionaEx .)
    PLUS            reduce using rule 176 (expression -> something_ex adicionaEx .)
    TIMES           reduce using rule 176 (expression -> something_ex adicionaEx .)
    DIVIDE          reduce using rule 176 (expression -> something_ex adicionaEx .)
    MINUS           reduce using rule 176 (expression -> something_ex adicionaEx .)
    MOD             reduce using rule 176 (expression -> something_ex adicionaEx .)
    RETURN          reduce using rule 176 (expression -> something_ex adicionaEx .)
    STRING          reduce using rule 176 (expression -> something_ex adicionaEx .)
    TRUE            reduce using rule 176 (expression -> something_ex adicionaEx .)
    FALSE           reduce using rule 176 (expression -> something_ex adicionaEx .)
    INT32           reduce using rule 176 (expression -> something_ex adicionaEx .)
    INT64           reduce using rule 176 (expression -> something_ex adicionaEx .)
    FLOAT32         reduce using rule 176 (expression -> something_ex adicionaEx .)
    FLOAT64         reduce using rule 176 (expression -> something_ex adicionaEx .)
    BYTE            reduce using rule 176 (expression -> something_ex adicionaEx .)
    WFLOAT          reduce using rule 176 (expression -> something_ex adicionaEx .)
    WSTRING         reduce using rule 176 (expression -> something_ex adicionaEx .)
    WINT            reduce using rule 176 (expression -> something_ex adicionaEx .)
    BOOL            reduce using rule 176 (expression -> something_ex adicionaEx .)
    DEFAULT         reduce using rule 176 (expression -> something_ex adicionaEx .)
    CASE            reduce using rule 176 (expression -> something_ex adicionaEx .)
    RPAREN          reduce using rule 176 (expression -> something_ex adicionaEx .)
    AND             reduce using rule 176 (expression -> something_ex adicionaEx .)
    OR              reduce using rule 176 (expression -> something_ex adicionaEx .)
    LLLAVE          reduce using rule 176 (expression -> something_ex adicionaEx .)
    RCORCHE         reduce using rule 176 (expression -> something_ex adicionaEx .)
    COMA            reduce using rule 176 (expression -> something_ex adicionaEx .)


state 116

    (177) adicionaEx -> op . something_ex
    (178) adicionaEx -> op . something_ex adicionaEx
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    ID              shift and go to state 191
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    something_ex                   shift and go to state 190
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 117

    (141) op -> GREATER .

    ID              reduce using rule 141 (op -> GREATER .)
    INTEGER         reduce using rule 141 (op -> GREATER .)
    FLOAT           reduce using rule 141 (op -> GREATER .)
    APPEND          reduce using rule 141 (op -> GREATER .)
    LEN             reduce using rule 141 (op -> GREATER .)
    COPY            reduce using rule 141 (op -> GREATER .)
    DELETE          reduce using rule 141 (op -> GREATER .)


state 118

    (142) op -> SMALLER .

    ID              reduce using rule 142 (op -> SMALLER .)
    INTEGER         reduce using rule 142 (op -> SMALLER .)
    FLOAT           reduce using rule 142 (op -> SMALLER .)
    APPEND          reduce using rule 142 (op -> SMALLER .)
    LEN             reduce using rule 142 (op -> SMALLER .)
    COPY            reduce using rule 142 (op -> SMALLER .)
    DELETE          reduce using rule 142 (op -> SMALLER .)


state 119

    (143) op -> GREATER_OR_EQUAL .

    ID              reduce using rule 143 (op -> GREATER_OR_EQUAL .)
    INTEGER         reduce using rule 143 (op -> GREATER_OR_EQUAL .)
    FLOAT           reduce using rule 143 (op -> GREATER_OR_EQUAL .)
    APPEND          reduce using rule 143 (op -> GREATER_OR_EQUAL .)
    LEN             reduce using rule 143 (op -> GREATER_OR_EQUAL .)
    COPY            reduce using rule 143 (op -> GREATER_OR_EQUAL .)
    DELETE          reduce using rule 143 (op -> GREATER_OR_EQUAL .)


state 120

    (144) op -> SMALLER_OR_EQUAL .

    ID              reduce using rule 144 (op -> SMALLER_OR_EQUAL .)
    INTEGER         reduce using rule 144 (op -> SMALLER_OR_EQUAL .)
    FLOAT           reduce using rule 144 (op -> SMALLER_OR_EQUAL .)
    APPEND          reduce using rule 144 (op -> SMALLER_OR_EQUAL .)
    LEN             reduce using rule 144 (op -> SMALLER_OR_EQUAL .)
    COPY            reduce using rule 144 (op -> SMALLER_OR_EQUAL .)
    DELETE          reduce using rule 144 (op -> SMALLER_OR_EQUAL .)


state 121

    (145) op -> EQUAL_COMPARE .

    ID              reduce using rule 145 (op -> EQUAL_COMPARE .)
    INTEGER         reduce using rule 145 (op -> EQUAL_COMPARE .)
    FLOAT           reduce using rule 145 (op -> EQUAL_COMPARE .)
    APPEND          reduce using rule 145 (op -> EQUAL_COMPARE .)
    LEN             reduce using rule 145 (op -> EQUAL_COMPARE .)
    COPY            reduce using rule 145 (op -> EQUAL_COMPARE .)
    DELETE          reduce using rule 145 (op -> EQUAL_COMPARE .)


state 122

    (146) op -> NOT_EQUAL .

    ID              reduce using rule 146 (op -> NOT_EQUAL .)
    INTEGER         reduce using rule 146 (op -> NOT_EQUAL .)
    FLOAT           reduce using rule 146 (op -> NOT_EQUAL .)
    APPEND          reduce using rule 146 (op -> NOT_EQUAL .)
    LEN             reduce using rule 146 (op -> NOT_EQUAL .)
    COPY            reduce using rule 146 (op -> NOT_EQUAL .)
    DELETE          reduce using rule 146 (op -> NOT_EQUAL .)


state 123

    (184) op -> PLUS .

    ID              reduce using rule 184 (op -> PLUS .)
    INTEGER         reduce using rule 184 (op -> PLUS .)
    FLOAT           reduce using rule 184 (op -> PLUS .)
    APPEND          reduce using rule 184 (op -> PLUS .)
    LEN             reduce using rule 184 (op -> PLUS .)
    COPY            reduce using rule 184 (op -> PLUS .)
    DELETE          reduce using rule 184 (op -> PLUS .)


state 124

    (185) op -> TIMES .

    ID              reduce using rule 185 (op -> TIMES .)
    INTEGER         reduce using rule 185 (op -> TIMES .)
    FLOAT           reduce using rule 185 (op -> TIMES .)
    APPEND          reduce using rule 185 (op -> TIMES .)
    LEN             reduce using rule 185 (op -> TIMES .)
    COPY            reduce using rule 185 (op -> TIMES .)
    DELETE          reduce using rule 185 (op -> TIMES .)


state 125

    (186) op -> DIVIDE .

    ID              reduce using rule 186 (op -> DIVIDE .)
    INTEGER         reduce using rule 186 (op -> DIVIDE .)
    FLOAT           reduce using rule 186 (op -> DIVIDE .)
    APPEND          reduce using rule 186 (op -> DIVIDE .)
    LEN             reduce using rule 186 (op -> DIVIDE .)
    COPY            reduce using rule 186 (op -> DIVIDE .)
    DELETE          reduce using rule 186 (op -> DIVIDE .)


state 126

    (187) op -> MINUS .

    ID              reduce using rule 187 (op -> MINUS .)
    INTEGER         reduce using rule 187 (op -> MINUS .)
    FLOAT           reduce using rule 187 (op -> MINUS .)
    APPEND          reduce using rule 187 (op -> MINUS .)
    LEN             reduce using rule 187 (op -> MINUS .)
    COPY            reduce using rule 187 (op -> MINUS .)
    DELETE          reduce using rule 187 (op -> MINUS .)


state 127

    (188) op -> MOD .

    ID              reduce using rule 188 (op -> MOD .)
    INTEGER         reduce using rule 188 (op -> MOD .)
    FLOAT           reduce using rule 188 (op -> MOD .)
    APPEND          reduce using rule 188 (op -> MOD .)
    LEN             reduce using rule 188 (op -> MOD .)
    COPY            reduce using rule 188 (op -> MOD .)
    DELETE          reduce using rule 188 (op -> MOD .)


state 128

    (166) cicloFor -> FOR comparison . LLLAVE codigo RLLAVE
    (194) logic_value -> comparison .

    LLLAVE          shift and go to state 192
    AND             reduce using rule 194 (logic_value -> comparison .)
    OR              reduce using rule 194 (logic_value -> comparison .)


state 129

    (167) cicloFor -> FOR logic_operation . LLLAVE codigo RLLAVE

    LLLAVE          shift and go to state 193


state 130

    (168) cicloFor -> FOR decVarOne . COLON comparison COLON incre LLLAVE codigo RLLAVE

    COLON           shift and go to state 194


state 131

    (171) decVarOne -> ID . DEQUAL ID
    (172) decVarOne -> ID . DEQUAL INTEGER
    (139) value -> ID .
    (195) logic_value -> ID .
    (179) something_ex -> ID .
    (243) array_var -> ID . LCORCHE index RCORCHE
    (249) map_var -> ID . LCORCHE key RCORCHE
    (157) slice_var -> ID . LCORCHE index_s RCORCHE
    (202) call_func -> ID . LPAREN list_params RPAREN
    (203) call_func -> ID . LPAREN RPAREN

  ! reduce/reduce conflict for GREATER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for GREATER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for EQUAL_COMPARE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MOD resolved using rule 139 (value -> ID .)
    DEQUAL          shift and go to state 195
    GREATER         reduce using rule 139 (value -> ID .)
    SMALLER         reduce using rule 139 (value -> ID .)
    GREATER_OR_EQUAL reduce using rule 139 (value -> ID .)
    SMALLER_OR_EQUAL reduce using rule 139 (value -> ID .)
    EQUAL_COMPARE   reduce using rule 139 (value -> ID .)
    NOT_EQUAL       reduce using rule 139 (value -> ID .)
    PLUS            reduce using rule 139 (value -> ID .)
    TIMES           reduce using rule 139 (value -> ID .)
    DIVIDE          reduce using rule 139 (value -> ID .)
    MINUS           reduce using rule 139 (value -> ID .)
    MOD             reduce using rule 139 (value -> ID .)
    AND             reduce using rule 195 (logic_value -> ID .)
    OR              reduce using rule 195 (logic_value -> ID .)
    LCORCHE         shift and go to state 196
    LPAREN          shift and go to state 146

  ! GREATER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! GREATER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! EQUAL_COMPARE   [ reduce using rule 179 (something_ex -> ID .) ]
  ! NOT_EQUAL       [ reduce using rule 179 (something_ex -> ID .) ]
  ! PLUS            [ reduce using rule 179 (something_ex -> ID .) ]
  ! TIMES           [ reduce using rule 179 (something_ex -> ID .) ]
  ! DIVIDE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! MINUS           [ reduce using rule 179 (something_ex -> ID .) ]
  ! MOD             [ reduce using rule 179 (something_ex -> ID .) ]


state 132

    (140) value -> expression .

    GREATER         reduce using rule 140 (value -> expression .)
    SMALLER         reduce using rule 140 (value -> expression .)
    GREATER_OR_EQUAL reduce using rule 140 (value -> expression .)
    SMALLER_OR_EQUAL reduce using rule 140 (value -> expression .)
    EQUAL_COMPARE   reduce using rule 140 (value -> expression .)
    NOT_EQUAL       reduce using rule 140 (value -> expression .)
    PLUS            reduce using rule 140 (value -> expression .)
    TIMES           reduce using rule 140 (value -> expression .)
    DIVIDE          reduce using rule 140 (value -> expression .)
    MINUS           reduce using rule 140 (value -> expression .)
    MOD             reduce using rule 140 (value -> expression .)
    PRINT           reduce using rule 140 (value -> expression .)
    SCAN            reduce using rule 140 (value -> expression .)
    FOR             reduce using rule 140 (value -> expression .)
    CONST           reduce using rule 140 (value -> expression .)
    ID              reduce using rule 140 (value -> expression .)
    APPEND          reduce using rule 140 (value -> expression .)
    LEN             reduce using rule 140 (value -> expression .)
    COPY            reduce using rule 140 (value -> expression .)
    DELETE          reduce using rule 140 (value -> expression .)
    IF              reduce using rule 140 (value -> expression .)
    ELSE            reduce using rule 140 (value -> expression .)
    TYPE            reduce using rule 140 (value -> expression .)
    SWITCH          reduce using rule 140 (value -> expression .)
    VAR             reduce using rule 140 (value -> expression .)
    FUNC            reduce using rule 140 (value -> expression .)
    INTEGER         reduce using rule 140 (value -> expression .)
    FLOAT           reduce using rule 140 (value -> expression .)
    NOT             reduce using rule 140 (value -> expression .)
    RLLAVE          reduce using rule 140 (value -> expression .)
    AND             reduce using rule 140 (value -> expression .)
    OR              reduce using rule 140 (value -> expression .)
    RETURN          reduce using rule 140 (value -> expression .)
    STRING          reduce using rule 140 (value -> expression .)
    TRUE            reduce using rule 140 (value -> expression .)
    FALSE           reduce using rule 140 (value -> expression .)
    INT32           reduce using rule 140 (value -> expression .)
    INT64           reduce using rule 140 (value -> expression .)
    FLOAT32         reduce using rule 140 (value -> expression .)
    FLOAT64         reduce using rule 140 (value -> expression .)
    BYTE            reduce using rule 140 (value -> expression .)
    WFLOAT          reduce using rule 140 (value -> expression .)
    WSTRING         reduce using rule 140 (value -> expression .)
    WINT            reduce using rule 140 (value -> expression .)
    BOOL            reduce using rule 140 (value -> expression .)
    DEFAULT         reduce using rule 140 (value -> expression .)
    CASE            reduce using rule 140 (value -> expression .)
    LLLAVE          reduce using rule 140 (value -> expression .)
    COLON           reduce using rule 140 (value -> expression .)
    RPAREN          reduce using rule 140 (value -> expression .)
    RCORCHE         reduce using rule 140 (value -> expression .)
    COMA            reduce using rule 140 (value -> expression .)


state 133

    (183) something_ex -> funciones .

    GREATER         reduce using rule 183 (something_ex -> funciones .)
    SMALLER         reduce using rule 183 (something_ex -> funciones .)
    GREATER_OR_EQUAL reduce using rule 183 (something_ex -> funciones .)
    SMALLER_OR_EQUAL reduce using rule 183 (something_ex -> funciones .)
    EQUAL_COMPARE   reduce using rule 183 (something_ex -> funciones .)
    NOT_EQUAL       reduce using rule 183 (something_ex -> funciones .)
    PLUS            reduce using rule 183 (something_ex -> funciones .)
    TIMES           reduce using rule 183 (something_ex -> funciones .)
    DIVIDE          reduce using rule 183 (something_ex -> funciones .)
    MINUS           reduce using rule 183 (something_ex -> funciones .)
    MOD             reduce using rule 183 (something_ex -> funciones .)
    COLON           reduce using rule 183 (something_ex -> funciones .)
    PRINT           reduce using rule 183 (something_ex -> funciones .)
    SCAN            reduce using rule 183 (something_ex -> funciones .)
    FOR             reduce using rule 183 (something_ex -> funciones .)
    CONST           reduce using rule 183 (something_ex -> funciones .)
    ID              reduce using rule 183 (something_ex -> funciones .)
    APPEND          reduce using rule 183 (something_ex -> funciones .)
    LEN             reduce using rule 183 (something_ex -> funciones .)
    COPY            reduce using rule 183 (something_ex -> funciones .)
    DELETE          reduce using rule 183 (something_ex -> funciones .)
    IF              reduce using rule 183 (something_ex -> funciones .)
    ELSE            reduce using rule 183 (something_ex -> funciones .)
    TYPE            reduce using rule 183 (something_ex -> funciones .)
    SWITCH          reduce using rule 183 (something_ex -> funciones .)
    VAR             reduce using rule 183 (something_ex -> funciones .)
    FUNC            reduce using rule 183 (something_ex -> funciones .)
    INTEGER         reduce using rule 183 (something_ex -> funciones .)
    FLOAT           reduce using rule 183 (something_ex -> funciones .)
    NOT             reduce using rule 183 (something_ex -> funciones .)
    RLLAVE          reduce using rule 183 (something_ex -> funciones .)
    RETURN          reduce using rule 183 (something_ex -> funciones .)
    STRING          reduce using rule 183 (something_ex -> funciones .)
    TRUE            reduce using rule 183 (something_ex -> funciones .)
    FALSE           reduce using rule 183 (something_ex -> funciones .)
    INT32           reduce using rule 183 (something_ex -> funciones .)
    INT64           reduce using rule 183 (something_ex -> funciones .)
    FLOAT32         reduce using rule 183 (something_ex -> funciones .)
    FLOAT64         reduce using rule 183 (something_ex -> funciones .)
    BYTE            reduce using rule 183 (something_ex -> funciones .)
    WFLOAT          reduce using rule 183 (something_ex -> funciones .)
    WSTRING         reduce using rule 183 (something_ex -> funciones .)
    WINT            reduce using rule 183 (something_ex -> funciones .)
    BOOL            reduce using rule 183 (something_ex -> funciones .)
    DEFAULT         reduce using rule 183 (something_ex -> funciones .)
    CASE            reduce using rule 183 (something_ex -> funciones .)
    RPAREN          reduce using rule 183 (something_ex -> funciones .)
    AND             reduce using rule 183 (something_ex -> funciones .)
    OR              reduce using rule 183 (something_ex -> funciones .)
    LLLAVE          reduce using rule 183 (something_ex -> funciones .)
    RCORCHE         reduce using rule 183 (something_ex -> funciones .)
    COMA            reduce using rule 183 (something_ex -> funciones .)


state 134

    (74) data_structure -> array_var .

    GREATER         reduce using rule 74 (data_structure -> array_var .)
    SMALLER         reduce using rule 74 (data_structure -> array_var .)
    GREATER_OR_EQUAL reduce using rule 74 (data_structure -> array_var .)
    SMALLER_OR_EQUAL reduce using rule 74 (data_structure -> array_var .)
    EQUAL_COMPARE   reduce using rule 74 (data_structure -> array_var .)
    NOT_EQUAL       reduce using rule 74 (data_structure -> array_var .)
    PLUS            reduce using rule 74 (data_structure -> array_var .)
    TIMES           reduce using rule 74 (data_structure -> array_var .)
    DIVIDE          reduce using rule 74 (data_structure -> array_var .)
    MINUS           reduce using rule 74 (data_structure -> array_var .)
    MOD             reduce using rule 74 (data_structure -> array_var .)
    COLON           reduce using rule 74 (data_structure -> array_var .)
    PRINT           reduce using rule 74 (data_structure -> array_var .)
    SCAN            reduce using rule 74 (data_structure -> array_var .)
    FOR             reduce using rule 74 (data_structure -> array_var .)
    CONST           reduce using rule 74 (data_structure -> array_var .)
    ID              reduce using rule 74 (data_structure -> array_var .)
    APPEND          reduce using rule 74 (data_structure -> array_var .)
    LEN             reduce using rule 74 (data_structure -> array_var .)
    COPY            reduce using rule 74 (data_structure -> array_var .)
    DELETE          reduce using rule 74 (data_structure -> array_var .)
    IF              reduce using rule 74 (data_structure -> array_var .)
    ELSE            reduce using rule 74 (data_structure -> array_var .)
    TYPE            reduce using rule 74 (data_structure -> array_var .)
    SWITCH          reduce using rule 74 (data_structure -> array_var .)
    VAR             reduce using rule 74 (data_structure -> array_var .)
    FUNC            reduce using rule 74 (data_structure -> array_var .)
    INTEGER         reduce using rule 74 (data_structure -> array_var .)
    FLOAT           reduce using rule 74 (data_structure -> array_var .)
    NOT             reduce using rule 74 (data_structure -> array_var .)
    RLLAVE          reduce using rule 74 (data_structure -> array_var .)
    RETURN          reduce using rule 74 (data_structure -> array_var .)
    STRING          reduce using rule 74 (data_structure -> array_var .)
    TRUE            reduce using rule 74 (data_structure -> array_var .)
    FALSE           reduce using rule 74 (data_structure -> array_var .)
    INT32           reduce using rule 74 (data_structure -> array_var .)
    INT64           reduce using rule 74 (data_structure -> array_var .)
    FLOAT32         reduce using rule 74 (data_structure -> array_var .)
    FLOAT64         reduce using rule 74 (data_structure -> array_var .)
    BYTE            reduce using rule 74 (data_structure -> array_var .)
    WFLOAT          reduce using rule 74 (data_structure -> array_var .)
    WSTRING         reduce using rule 74 (data_structure -> array_var .)
    WINT            reduce using rule 74 (data_structure -> array_var .)
    BOOL            reduce using rule 74 (data_structure -> array_var .)
    DEFAULT         reduce using rule 74 (data_structure -> array_var .)
    CASE            reduce using rule 74 (data_structure -> array_var .)
    RPAREN          reduce using rule 74 (data_structure -> array_var .)
    AND             reduce using rule 74 (data_structure -> array_var .)
    OR              reduce using rule 74 (data_structure -> array_var .)
    LLLAVE          reduce using rule 74 (data_structure -> array_var .)
    RCORCHE         reduce using rule 74 (data_structure -> array_var .)
    COMA            reduce using rule 74 (data_structure -> array_var .)


state 135

    (75) data_structure -> map_var .

    GREATER         reduce using rule 75 (data_structure -> map_var .)
    SMALLER         reduce using rule 75 (data_structure -> map_var .)
    GREATER_OR_EQUAL reduce using rule 75 (data_structure -> map_var .)
    SMALLER_OR_EQUAL reduce using rule 75 (data_structure -> map_var .)
    EQUAL_COMPARE   reduce using rule 75 (data_structure -> map_var .)
    NOT_EQUAL       reduce using rule 75 (data_structure -> map_var .)
    PLUS            reduce using rule 75 (data_structure -> map_var .)
    TIMES           reduce using rule 75 (data_structure -> map_var .)
    DIVIDE          reduce using rule 75 (data_structure -> map_var .)
    MINUS           reduce using rule 75 (data_structure -> map_var .)
    MOD             reduce using rule 75 (data_structure -> map_var .)
    COLON           reduce using rule 75 (data_structure -> map_var .)
    PRINT           reduce using rule 75 (data_structure -> map_var .)
    SCAN            reduce using rule 75 (data_structure -> map_var .)
    FOR             reduce using rule 75 (data_structure -> map_var .)
    CONST           reduce using rule 75 (data_structure -> map_var .)
    ID              reduce using rule 75 (data_structure -> map_var .)
    APPEND          reduce using rule 75 (data_structure -> map_var .)
    LEN             reduce using rule 75 (data_structure -> map_var .)
    COPY            reduce using rule 75 (data_structure -> map_var .)
    DELETE          reduce using rule 75 (data_structure -> map_var .)
    IF              reduce using rule 75 (data_structure -> map_var .)
    ELSE            reduce using rule 75 (data_structure -> map_var .)
    TYPE            reduce using rule 75 (data_structure -> map_var .)
    SWITCH          reduce using rule 75 (data_structure -> map_var .)
    VAR             reduce using rule 75 (data_structure -> map_var .)
    FUNC            reduce using rule 75 (data_structure -> map_var .)
    INTEGER         reduce using rule 75 (data_structure -> map_var .)
    FLOAT           reduce using rule 75 (data_structure -> map_var .)
    NOT             reduce using rule 75 (data_structure -> map_var .)
    RLLAVE          reduce using rule 75 (data_structure -> map_var .)
    RETURN          reduce using rule 75 (data_structure -> map_var .)
    STRING          reduce using rule 75 (data_structure -> map_var .)
    TRUE            reduce using rule 75 (data_structure -> map_var .)
    FALSE           reduce using rule 75 (data_structure -> map_var .)
    INT32           reduce using rule 75 (data_structure -> map_var .)
    INT64           reduce using rule 75 (data_structure -> map_var .)
    FLOAT32         reduce using rule 75 (data_structure -> map_var .)
    FLOAT64         reduce using rule 75 (data_structure -> map_var .)
    BYTE            reduce using rule 75 (data_structure -> map_var .)
    WFLOAT          reduce using rule 75 (data_structure -> map_var .)
    WSTRING         reduce using rule 75 (data_structure -> map_var .)
    WINT            reduce using rule 75 (data_structure -> map_var .)
    BOOL            reduce using rule 75 (data_structure -> map_var .)
    DEFAULT         reduce using rule 75 (data_structure -> map_var .)
    CASE            reduce using rule 75 (data_structure -> map_var .)
    RPAREN          reduce using rule 75 (data_structure -> map_var .)
    AND             reduce using rule 75 (data_structure -> map_var .)
    OR              reduce using rule 75 (data_structure -> map_var .)
    LLLAVE          reduce using rule 75 (data_structure -> map_var .)
    RCORCHE         reduce using rule 75 (data_structure -> map_var .)
    COMA            reduce using rule 75 (data_structure -> map_var .)


state 136

    (76) data_structure -> slice_var .

    GREATER         reduce using rule 76 (data_structure -> slice_var .)
    SMALLER         reduce using rule 76 (data_structure -> slice_var .)
    GREATER_OR_EQUAL reduce using rule 76 (data_structure -> slice_var .)
    SMALLER_OR_EQUAL reduce using rule 76 (data_structure -> slice_var .)
    EQUAL_COMPARE   reduce using rule 76 (data_structure -> slice_var .)
    NOT_EQUAL       reduce using rule 76 (data_structure -> slice_var .)
    PLUS            reduce using rule 76 (data_structure -> slice_var .)
    TIMES           reduce using rule 76 (data_structure -> slice_var .)
    DIVIDE          reduce using rule 76 (data_structure -> slice_var .)
    MINUS           reduce using rule 76 (data_structure -> slice_var .)
    MOD             reduce using rule 76 (data_structure -> slice_var .)
    COLON           reduce using rule 76 (data_structure -> slice_var .)
    PRINT           reduce using rule 76 (data_structure -> slice_var .)
    SCAN            reduce using rule 76 (data_structure -> slice_var .)
    FOR             reduce using rule 76 (data_structure -> slice_var .)
    CONST           reduce using rule 76 (data_structure -> slice_var .)
    ID              reduce using rule 76 (data_structure -> slice_var .)
    APPEND          reduce using rule 76 (data_structure -> slice_var .)
    LEN             reduce using rule 76 (data_structure -> slice_var .)
    COPY            reduce using rule 76 (data_structure -> slice_var .)
    DELETE          reduce using rule 76 (data_structure -> slice_var .)
    IF              reduce using rule 76 (data_structure -> slice_var .)
    ELSE            reduce using rule 76 (data_structure -> slice_var .)
    TYPE            reduce using rule 76 (data_structure -> slice_var .)
    SWITCH          reduce using rule 76 (data_structure -> slice_var .)
    VAR             reduce using rule 76 (data_structure -> slice_var .)
    FUNC            reduce using rule 76 (data_structure -> slice_var .)
    INTEGER         reduce using rule 76 (data_structure -> slice_var .)
    FLOAT           reduce using rule 76 (data_structure -> slice_var .)
    NOT             reduce using rule 76 (data_structure -> slice_var .)
    RLLAVE          reduce using rule 76 (data_structure -> slice_var .)
    RETURN          reduce using rule 76 (data_structure -> slice_var .)
    STRING          reduce using rule 76 (data_structure -> slice_var .)
    TRUE            reduce using rule 76 (data_structure -> slice_var .)
    FALSE           reduce using rule 76 (data_structure -> slice_var .)
    INT32           reduce using rule 76 (data_structure -> slice_var .)
    INT64           reduce using rule 76 (data_structure -> slice_var .)
    FLOAT32         reduce using rule 76 (data_structure -> slice_var .)
    FLOAT64         reduce using rule 76 (data_structure -> slice_var .)
    BYTE            reduce using rule 76 (data_structure -> slice_var .)
    WFLOAT          reduce using rule 76 (data_structure -> slice_var .)
    WSTRING         reduce using rule 76 (data_structure -> slice_var .)
    WINT            reduce using rule 76 (data_structure -> slice_var .)
    BOOL            reduce using rule 76 (data_structure -> slice_var .)
    DEFAULT         reduce using rule 76 (data_structure -> slice_var .)
    CASE            reduce using rule 76 (data_structure -> slice_var .)
    RPAREN          reduce using rule 76 (data_structure -> slice_var .)
    AND             reduce using rule 76 (data_structure -> slice_var .)
    OR              reduce using rule 76 (data_structure -> slice_var .)
    LLLAVE          reduce using rule 76 (data_structure -> slice_var .)
    RCORCHE         reduce using rule 76 (data_structure -> slice_var .)
    COMA            reduce using rule 76 (data_structure -> slice_var .)


state 137

    (138) comparison -> value op . value
    (139) value -> . ID
    (140) value -> . expression
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    ID              shift and go to state 198
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    value                          shift and go to state 197
    expression                     shift and go to state 132
    something_ex                   shift and go to state 64
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 138

    (189) logic_operation -> logic_value logic_recu .

    PRINT           reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    SCAN            reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    FOR             reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    CONST           reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    ID              reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    APPEND          reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    LEN             reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    COPY            reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    DELETE          reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    IF              reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    ELSE            reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    TYPE            reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    SWITCH          reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    VAR             reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    FUNC            reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    INTEGER         reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    FLOAT           reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    NOT             reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    RLLAVE          reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    RETURN          reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    STRING          reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    TRUE            reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    FALSE           reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    INT32           reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    INT64           reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    FLOAT32         reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    FLOAT64         reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    BYTE            reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    WFLOAT          reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    WSTRING         reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    WINT            reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    BOOL            reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    DEFAULT         reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    CASE            reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    LLLAVE          reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    COLON           reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    RPAREN          reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    RCORCHE         reduce using rule 189 (logic_operation -> logic_value logic_recu .)
    COMA            reduce using rule 189 (logic_operation -> logic_value logic_recu .)


state 139

    (191) logic_recu -> logic_op . logic_value
    (192) logic_recu -> logic_op . logic_value logic_recu
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (138) comparison -> . value op value
    (139) value -> . ID
    (140) value -> . expression
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    ID              shift and go to state 202
    NOT             shift and go to state 87
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    logic_value                    shift and go to state 199
    negation                       shift and go to state 200
    comparison                     shift and go to state 201
    value                          shift and go to state 66
    expression                     shift and go to state 132
    something_ex                   shift and go to state 64
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 140

    (198) logic_op -> AND .

    ID              reduce using rule 198 (logic_op -> AND .)
    NOT             reduce using rule 198 (logic_op -> AND .)
    INTEGER         reduce using rule 198 (logic_op -> AND .)
    FLOAT           reduce using rule 198 (logic_op -> AND .)
    APPEND          reduce using rule 198 (logic_op -> AND .)
    LEN             reduce using rule 198 (logic_op -> AND .)
    COPY            reduce using rule 198 (logic_op -> AND .)
    DELETE          reduce using rule 198 (logic_op -> AND .)


state 141

    (199) logic_op -> OR .

    ID              reduce using rule 199 (logic_op -> OR .)
    NOT             reduce using rule 199 (logic_op -> OR .)
    INTEGER         reduce using rule 199 (logic_op -> OR .)
    FLOAT           reduce using rule 199 (logic_op -> OR .)
    APPEND          reduce using rule 199 (logic_op -> OR .)
    LEN             reduce using rule 199 (logic_op -> OR .)
    COPY            reduce using rule 199 (logic_op -> OR .)
    DELETE          reduce using rule 199 (logic_op -> OR .)


state 142

    (109) decConst -> CONST ID . data_type_and_value
    (110) decConst -> CONST ID . EQUAL ID
    (111) decConst -> CONST ID . EQUAL data_structure
    (207) data_type_and_value -> . WSTRING EQUAL str_value
    (208) data_type_and_value -> . WINT EQUAL int_value
    (209) data_type_and_value -> . INT32 EQUAL int_value
    (210) data_type_and_value -> . INT64 EQUAL int_value
    (211) data_type_and_value -> . WFLOAT EQUAL float_value
    (212) data_type_and_value -> . FLOAT32 EQUAL float_value
    (213) data_type_and_value -> . FLOAT64 EQUAL float_value
    (214) data_type_and_value -> . BOOL EQUAL bool_value
    (225) data_type_and_value -> . WSTRING EQUAL error
    (226) data_type_and_value -> . WINT EQUAL error
    (227) data_type_and_value -> . INT32 EQUAL error
    (228) data_type_and_value -> . INT64 EQUAL error
    (229) data_type_and_value -> . WFLOAT EQUAL error
    (230) data_type_and_value -> . FLOAT32 EQUAL error
    (231) data_type_and_value -> . FLOAT64 EQUAL error
    (232) data_type_and_value -> . BOOL EQUAL error

    EQUAL           shift and go to state 204
    WSTRING         shift and go to state 205
    WINT            shift and go to state 206
    INT32           shift and go to state 207
    INT64           shift and go to state 208
    WFLOAT          shift and go to state 209
    FLOAT32         shift and go to state 210
    FLOAT64         shift and go to state 211
    BOOL            shift and go to state 212

    data_type_and_value            shift and go to state 203

state 143

    (77) var_asignation -> ID EQUAL . any
    (78) any -> . values
    (79) any -> . operations
    (80) any -> . ID
    (81) any -> . data_structure
    (82) any -> . funciones
    (51) values -> . STRING
    (52) values -> . INTEGER
    (53) values -> . FLOAT
    (54) values -> . TRUE
    (55) values -> . FALSE
    (65) operations -> . expression
    (66) operations -> . comparison
    (67) operations -> . logic_operation
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID

    ID              shift and go to state 213
    STRING          shift and go to state 174
    INTEGER         shift and go to state 175
    FLOAT           shift and go to state 176
    TRUE            shift and go to state 177
    FALSE           shift and go to state 178
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    NOT             shift and go to state 87

    any                            shift and go to state 214
    values                         shift and go to state 215
    operations                     shift and go to state 216
    data_structure                 shift and go to state 217
    funciones                      shift and go to state 218
    expression                     shift and go to state 179
    comparison                     shift and go to state 180
    logic_operation                shift and go to state 181
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68

state 144

    (101) cStruct -> ID DEQUAL . ID LLLAVE asignaciones RLLAVE
    (150) slice_declaration -> ID DEQUAL . funM
    (151) slice_declaration -> ID DEQUAL . LCORCHE RCORCHE data_types arr_content
    (124) dynamic -> ID DEQUAL . algo
    (152) funM -> . MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN
    (153) funM -> . MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN
    (125) algo -> . values
    (126) algo -> . operations
    (127) algo -> . ID
    (128) algo -> . data_structure
    (129) algo -> . funciones
    (51) values -> . STRING
    (52) values -> . INTEGER
    (53) values -> . FLOAT
    (54) values -> . TRUE
    (55) values -> . FALSE
    (65) operations -> . expression
    (66) operations -> . comparison
    (67) operations -> . logic_operation
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID

    ID              shift and go to state 219
    LCORCHE         shift and go to state 221
    MAKE            shift and go to state 223
    STRING          shift and go to state 174
    INTEGER         shift and go to state 175
    FLOAT           shift and go to state 176
    TRUE            shift and go to state 177
    FALSE           shift and go to state 178
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    NOT             shift and go to state 87

    funM                           shift and go to state 220
    algo                           shift and go to state 222
    values                         shift and go to state 224
    operations                     shift and go to state 225
    data_structure                 shift and go to state 226
    funciones                      shift and go to state 227
    expression                     shift and go to state 179
    comparison                     shift and go to state 180
    logic_operation                shift and go to state 181
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68

state 145

    (243) array_var -> ID LCORCHE . index RCORCHE
    (157) slice_var -> ID LCORCHE . index_s RCORCHE
    (249) map_var -> ID LCORCHE . key RCORCHE
    (244) index -> . ID
    (245) index -> . INTEGER
    (246) index -> . expression
    (158) index_s -> . ID
    (159) index_s -> . INTEGER
    (160) index_s -> . expression
    (250) key -> . ID
    (251) key -> . values
    (252) key -> . operations
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (51) values -> . STRING
    (52) values -> . INTEGER
    (53) values -> . FLOAT
    (54) values -> . TRUE
    (55) values -> . FALSE
    (65) operations -> . expression
    (66) operations -> . comparison
    (67) operations -> . logic_operation
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    ID              shift and go to state 228
    INTEGER         shift and go to state 232
    STRING          shift and go to state 174
    FLOAT           shift and go to state 176
    TRUE            shift and go to state 177
    FALSE           shift and go to state 178
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    NOT             shift and go to state 87

    index                          shift and go to state 229
    index_s                        shift and go to state 230
    key                            shift and go to state 231
    expression                     shift and go to state 233
    values                         shift and go to state 234
    operations                     shift and go to state 235
    something_ex                   shift and go to state 64
    comparison                     shift and go to state 180
    logic_operation                shift and go to state 181
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 146

    (202) call_func -> ID LPAREN . list_params RPAREN
    (203) call_func -> ID LPAREN . RPAREN
    (204) list_params -> . ID
    (205) list_params -> . ID COMA more_p

    RPAREN          shift and go to state 238
    ID              shift and go to state 236

    list_params                    shift and go to state 237

state 147

    (130) funciones -> APPEND LPAREN . ID COMA values RPAREN
    (131) funciones -> APPEND LPAREN . ID COMA ID RPAREN

    ID              shift and go to state 239


state 148

    (132) funciones -> LEN LPAREN . ID RPAREN

    ID              shift and go to state 240


state 149

    (133) funciones -> COPY LPAREN . ID COMA ID RPAREN

    ID              shift and go to state 241


state 150

    (134) funciones -> DELETE LPAREN . ID COMA clave RPAREN

    ID              shift and go to state 242


state 151

    (88) SenIF -> IF comparison . LLLAVE codigo RLLAVE
    (194) logic_value -> comparison .

    LLLAVE          shift and go to state 243
    AND             reduce using rule 194 (logic_value -> comparison .)
    OR              reduce using rule 194 (logic_value -> comparison .)


state 152

    (89) SenIF -> IF logic_operation . LLLAVE codigo RLLAVE

    LLLAVE          shift and go to state 244


state 153

    (90) SenIF -> IF TRUE . LLLAVE codigo RLLAVE

    LLLAVE          shift and go to state 245


state 154

    (91) SenIF -> IF FALSE . LLLAVE codigo RLLAVE

    LLLAVE          shift and go to state 246


state 155

    (139) value -> ID .
    (195) logic_value -> ID .
    (179) something_ex -> ID .
    (243) array_var -> ID . LCORCHE index RCORCHE
    (249) map_var -> ID . LCORCHE key RCORCHE
    (157) slice_var -> ID . LCORCHE index_s RCORCHE
    (202) call_func -> ID . LPAREN list_params RPAREN
    (203) call_func -> ID . LPAREN RPAREN

  ! reduce/reduce conflict for GREATER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for GREATER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for EQUAL_COMPARE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MOD resolved using rule 139 (value -> ID .)
    GREATER         reduce using rule 139 (value -> ID .)
    SMALLER         reduce using rule 139 (value -> ID .)
    GREATER_OR_EQUAL reduce using rule 139 (value -> ID .)
    SMALLER_OR_EQUAL reduce using rule 139 (value -> ID .)
    EQUAL_COMPARE   reduce using rule 139 (value -> ID .)
    NOT_EQUAL       reduce using rule 139 (value -> ID .)
    PLUS            reduce using rule 139 (value -> ID .)
    TIMES           reduce using rule 139 (value -> ID .)
    DIVIDE          reduce using rule 139 (value -> ID .)
    MINUS           reduce using rule 139 (value -> ID .)
    MOD             reduce using rule 139 (value -> ID .)
    AND             reduce using rule 195 (logic_value -> ID .)
    OR              reduce using rule 195 (logic_value -> ID .)
    LCORCHE         shift and go to state 196
    LPAREN          shift and go to state 146

  ! GREATER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! GREATER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! EQUAL_COMPARE   [ reduce using rule 179 (something_ex -> ID .) ]
  ! NOT_EQUAL       [ reduce using rule 179 (something_ex -> ID .) ]
  ! PLUS            [ reduce using rule 179 (something_ex -> ID .) ]
  ! TIMES           [ reduce using rule 179 (something_ex -> ID .) ]
  ! DIVIDE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! MINUS           [ reduce using rule 179 (something_ex -> ID .) ]
  ! MOD             [ reduce using rule 179 (something_ex -> ID .) ]


state 156

    (92) SenElseIF -> ELSE IF . comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> ELSE IF . logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> ELSE IF . TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> ELSE IF . FALSE LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    TRUE            shift and go to state 249
    FALSE           shift and go to state 250
    ID              shift and go to state 155
    NOT             shift and go to state 87
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    comparison                     shift and go to state 247
    logic_operation                shift and go to state 248
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    expression                     shift and go to state 132
    something_ex                   shift and go to state 64
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 157

    (96) SenElse -> ELSE LLLAVE . codigo RLLAVE
    (7) codigo -> . rule
    (8) codigo -> . more_rules
    (10) rule -> . impresion COLON
    (11) rule -> . impresion
    (12) rule -> . scan_func COLON
    (13) rule -> . scan_func
    (14) rule -> . expression COLON
    (15) rule -> . expression
    (16) rule -> . cicloFor
    (17) rule -> . comparison
    (18) rule -> . logic_operation
    (19) rule -> . decVar COLON
    (20) rule -> . decVar
    (21) rule -> . decConst COLON
    (22) rule -> . decConst
    (23) rule -> . var_asignation
    (24) rule -> . var_asignation COLON
    (25) rule -> . funciones
    (26) rule -> . funciones COLON
    (27) rule -> . SenIF
    (28) rule -> . SenElseIF
    (29) rule -> . SenElse
    (30) rule -> . SenStruct
    (31) rule -> . cStruct
    (32) rule -> . switch_statement
    (33) rule -> . array_declaration COLON
    (34) rule -> . array_declaration
    (35) rule -> . array_var COLON
    (36) rule -> . array_var
    (37) rule -> . array_assignment COLON
    (38) rule -> . array_assignment
    (39) rule -> . slice_declaration COLON
    (40) rule -> . slice_declaration
    (41) rule -> . slice_var COLON
    (42) rule -> . slice_var
    (43) rule -> . slice_assignment COLON
    (44) rule -> . slice_assignment
    (45) rule -> . map_declaration COLON
    (46) rule -> . map_declaration
    (47) rule -> . map_assignment COLON
    (48) rule -> . map_assignment
    (49) rule -> . func_declaration
    (50) rule -> . main_func
    (9) more_rules -> . rule codigo
    (173) impresion -> . PRINT LPAREN something RPAREN
    (174) impresion -> . PRINT LPAREN error RPAREN
    (201) scan_func -> . SCAN LPAREN POINTER RPAREN
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (166) cicloFor -> . FOR comparison LLLAVE codigo RLLAVE
    (167) cicloFor -> . FOR logic_operation LLLAVE codigo RLLAVE
    (168) cicloFor -> . FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (112) decVar -> . static
    (113) decVar -> . dynamic
    (109) decConst -> . CONST ID data_type_and_value
    (110) decConst -> . CONST ID EQUAL ID
    (111) decConst -> . CONST ID EQUAL data_structure
    (77) var_asignation -> . ID EQUAL any
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (88) SenIF -> . IF comparison LLLAVE codigo RLLAVE
    (89) SenIF -> . IF logic_operation LLLAVE codigo RLLAVE
    (90) SenIF -> . IF TRUE LLLAVE codigo RLLAVE
    (91) SenIF -> . IF FALSE LLLAVE codigo RLLAVE
    (92) SenElseIF -> . ELSE IF comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> . ELSE IF logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> . ELSE IF TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> . ELSE IF FALSE LLLAVE codigo RLLAVE
    (96) SenElse -> . ELSE LLLAVE codigo RLLAVE
    (97) SenStruct -> . TYPE ID STRUCT LLLAVE declaration RLLAVE
    (101) cStruct -> . ID DEQUAL ID LLLAVE asignaciones RLLAVE
    (233) switch_statement -> . SWITCH ID LLLAVE cases RLLAVE
    (238) array_declaration -> . VAR ID LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> . VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (243) array_var -> . ID LCORCHE index RCORCHE
    (247) array_assignment -> . array_var EQUAL something
    (147) slice_declaration -> . VAR ID LCORCHE RCORCHE data_types
    (148) slice_declaration -> . VAR ID EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> . VAR ID EQUAL funM
    (150) slice_declaration -> . ID DEQUAL funM
    (151) slice_declaration -> . ID DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (161) slice_assignment -> . slice_var EQUAL something_s
    (248) map_declaration -> . VAR ID LCORCHE data_types RCORCHE data_types
    (253) map_assignment -> . map_var EQUAL something
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (114) static -> . single
    (115) static -> . multiple
    (124) dynamic -> . ID DEQUAL algo
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (249) map_var -> . ID LCORCHE key RCORCHE
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (120) single -> . VAR ID data_types
    (121) single -> . VAR ID data_types EQUAL funciones
    (122) single -> . VAR ID data_types EQUAL data_structure
    (123) single -> . VAR ID data_type_and_value
    (116) multiple -> . list_var data_types
    (117) list_var -> . VAR ID COMA more

    PRINT           shift and go to state 62
    SCAN            shift and go to state 63
    FOR             shift and go to state 65
    CONST           shift and go to state 71
    ID              shift and go to state 72
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    IF              shift and go to state 79
    ELSE            shift and go to state 80
    TYPE            shift and go to state 81
    SWITCH          shift and go to state 82
    VAR             shift and go to state 83
    FUNC            shift and go to state 32
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    NOT             shift and go to state 87

    codigo                         shift and go to state 251
    rule                           shift and go to state 34
    more_rules                     shift and go to state 35
    impresion                      shift and go to state 36
    scan_func                      shift and go to state 37
    expression                     shift and go to state 38
    cicloFor                       shift and go to state 39
    comparison                     shift and go to state 40
    logic_operation                shift and go to state 41
    decVar                         shift and go to state 42
    decConst                       shift and go to state 43
    var_asignation                 shift and go to state 44
    funciones                      shift and go to state 45
    SenIF                          shift and go to state 46
    SenElseIF                      shift and go to state 47
    SenElse                        shift and go to state 48
    SenStruct                      shift and go to state 49
    cStruct                        shift and go to state 50
    switch_statement               shift and go to state 51
    array_declaration              shift and go to state 52
    array_var                      shift and go to state 53
    array_assignment               shift and go to state 54
    slice_declaration              shift and go to state 55
    slice_var                      shift and go to state 56
    slice_assignment               shift and go to state 57
    map_declaration                shift and go to state 58
    map_assignment                 shift and go to state 59
    func_declaration               shift and go to state 60
    main_func                      shift and go to state 61
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    static                         shift and go to state 69
    dynamic                        shift and go to state 70
    data_structure                 shift and go to state 73
    call_func                      shift and go to state 78
    map_var                        shift and go to state 84
    single                         shift and go to state 88
    multiple                       shift and go to state 89
    list_var                       shift and go to state 90

state 158

    (97) SenStruct -> TYPE ID . STRUCT LLLAVE declaration RLLAVE

    STRUCT          shift and go to state 252


state 159

    (233) switch_statement -> SWITCH ID . LLLAVE cases RLLAVE

    LLLAVE          shift and go to state 253


state 160

    (238) array_declaration -> VAR ID . LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> VAR ID . EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (147) slice_declaration -> VAR ID . LCORCHE RCORCHE data_types
    (148) slice_declaration -> VAR ID . EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> VAR ID . EQUAL funM
    (248) map_declaration -> VAR ID . LCORCHE data_types RCORCHE data_types
    (120) single -> VAR ID . data_types
    (121) single -> VAR ID . data_types EQUAL funciones
    (122) single -> VAR ID . data_types EQUAL data_structure
    (123) single -> VAR ID . data_type_and_value
    (117) list_var -> VAR ID . COMA more
    (56) data_types -> . INT32
    (57) data_types -> . INT64
    (58) data_types -> . FLOAT32
    (59) data_types -> . FLOAT64
    (60) data_types -> . BYTE
    (61) data_types -> . WFLOAT
    (62) data_types -> . WSTRING
    (63) data_types -> . WINT
    (64) data_types -> . BOOL
    (207) data_type_and_value -> . WSTRING EQUAL str_value
    (208) data_type_and_value -> . WINT EQUAL int_value
    (209) data_type_and_value -> . INT32 EQUAL int_value
    (210) data_type_and_value -> . INT64 EQUAL int_value
    (211) data_type_and_value -> . WFLOAT EQUAL float_value
    (212) data_type_and_value -> . FLOAT32 EQUAL float_value
    (213) data_type_and_value -> . FLOAT64 EQUAL float_value
    (214) data_type_and_value -> . BOOL EQUAL bool_value
    (225) data_type_and_value -> . WSTRING EQUAL error
    (226) data_type_and_value -> . WINT EQUAL error
    (227) data_type_and_value -> . INT32 EQUAL error
    (228) data_type_and_value -> . INT64 EQUAL error
    (229) data_type_and_value -> . WFLOAT EQUAL error
    (230) data_type_and_value -> . FLOAT32 EQUAL error
    (231) data_type_and_value -> . FLOAT64 EQUAL error
    (232) data_type_and_value -> . BOOL EQUAL error

    LCORCHE         shift and go to state 254
    EQUAL           shift and go to state 256
    COMA            shift and go to state 258
    INT32           shift and go to state 259
    INT64           shift and go to state 260
    FLOAT32         shift and go to state 261
    FLOAT64         shift and go to state 262
    BYTE            shift and go to state 26
    WFLOAT          shift and go to state 263
    WSTRING         shift and go to state 264
    WINT            shift and go to state 265
    BOOL            shift and go to state 266

    data_types                     shift and go to state 255
    data_type_and_value            shift and go to state 257

state 161

    (253) map_assignment -> map_var EQUAL . something
    (83) something -> . ID
    (84) something -> . data_structure
    (85) something -> . values
    (86) something -> . operations
    (87) something -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (51) values -> . STRING
    (52) values -> . INTEGER
    (53) values -> . FLOAT
    (54) values -> . TRUE
    (55) values -> . FALSE
    (65) operations -> . expression
    (66) operations -> . comparison
    (67) operations -> . logic_operation
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID

    ID              shift and go to state 169
    STRING          shift and go to state 174
    INTEGER         shift and go to state 175
    FLOAT           shift and go to state 176
    TRUE            shift and go to state 177
    FALSE           shift and go to state 178
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    NOT             shift and go to state 87

    map_var                        shift and go to state 135
    something                      shift and go to state 267
    data_structure                 shift and go to state 170
    values                         shift and go to state 171
    operations                     shift and go to state 172
    funciones                      shift and go to state 173
    array_var                      shift and go to state 134
    slice_var                      shift and go to state 136
    expression                     shift and go to state 179
    comparison                     shift and go to state 180
    logic_operation                shift and go to state 181
    call_func                      shift and go to state 78
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68

state 162

    (196) negation -> NOT comparison .

    PRINT           reduce using rule 196 (negation -> NOT comparison .)
    SCAN            reduce using rule 196 (negation -> NOT comparison .)
    FOR             reduce using rule 196 (negation -> NOT comparison .)
    CONST           reduce using rule 196 (negation -> NOT comparison .)
    ID              reduce using rule 196 (negation -> NOT comparison .)
    APPEND          reduce using rule 196 (negation -> NOT comparison .)
    LEN             reduce using rule 196 (negation -> NOT comparison .)
    COPY            reduce using rule 196 (negation -> NOT comparison .)
    DELETE          reduce using rule 196 (negation -> NOT comparison .)
    IF              reduce using rule 196 (negation -> NOT comparison .)
    ELSE            reduce using rule 196 (negation -> NOT comparison .)
    TYPE            reduce using rule 196 (negation -> NOT comparison .)
    SWITCH          reduce using rule 196 (negation -> NOT comparison .)
    VAR             reduce using rule 196 (negation -> NOT comparison .)
    FUNC            reduce using rule 196 (negation -> NOT comparison .)
    INTEGER         reduce using rule 196 (negation -> NOT comparison .)
    FLOAT           reduce using rule 196 (negation -> NOT comparison .)
    NOT             reduce using rule 196 (negation -> NOT comparison .)
    RLLAVE          reduce using rule 196 (negation -> NOT comparison .)
    AND             reduce using rule 196 (negation -> NOT comparison .)
    OR              reduce using rule 196 (negation -> NOT comparison .)
    RETURN          reduce using rule 196 (negation -> NOT comparison .)
    STRING          reduce using rule 196 (negation -> NOT comparison .)
    TRUE            reduce using rule 196 (negation -> NOT comparison .)
    FALSE           reduce using rule 196 (negation -> NOT comparison .)
    INT32           reduce using rule 196 (negation -> NOT comparison .)
    INT64           reduce using rule 196 (negation -> NOT comparison .)
    FLOAT32         reduce using rule 196 (negation -> NOT comparison .)
    FLOAT64         reduce using rule 196 (negation -> NOT comparison .)
    BYTE            reduce using rule 196 (negation -> NOT comparison .)
    WFLOAT          reduce using rule 196 (negation -> NOT comparison .)
    WSTRING         reduce using rule 196 (negation -> NOT comparison .)
    WINT            reduce using rule 196 (negation -> NOT comparison .)
    BOOL            reduce using rule 196 (negation -> NOT comparison .)
    DEFAULT         reduce using rule 196 (negation -> NOT comparison .)
    CASE            reduce using rule 196 (negation -> NOT comparison .)
    LLLAVE          reduce using rule 196 (negation -> NOT comparison .)
    COLON           reduce using rule 196 (negation -> NOT comparison .)
    RPAREN          reduce using rule 196 (negation -> NOT comparison .)
    RCORCHE         reduce using rule 196 (negation -> NOT comparison .)
    COMA            reduce using rule 196 (negation -> NOT comparison .)


state 163

    (197) negation -> NOT ID .
    (139) value -> ID .
    (179) something_ex -> ID .
    (243) array_var -> ID . LCORCHE index RCORCHE
    (249) map_var -> ID . LCORCHE key RCORCHE
    (157) slice_var -> ID . LCORCHE index_s RCORCHE
    (202) call_func -> ID . LPAREN list_params RPAREN
    (203) call_func -> ID . LPAREN RPAREN

  ! reduce/reduce conflict for GREATER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for GREATER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for EQUAL_COMPARE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MOD resolved using rule 139 (value -> ID .)
    PRINT           reduce using rule 197 (negation -> NOT ID .)
    SCAN            reduce using rule 197 (negation -> NOT ID .)
    FOR             reduce using rule 197 (negation -> NOT ID .)
    CONST           reduce using rule 197 (negation -> NOT ID .)
    ID              reduce using rule 197 (negation -> NOT ID .)
    APPEND          reduce using rule 197 (negation -> NOT ID .)
    LEN             reduce using rule 197 (negation -> NOT ID .)
    COPY            reduce using rule 197 (negation -> NOT ID .)
    DELETE          reduce using rule 197 (negation -> NOT ID .)
    IF              reduce using rule 197 (negation -> NOT ID .)
    ELSE            reduce using rule 197 (negation -> NOT ID .)
    TYPE            reduce using rule 197 (negation -> NOT ID .)
    SWITCH          reduce using rule 197 (negation -> NOT ID .)
    VAR             reduce using rule 197 (negation -> NOT ID .)
    FUNC            reduce using rule 197 (negation -> NOT ID .)
    INTEGER         reduce using rule 197 (negation -> NOT ID .)
    FLOAT           reduce using rule 197 (negation -> NOT ID .)
    NOT             reduce using rule 197 (negation -> NOT ID .)
    RLLAVE          reduce using rule 197 (negation -> NOT ID .)
    AND             reduce using rule 197 (negation -> NOT ID .)
    OR              reduce using rule 197 (negation -> NOT ID .)
    RETURN          reduce using rule 197 (negation -> NOT ID .)
    STRING          reduce using rule 197 (negation -> NOT ID .)
    TRUE            reduce using rule 197 (negation -> NOT ID .)
    FALSE           reduce using rule 197 (negation -> NOT ID .)
    INT32           reduce using rule 197 (negation -> NOT ID .)
    INT64           reduce using rule 197 (negation -> NOT ID .)
    FLOAT32         reduce using rule 197 (negation -> NOT ID .)
    FLOAT64         reduce using rule 197 (negation -> NOT ID .)
    BYTE            reduce using rule 197 (negation -> NOT ID .)
    WFLOAT          reduce using rule 197 (negation -> NOT ID .)
    WSTRING         reduce using rule 197 (negation -> NOT ID .)
    WINT            reduce using rule 197 (negation -> NOT ID .)
    BOOL            reduce using rule 197 (negation -> NOT ID .)
    DEFAULT         reduce using rule 197 (negation -> NOT ID .)
    CASE            reduce using rule 197 (negation -> NOT ID .)
    LLLAVE          reduce using rule 197 (negation -> NOT ID .)
    COLON           reduce using rule 197 (negation -> NOT ID .)
    RPAREN          reduce using rule 197 (negation -> NOT ID .)
    RCORCHE         reduce using rule 197 (negation -> NOT ID .)
    COMA            reduce using rule 197 (negation -> NOT ID .)
    GREATER         reduce using rule 139 (value -> ID .)
    SMALLER         reduce using rule 139 (value -> ID .)
    GREATER_OR_EQUAL reduce using rule 139 (value -> ID .)
    SMALLER_OR_EQUAL reduce using rule 139 (value -> ID .)
    EQUAL_COMPARE   reduce using rule 139 (value -> ID .)
    NOT_EQUAL       reduce using rule 139 (value -> ID .)
    PLUS            reduce using rule 139 (value -> ID .)
    TIMES           reduce using rule 139 (value -> ID .)
    DIVIDE          reduce using rule 139 (value -> ID .)
    MINUS           reduce using rule 139 (value -> ID .)
    MOD             reduce using rule 139 (value -> ID .)
    LCORCHE         shift and go to state 196
    LPAREN          shift and go to state 146

  ! GREATER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! GREATER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! EQUAL_COMPARE   [ reduce using rule 179 (something_ex -> ID .) ]
  ! NOT_EQUAL       [ reduce using rule 179 (something_ex -> ID .) ]
  ! PLUS            [ reduce using rule 179 (something_ex -> ID .) ]
  ! TIMES           [ reduce using rule 179 (something_ex -> ID .) ]
  ! DIVIDE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! MINUS           [ reduce using rule 179 (something_ex -> ID .) ]
  ! MOD             [ reduce using rule 179 (something_ex -> ID .) ]


state 164

    (116) multiple -> list_var data_types .

    COLON           reduce using rule 116 (multiple -> list_var data_types .)
    PRINT           reduce using rule 116 (multiple -> list_var data_types .)
    SCAN            reduce using rule 116 (multiple -> list_var data_types .)
    FOR             reduce using rule 116 (multiple -> list_var data_types .)
    CONST           reduce using rule 116 (multiple -> list_var data_types .)
    ID              reduce using rule 116 (multiple -> list_var data_types .)
    APPEND          reduce using rule 116 (multiple -> list_var data_types .)
    LEN             reduce using rule 116 (multiple -> list_var data_types .)
    COPY            reduce using rule 116 (multiple -> list_var data_types .)
    DELETE          reduce using rule 116 (multiple -> list_var data_types .)
    IF              reduce using rule 116 (multiple -> list_var data_types .)
    ELSE            reduce using rule 116 (multiple -> list_var data_types .)
    TYPE            reduce using rule 116 (multiple -> list_var data_types .)
    SWITCH          reduce using rule 116 (multiple -> list_var data_types .)
    VAR             reduce using rule 116 (multiple -> list_var data_types .)
    FUNC            reduce using rule 116 (multiple -> list_var data_types .)
    INTEGER         reduce using rule 116 (multiple -> list_var data_types .)
    FLOAT           reduce using rule 116 (multiple -> list_var data_types .)
    NOT             reduce using rule 116 (multiple -> list_var data_types .)
    RLLAVE          reduce using rule 116 (multiple -> list_var data_types .)
    RETURN          reduce using rule 116 (multiple -> list_var data_types .)
    STRING          reduce using rule 116 (multiple -> list_var data_types .)
    TRUE            reduce using rule 116 (multiple -> list_var data_types .)
    FALSE           reduce using rule 116 (multiple -> list_var data_types .)
    INT32           reduce using rule 116 (multiple -> list_var data_types .)
    INT64           reduce using rule 116 (multiple -> list_var data_types .)
    FLOAT32         reduce using rule 116 (multiple -> list_var data_types .)
    FLOAT64         reduce using rule 116 (multiple -> list_var data_types .)
    BYTE            reduce using rule 116 (multiple -> list_var data_types .)
    WFLOAT          reduce using rule 116 (multiple -> list_var data_types .)
    WSTRING         reduce using rule 116 (multiple -> list_var data_types .)
    WINT            reduce using rule 116 (multiple -> list_var data_types .)
    BOOL            reduce using rule 116 (multiple -> list_var data_types .)
    DEFAULT         reduce using rule 116 (multiple -> list_var data_types .)
    CASE            reduce using rule 116 (multiple -> list_var data_types .)


state 165

    (267) more_params -> ID data_types COMA params .

    RPAREN          reduce using rule 267 (more_params -> ID data_types COMA params .)


state 166

    (254) func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE . codigo RETURN retorno RLLAVE
    (255) func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE . RETURN body RLLAVE
    (7) codigo -> . rule
    (8) codigo -> . more_rules
    (10) rule -> . impresion COLON
    (11) rule -> . impresion
    (12) rule -> . scan_func COLON
    (13) rule -> . scan_func
    (14) rule -> . expression COLON
    (15) rule -> . expression
    (16) rule -> . cicloFor
    (17) rule -> . comparison
    (18) rule -> . logic_operation
    (19) rule -> . decVar COLON
    (20) rule -> . decVar
    (21) rule -> . decConst COLON
    (22) rule -> . decConst
    (23) rule -> . var_asignation
    (24) rule -> . var_asignation COLON
    (25) rule -> . funciones
    (26) rule -> . funciones COLON
    (27) rule -> . SenIF
    (28) rule -> . SenElseIF
    (29) rule -> . SenElse
    (30) rule -> . SenStruct
    (31) rule -> . cStruct
    (32) rule -> . switch_statement
    (33) rule -> . array_declaration COLON
    (34) rule -> . array_declaration
    (35) rule -> . array_var COLON
    (36) rule -> . array_var
    (37) rule -> . array_assignment COLON
    (38) rule -> . array_assignment
    (39) rule -> . slice_declaration COLON
    (40) rule -> . slice_declaration
    (41) rule -> . slice_var COLON
    (42) rule -> . slice_var
    (43) rule -> . slice_assignment COLON
    (44) rule -> . slice_assignment
    (45) rule -> . map_declaration COLON
    (46) rule -> . map_declaration
    (47) rule -> . map_assignment COLON
    (48) rule -> . map_assignment
    (49) rule -> . func_declaration
    (50) rule -> . main_func
    (9) more_rules -> . rule codigo
    (173) impresion -> . PRINT LPAREN something RPAREN
    (174) impresion -> . PRINT LPAREN error RPAREN
    (201) scan_func -> . SCAN LPAREN POINTER RPAREN
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (166) cicloFor -> . FOR comparison LLLAVE codigo RLLAVE
    (167) cicloFor -> . FOR logic_operation LLLAVE codigo RLLAVE
    (168) cicloFor -> . FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (112) decVar -> . static
    (113) decVar -> . dynamic
    (109) decConst -> . CONST ID data_type_and_value
    (110) decConst -> . CONST ID EQUAL ID
    (111) decConst -> . CONST ID EQUAL data_structure
    (77) var_asignation -> . ID EQUAL any
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (88) SenIF -> . IF comparison LLLAVE codigo RLLAVE
    (89) SenIF -> . IF logic_operation LLLAVE codigo RLLAVE
    (90) SenIF -> . IF TRUE LLLAVE codigo RLLAVE
    (91) SenIF -> . IF FALSE LLLAVE codigo RLLAVE
    (92) SenElseIF -> . ELSE IF comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> . ELSE IF logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> . ELSE IF TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> . ELSE IF FALSE LLLAVE codigo RLLAVE
    (96) SenElse -> . ELSE LLLAVE codigo RLLAVE
    (97) SenStruct -> . TYPE ID STRUCT LLLAVE declaration RLLAVE
    (101) cStruct -> . ID DEQUAL ID LLLAVE asignaciones RLLAVE
    (233) switch_statement -> . SWITCH ID LLLAVE cases RLLAVE
    (238) array_declaration -> . VAR ID LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> . VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (243) array_var -> . ID LCORCHE index RCORCHE
    (247) array_assignment -> . array_var EQUAL something
    (147) slice_declaration -> . VAR ID LCORCHE RCORCHE data_types
    (148) slice_declaration -> . VAR ID EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> . VAR ID EQUAL funM
    (150) slice_declaration -> . ID DEQUAL funM
    (151) slice_declaration -> . ID DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (161) slice_assignment -> . slice_var EQUAL something_s
    (248) map_declaration -> . VAR ID LCORCHE data_types RCORCHE data_types
    (253) map_assignment -> . map_var EQUAL something
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (114) static -> . single
    (115) static -> . multiple
    (124) dynamic -> . ID DEQUAL algo
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (249) map_var -> . ID LCORCHE key RCORCHE
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (120) single -> . VAR ID data_types
    (121) single -> . VAR ID data_types EQUAL funciones
    (122) single -> . VAR ID data_types EQUAL data_structure
    (123) single -> . VAR ID data_type_and_value
    (116) multiple -> . list_var data_types
    (117) list_var -> . VAR ID COMA more

    RETURN          shift and go to state 269
    PRINT           shift and go to state 62
    SCAN            shift and go to state 63
    FOR             shift and go to state 65
    CONST           shift and go to state 71
    ID              shift and go to state 72
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    IF              shift and go to state 79
    ELSE            shift and go to state 80
    TYPE            shift and go to state 81
    SWITCH          shift and go to state 82
    VAR             shift and go to state 83
    FUNC            shift and go to state 32
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    NOT             shift and go to state 87

    codigo                         shift and go to state 268
    rule                           shift and go to state 34
    more_rules                     shift and go to state 35
    impresion                      shift and go to state 36
    scan_func                      shift and go to state 37
    expression                     shift and go to state 38
    cicloFor                       shift and go to state 39
    comparison                     shift and go to state 40
    logic_operation                shift and go to state 41
    decVar                         shift and go to state 42
    decConst                       shift and go to state 43
    var_asignation                 shift and go to state 44
    funciones                      shift and go to state 45
    SenIF                          shift and go to state 46
    SenElseIF                      shift and go to state 47
    SenElse                        shift and go to state 48
    SenStruct                      shift and go to state 49
    cStruct                        shift and go to state 50
    switch_statement               shift and go to state 51
    array_declaration              shift and go to state 52
    array_var                      shift and go to state 53
    array_assignment               shift and go to state 54
    slice_declaration              shift and go to state 55
    slice_var                      shift and go to state 56
    slice_assignment               shift and go to state 57
    map_declaration                shift and go to state 58
    map_assignment                 shift and go to state 59
    func_declaration               shift and go to state 60
    main_func                      shift and go to state 61
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    static                         shift and go to state 69
    dynamic                        shift and go to state 70
    data_structure                 shift and go to state 73
    call_func                      shift and go to state 78
    map_var                        shift and go to state 84
    single                         shift and go to state 88
    multiple                       shift and go to state 89
    list_var                       shift and go to state 90

state 167

    (256) func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo . RLLAVE

    RLLAVE          shift and go to state 270


state 168

    (247) array_assignment -> array_var EQUAL something .

    COLON           reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    PRINT           reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    SCAN            reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    FOR             reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    CONST           reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    ID              reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    APPEND          reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    LEN             reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    COPY            reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    DELETE          reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    IF              reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    ELSE            reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    TYPE            reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    SWITCH          reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    VAR             reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    FUNC            reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    INTEGER         reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    FLOAT           reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    NOT             reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    RLLAVE          reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    RETURN          reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    STRING          reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    TRUE            reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    FALSE           reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    INT32           reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    INT64           reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    FLOAT32         reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    FLOAT64         reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    BYTE            reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    WFLOAT          reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    WSTRING         reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    WINT            reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    BOOL            reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    DEFAULT         reduce using rule 247 (array_assignment -> array_var EQUAL something .)
    CASE            reduce using rule 247 (array_assignment -> array_var EQUAL something .)


state 169

    (83) something -> ID .
    (243) array_var -> ID . LCORCHE index RCORCHE
    (249) map_var -> ID . LCORCHE key RCORCHE
    (157) slice_var -> ID . LCORCHE index_s RCORCHE
    (202) call_func -> ID . LPAREN list_params RPAREN
    (203) call_func -> ID . LPAREN RPAREN
    (179) something_ex -> ID .
    (139) value -> ID .
    (195) logic_value -> ID .

  ! reduce/reduce conflict for COLON resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for PRINT resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for SCAN resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for FOR resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for CONST resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for APPEND resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for LEN resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for COPY resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for DELETE resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for TYPE resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for SWITCH resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for VAR resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for FUNC resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for INTEGER resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for NOT resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for STRING resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for TRUE resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for FALSE resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for INT32 resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for INT64 resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for FLOAT32 resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for FLOAT64 resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for BYTE resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for WFLOAT resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for WSTRING resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for WINT resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for BOOL resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 83 (something -> ID .)
  ! reduce/reduce conflict for GREATER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for GREATER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for EQUAL_COMPARE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MOD resolved using rule 139 (value -> ID .)
    COLON           reduce using rule 83 (something -> ID .)
    PRINT           reduce using rule 83 (something -> ID .)
    SCAN            reduce using rule 83 (something -> ID .)
    FOR             reduce using rule 83 (something -> ID .)
    CONST           reduce using rule 83 (something -> ID .)
    ID              reduce using rule 83 (something -> ID .)
    APPEND          reduce using rule 83 (something -> ID .)
    LEN             reduce using rule 83 (something -> ID .)
    COPY            reduce using rule 83 (something -> ID .)
    DELETE          reduce using rule 83 (something -> ID .)
    IF              reduce using rule 83 (something -> ID .)
    ELSE            reduce using rule 83 (something -> ID .)
    TYPE            reduce using rule 83 (something -> ID .)
    SWITCH          reduce using rule 83 (something -> ID .)
    VAR             reduce using rule 83 (something -> ID .)
    FUNC            reduce using rule 83 (something -> ID .)
    INTEGER         reduce using rule 83 (something -> ID .)
    FLOAT           reduce using rule 83 (something -> ID .)
    NOT             reduce using rule 83 (something -> ID .)
    RLLAVE          reduce using rule 83 (something -> ID .)
    RETURN          reduce using rule 83 (something -> ID .)
    STRING          reduce using rule 83 (something -> ID .)
    TRUE            reduce using rule 83 (something -> ID .)
    FALSE           reduce using rule 83 (something -> ID .)
    INT32           reduce using rule 83 (something -> ID .)
    INT64           reduce using rule 83 (something -> ID .)
    FLOAT32         reduce using rule 83 (something -> ID .)
    FLOAT64         reduce using rule 83 (something -> ID .)
    BYTE            reduce using rule 83 (something -> ID .)
    WFLOAT          reduce using rule 83 (something -> ID .)
    WSTRING         reduce using rule 83 (something -> ID .)
    WINT            reduce using rule 83 (something -> ID .)
    BOOL            reduce using rule 83 (something -> ID .)
    DEFAULT         reduce using rule 83 (something -> ID .)
    CASE            reduce using rule 83 (something -> ID .)
    RPAREN          reduce using rule 83 (something -> ID .)
    LCORCHE         shift and go to state 196
    LPAREN          shift and go to state 146
    GREATER         reduce using rule 139 (value -> ID .)
    SMALLER         reduce using rule 139 (value -> ID .)
    GREATER_OR_EQUAL reduce using rule 139 (value -> ID .)
    SMALLER_OR_EQUAL reduce using rule 139 (value -> ID .)
    EQUAL_COMPARE   reduce using rule 139 (value -> ID .)
    NOT_EQUAL       reduce using rule 139 (value -> ID .)
    PLUS            reduce using rule 139 (value -> ID .)
    TIMES           reduce using rule 139 (value -> ID .)
    DIVIDE          reduce using rule 139 (value -> ID .)
    MINUS           reduce using rule 139 (value -> ID .)
    MOD             reduce using rule 139 (value -> ID .)
    AND             reduce using rule 195 (logic_value -> ID .)
    OR              reduce using rule 195 (logic_value -> ID .)

  ! GREATER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! GREATER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! EQUAL_COMPARE   [ reduce using rule 179 (something_ex -> ID .) ]
  ! NOT_EQUAL       [ reduce using rule 179 (something_ex -> ID .) ]
  ! PLUS            [ reduce using rule 179 (something_ex -> ID .) ]
  ! TIMES           [ reduce using rule 179 (something_ex -> ID .) ]
  ! DIVIDE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! MINUS           [ reduce using rule 179 (something_ex -> ID .) ]
  ! MOD             [ reduce using rule 179 (something_ex -> ID .) ]
  ! COLON           [ reduce using rule 179 (something_ex -> ID .) ]
  ! PRINT           [ reduce using rule 179 (something_ex -> ID .) ]
  ! SCAN            [ reduce using rule 179 (something_ex -> ID .) ]
  ! FOR             [ reduce using rule 179 (something_ex -> ID .) ]
  ! CONST           [ reduce using rule 179 (something_ex -> ID .) ]
  ! ID              [ reduce using rule 179 (something_ex -> ID .) ]
  ! APPEND          [ reduce using rule 179 (something_ex -> ID .) ]
  ! LEN             [ reduce using rule 179 (something_ex -> ID .) ]
  ! COPY            [ reduce using rule 179 (something_ex -> ID .) ]
  ! DELETE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! IF              [ reduce using rule 179 (something_ex -> ID .) ]
  ! ELSE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! TYPE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! SWITCH          [ reduce using rule 179 (something_ex -> ID .) ]
  ! VAR             [ reduce using rule 179 (something_ex -> ID .) ]
  ! FUNC            [ reduce using rule 179 (something_ex -> ID .) ]
  ! INTEGER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! FLOAT           [ reduce using rule 179 (something_ex -> ID .) ]
  ! NOT             [ reduce using rule 179 (something_ex -> ID .) ]
  ! RLLAVE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! RETURN          [ reduce using rule 179 (something_ex -> ID .) ]
  ! STRING          [ reduce using rule 179 (something_ex -> ID .) ]
  ! TRUE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! FALSE           [ reduce using rule 179 (something_ex -> ID .) ]
  ! INT32           [ reduce using rule 179 (something_ex -> ID .) ]
  ! INT64           [ reduce using rule 179 (something_ex -> ID .) ]
  ! FLOAT32         [ reduce using rule 179 (something_ex -> ID .) ]
  ! FLOAT64         [ reduce using rule 179 (something_ex -> ID .) ]
  ! BYTE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! WFLOAT          [ reduce using rule 179 (something_ex -> ID .) ]
  ! WSTRING         [ reduce using rule 179 (something_ex -> ID .) ]
  ! WINT            [ reduce using rule 179 (something_ex -> ID .) ]
  ! BOOL            [ reduce using rule 179 (something_ex -> ID .) ]
  ! DEFAULT         [ reduce using rule 179 (something_ex -> ID .) ]
  ! CASE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! RPAREN          [ reduce using rule 179 (something_ex -> ID .) ]


state 170

    (84) something -> data_structure .
    (182) something_ex -> data_structure .

  ! reduce/reduce conflict for COLON resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for PRINT resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for SCAN resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for FOR resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for CONST resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for ID resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for APPEND resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for LEN resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for COPY resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for DELETE resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for IF resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for ELSE resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for TYPE resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for SWITCH resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for VAR resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for FUNC resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for INTEGER resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for FLOAT resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for NOT resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for RETURN resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for STRING resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for TRUE resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for FALSE resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for INT32 resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for INT64 resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for FLOAT32 resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for FLOAT64 resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for BYTE resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for WFLOAT resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for WSTRING resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for WINT resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for BOOL resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for CASE resolved using rule 84 (something -> data_structure .)
  ! reduce/reduce conflict for RPAREN resolved using rule 84 (something -> data_structure .)
    COLON           reduce using rule 84 (something -> data_structure .)
    PRINT           reduce using rule 84 (something -> data_structure .)
    SCAN            reduce using rule 84 (something -> data_structure .)
    FOR             reduce using rule 84 (something -> data_structure .)
    CONST           reduce using rule 84 (something -> data_structure .)
    ID              reduce using rule 84 (something -> data_structure .)
    APPEND          reduce using rule 84 (something -> data_structure .)
    LEN             reduce using rule 84 (something -> data_structure .)
    COPY            reduce using rule 84 (something -> data_structure .)
    DELETE          reduce using rule 84 (something -> data_structure .)
    IF              reduce using rule 84 (something -> data_structure .)
    ELSE            reduce using rule 84 (something -> data_structure .)
    TYPE            reduce using rule 84 (something -> data_structure .)
    SWITCH          reduce using rule 84 (something -> data_structure .)
    VAR             reduce using rule 84 (something -> data_structure .)
    FUNC            reduce using rule 84 (something -> data_structure .)
    INTEGER         reduce using rule 84 (something -> data_structure .)
    FLOAT           reduce using rule 84 (something -> data_structure .)
    NOT             reduce using rule 84 (something -> data_structure .)
    RLLAVE          reduce using rule 84 (something -> data_structure .)
    RETURN          reduce using rule 84 (something -> data_structure .)
    STRING          reduce using rule 84 (something -> data_structure .)
    TRUE            reduce using rule 84 (something -> data_structure .)
    FALSE           reduce using rule 84 (something -> data_structure .)
    INT32           reduce using rule 84 (something -> data_structure .)
    INT64           reduce using rule 84 (something -> data_structure .)
    FLOAT32         reduce using rule 84 (something -> data_structure .)
    FLOAT64         reduce using rule 84 (something -> data_structure .)
    BYTE            reduce using rule 84 (something -> data_structure .)
    WFLOAT          reduce using rule 84 (something -> data_structure .)
    WSTRING         reduce using rule 84 (something -> data_structure .)
    WINT            reduce using rule 84 (something -> data_structure .)
    BOOL            reduce using rule 84 (something -> data_structure .)
    DEFAULT         reduce using rule 84 (something -> data_structure .)
    CASE            reduce using rule 84 (something -> data_structure .)
    RPAREN          reduce using rule 84 (something -> data_structure .)
    GREATER         reduce using rule 182 (something_ex -> data_structure .)
    SMALLER         reduce using rule 182 (something_ex -> data_structure .)
    GREATER_OR_EQUAL reduce using rule 182 (something_ex -> data_structure .)
    SMALLER_OR_EQUAL reduce using rule 182 (something_ex -> data_structure .)
    EQUAL_COMPARE   reduce using rule 182 (something_ex -> data_structure .)
    NOT_EQUAL       reduce using rule 182 (something_ex -> data_structure .)
    PLUS            reduce using rule 182 (something_ex -> data_structure .)
    TIMES           reduce using rule 182 (something_ex -> data_structure .)
    DIVIDE          reduce using rule 182 (something_ex -> data_structure .)
    MINUS           reduce using rule 182 (something_ex -> data_structure .)
    MOD             reduce using rule 182 (something_ex -> data_structure .)

  ! COLON           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! PRINT           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! SCAN            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! FOR             [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! CONST           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! ID              [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! APPEND          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! LEN             [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! COPY            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! DELETE          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! IF              [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! ELSE            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! TYPE            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! SWITCH          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! VAR             [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! FUNC            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! INTEGER         [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! FLOAT           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! NOT             [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! RLLAVE          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! RETURN          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! STRING          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! TRUE            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! FALSE           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! INT32           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! INT64           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! FLOAT32         [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! FLOAT64         [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! BYTE            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! WFLOAT          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! WSTRING         [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! WINT            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! BOOL            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! DEFAULT         [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! CASE            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! RPAREN          [ reduce using rule 182 (something_ex -> data_structure .) ]


state 171

    (85) something -> values .

    COLON           reduce using rule 85 (something -> values .)
    PRINT           reduce using rule 85 (something -> values .)
    SCAN            reduce using rule 85 (something -> values .)
    FOR             reduce using rule 85 (something -> values .)
    CONST           reduce using rule 85 (something -> values .)
    ID              reduce using rule 85 (something -> values .)
    APPEND          reduce using rule 85 (something -> values .)
    LEN             reduce using rule 85 (something -> values .)
    COPY            reduce using rule 85 (something -> values .)
    DELETE          reduce using rule 85 (something -> values .)
    IF              reduce using rule 85 (something -> values .)
    ELSE            reduce using rule 85 (something -> values .)
    TYPE            reduce using rule 85 (something -> values .)
    SWITCH          reduce using rule 85 (something -> values .)
    VAR             reduce using rule 85 (something -> values .)
    FUNC            reduce using rule 85 (something -> values .)
    INTEGER         reduce using rule 85 (something -> values .)
    FLOAT           reduce using rule 85 (something -> values .)
    NOT             reduce using rule 85 (something -> values .)
    RLLAVE          reduce using rule 85 (something -> values .)
    RETURN          reduce using rule 85 (something -> values .)
    STRING          reduce using rule 85 (something -> values .)
    TRUE            reduce using rule 85 (something -> values .)
    FALSE           reduce using rule 85 (something -> values .)
    INT32           reduce using rule 85 (something -> values .)
    INT64           reduce using rule 85 (something -> values .)
    FLOAT32         reduce using rule 85 (something -> values .)
    FLOAT64         reduce using rule 85 (something -> values .)
    BYTE            reduce using rule 85 (something -> values .)
    WFLOAT          reduce using rule 85 (something -> values .)
    WSTRING         reduce using rule 85 (something -> values .)
    WINT            reduce using rule 85 (something -> values .)
    BOOL            reduce using rule 85 (something -> values .)
    DEFAULT         reduce using rule 85 (something -> values .)
    CASE            reduce using rule 85 (something -> values .)
    RPAREN          reduce using rule 85 (something -> values .)


state 172

    (86) something -> operations .

    COLON           reduce using rule 86 (something -> operations .)
    PRINT           reduce using rule 86 (something -> operations .)
    SCAN            reduce using rule 86 (something -> operations .)
    FOR             reduce using rule 86 (something -> operations .)
    CONST           reduce using rule 86 (something -> operations .)
    ID              reduce using rule 86 (something -> operations .)
    APPEND          reduce using rule 86 (something -> operations .)
    LEN             reduce using rule 86 (something -> operations .)
    COPY            reduce using rule 86 (something -> operations .)
    DELETE          reduce using rule 86 (something -> operations .)
    IF              reduce using rule 86 (something -> operations .)
    ELSE            reduce using rule 86 (something -> operations .)
    TYPE            reduce using rule 86 (something -> operations .)
    SWITCH          reduce using rule 86 (something -> operations .)
    VAR             reduce using rule 86 (something -> operations .)
    FUNC            reduce using rule 86 (something -> operations .)
    INTEGER         reduce using rule 86 (something -> operations .)
    FLOAT           reduce using rule 86 (something -> operations .)
    NOT             reduce using rule 86 (something -> operations .)
    RLLAVE          reduce using rule 86 (something -> operations .)
    RETURN          reduce using rule 86 (something -> operations .)
    STRING          reduce using rule 86 (something -> operations .)
    TRUE            reduce using rule 86 (something -> operations .)
    FALSE           reduce using rule 86 (something -> operations .)
    INT32           reduce using rule 86 (something -> operations .)
    INT64           reduce using rule 86 (something -> operations .)
    FLOAT32         reduce using rule 86 (something -> operations .)
    FLOAT64         reduce using rule 86 (something -> operations .)
    BYTE            reduce using rule 86 (something -> operations .)
    WFLOAT          reduce using rule 86 (something -> operations .)
    WSTRING         reduce using rule 86 (something -> operations .)
    WINT            reduce using rule 86 (something -> operations .)
    BOOL            reduce using rule 86 (something -> operations .)
    DEFAULT         reduce using rule 86 (something -> operations .)
    CASE            reduce using rule 86 (something -> operations .)
    RPAREN          reduce using rule 86 (something -> operations .)


state 173

    (87) something -> funciones .
    (183) something_ex -> funciones .

  ! reduce/reduce conflict for COLON resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for PRINT resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for SCAN resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for FOR resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for CONST resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for ID resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for APPEND resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for LEN resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for COPY resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for DELETE resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for IF resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for ELSE resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for TYPE resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for SWITCH resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for VAR resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for FUNC resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for INTEGER resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for FLOAT resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for NOT resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for RETURN resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for STRING resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for TRUE resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for FALSE resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for INT32 resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for INT64 resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for FLOAT32 resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for FLOAT64 resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for BYTE resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for WFLOAT resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for WSTRING resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for WINT resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for BOOL resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for CASE resolved using rule 87 (something -> funciones .)
  ! reduce/reduce conflict for RPAREN resolved using rule 87 (something -> funciones .)
    COLON           reduce using rule 87 (something -> funciones .)
    PRINT           reduce using rule 87 (something -> funciones .)
    SCAN            reduce using rule 87 (something -> funciones .)
    FOR             reduce using rule 87 (something -> funciones .)
    CONST           reduce using rule 87 (something -> funciones .)
    ID              reduce using rule 87 (something -> funciones .)
    APPEND          reduce using rule 87 (something -> funciones .)
    LEN             reduce using rule 87 (something -> funciones .)
    COPY            reduce using rule 87 (something -> funciones .)
    DELETE          reduce using rule 87 (something -> funciones .)
    IF              reduce using rule 87 (something -> funciones .)
    ELSE            reduce using rule 87 (something -> funciones .)
    TYPE            reduce using rule 87 (something -> funciones .)
    SWITCH          reduce using rule 87 (something -> funciones .)
    VAR             reduce using rule 87 (something -> funciones .)
    FUNC            reduce using rule 87 (something -> funciones .)
    INTEGER         reduce using rule 87 (something -> funciones .)
    FLOAT           reduce using rule 87 (something -> funciones .)
    NOT             reduce using rule 87 (something -> funciones .)
    RLLAVE          reduce using rule 87 (something -> funciones .)
    RETURN          reduce using rule 87 (something -> funciones .)
    STRING          reduce using rule 87 (something -> funciones .)
    TRUE            reduce using rule 87 (something -> funciones .)
    FALSE           reduce using rule 87 (something -> funciones .)
    INT32           reduce using rule 87 (something -> funciones .)
    INT64           reduce using rule 87 (something -> funciones .)
    FLOAT32         reduce using rule 87 (something -> funciones .)
    FLOAT64         reduce using rule 87 (something -> funciones .)
    BYTE            reduce using rule 87 (something -> funciones .)
    WFLOAT          reduce using rule 87 (something -> funciones .)
    WSTRING         reduce using rule 87 (something -> funciones .)
    WINT            reduce using rule 87 (something -> funciones .)
    BOOL            reduce using rule 87 (something -> funciones .)
    DEFAULT         reduce using rule 87 (something -> funciones .)
    CASE            reduce using rule 87 (something -> funciones .)
    RPAREN          reduce using rule 87 (something -> funciones .)
    GREATER         reduce using rule 183 (something_ex -> funciones .)
    SMALLER         reduce using rule 183 (something_ex -> funciones .)
    GREATER_OR_EQUAL reduce using rule 183 (something_ex -> funciones .)
    SMALLER_OR_EQUAL reduce using rule 183 (something_ex -> funciones .)
    EQUAL_COMPARE   reduce using rule 183 (something_ex -> funciones .)
    NOT_EQUAL       reduce using rule 183 (something_ex -> funciones .)
    PLUS            reduce using rule 183 (something_ex -> funciones .)
    TIMES           reduce using rule 183 (something_ex -> funciones .)
    DIVIDE          reduce using rule 183 (something_ex -> funciones .)
    MINUS           reduce using rule 183 (something_ex -> funciones .)
    MOD             reduce using rule 183 (something_ex -> funciones .)

  ! COLON           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! PRINT           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! SCAN            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FOR             [ reduce using rule 183 (something_ex -> funciones .) ]
  ! CONST           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! ID              [ reduce using rule 183 (something_ex -> funciones .) ]
  ! APPEND          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! LEN             [ reduce using rule 183 (something_ex -> funciones .) ]
  ! COPY            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! DELETE          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! IF              [ reduce using rule 183 (something_ex -> funciones .) ]
  ! ELSE            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! TYPE            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! SWITCH          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! VAR             [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FUNC            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! INTEGER         [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FLOAT           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! NOT             [ reduce using rule 183 (something_ex -> funciones .) ]
  ! RLLAVE          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! RETURN          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! STRING          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! TRUE            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FALSE           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! INT32           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! INT64           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FLOAT32         [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FLOAT64         [ reduce using rule 183 (something_ex -> funciones .) ]
  ! BYTE            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! WFLOAT          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! WSTRING         [ reduce using rule 183 (something_ex -> funciones .) ]
  ! WINT            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! BOOL            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! DEFAULT         [ reduce using rule 183 (something_ex -> funciones .) ]
  ! CASE            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! RPAREN          [ reduce using rule 183 (something_ex -> funciones .) ]


state 174

    (51) values -> STRING .

    COLON           reduce using rule 51 (values -> STRING .)
    PRINT           reduce using rule 51 (values -> STRING .)
    SCAN            reduce using rule 51 (values -> STRING .)
    FOR             reduce using rule 51 (values -> STRING .)
    CONST           reduce using rule 51 (values -> STRING .)
    ID              reduce using rule 51 (values -> STRING .)
    APPEND          reduce using rule 51 (values -> STRING .)
    LEN             reduce using rule 51 (values -> STRING .)
    COPY            reduce using rule 51 (values -> STRING .)
    DELETE          reduce using rule 51 (values -> STRING .)
    IF              reduce using rule 51 (values -> STRING .)
    ELSE            reduce using rule 51 (values -> STRING .)
    TYPE            reduce using rule 51 (values -> STRING .)
    SWITCH          reduce using rule 51 (values -> STRING .)
    VAR             reduce using rule 51 (values -> STRING .)
    FUNC            reduce using rule 51 (values -> STRING .)
    INTEGER         reduce using rule 51 (values -> STRING .)
    FLOAT           reduce using rule 51 (values -> STRING .)
    NOT             reduce using rule 51 (values -> STRING .)
    RLLAVE          reduce using rule 51 (values -> STRING .)
    RETURN          reduce using rule 51 (values -> STRING .)
    STRING          reduce using rule 51 (values -> STRING .)
    TRUE            reduce using rule 51 (values -> STRING .)
    FALSE           reduce using rule 51 (values -> STRING .)
    INT32           reduce using rule 51 (values -> STRING .)
    INT64           reduce using rule 51 (values -> STRING .)
    FLOAT32         reduce using rule 51 (values -> STRING .)
    FLOAT64         reduce using rule 51 (values -> STRING .)
    BYTE            reduce using rule 51 (values -> STRING .)
    WFLOAT          reduce using rule 51 (values -> STRING .)
    WSTRING         reduce using rule 51 (values -> STRING .)
    WINT            reduce using rule 51 (values -> STRING .)
    BOOL            reduce using rule 51 (values -> STRING .)
    DEFAULT         reduce using rule 51 (values -> STRING .)
    CASE            reduce using rule 51 (values -> STRING .)
    RPAREN          reduce using rule 51 (values -> STRING .)
    RCORCHE         reduce using rule 51 (values -> STRING .)
    POINTS          reduce using rule 51 (values -> STRING .)
    COMA            reduce using rule 51 (values -> STRING .)


state 175

    (52) values -> INTEGER .
    (180) something_ex -> INTEGER .

  ! reduce/reduce conflict for COLON resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for PRINT resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for SCAN resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for FOR resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for CONST resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for ID resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for APPEND resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for LEN resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for COPY resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for DELETE resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for IF resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for ELSE resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for TYPE resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for SWITCH resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for VAR resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for FUNC resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for INTEGER resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for RETURN resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for STRING resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for TRUE resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for FALSE resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for INT32 resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for INT64 resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for FLOAT32 resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for FLOAT64 resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for BYTE resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for WFLOAT resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for WSTRING resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for WINT resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for BOOL resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for CASE resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for COMA resolved using rule 52 (values -> INTEGER .)
    COLON           reduce using rule 52 (values -> INTEGER .)
    PRINT           reduce using rule 52 (values -> INTEGER .)
    SCAN            reduce using rule 52 (values -> INTEGER .)
    FOR             reduce using rule 52 (values -> INTEGER .)
    CONST           reduce using rule 52 (values -> INTEGER .)
    ID              reduce using rule 52 (values -> INTEGER .)
    APPEND          reduce using rule 52 (values -> INTEGER .)
    LEN             reduce using rule 52 (values -> INTEGER .)
    COPY            reduce using rule 52 (values -> INTEGER .)
    DELETE          reduce using rule 52 (values -> INTEGER .)
    IF              reduce using rule 52 (values -> INTEGER .)
    ELSE            reduce using rule 52 (values -> INTEGER .)
    TYPE            reduce using rule 52 (values -> INTEGER .)
    SWITCH          reduce using rule 52 (values -> INTEGER .)
    VAR             reduce using rule 52 (values -> INTEGER .)
    FUNC            reduce using rule 52 (values -> INTEGER .)
    INTEGER         reduce using rule 52 (values -> INTEGER .)
    FLOAT           reduce using rule 52 (values -> INTEGER .)
    NOT             reduce using rule 52 (values -> INTEGER .)
    RLLAVE          reduce using rule 52 (values -> INTEGER .)
    RETURN          reduce using rule 52 (values -> INTEGER .)
    STRING          reduce using rule 52 (values -> INTEGER .)
    TRUE            reduce using rule 52 (values -> INTEGER .)
    FALSE           reduce using rule 52 (values -> INTEGER .)
    INT32           reduce using rule 52 (values -> INTEGER .)
    INT64           reduce using rule 52 (values -> INTEGER .)
    FLOAT32         reduce using rule 52 (values -> INTEGER .)
    FLOAT64         reduce using rule 52 (values -> INTEGER .)
    BYTE            reduce using rule 52 (values -> INTEGER .)
    WFLOAT          reduce using rule 52 (values -> INTEGER .)
    WSTRING         reduce using rule 52 (values -> INTEGER .)
    WINT            reduce using rule 52 (values -> INTEGER .)
    BOOL            reduce using rule 52 (values -> INTEGER .)
    DEFAULT         reduce using rule 52 (values -> INTEGER .)
    CASE            reduce using rule 52 (values -> INTEGER .)
    RPAREN          reduce using rule 52 (values -> INTEGER .)
    COMA            reduce using rule 52 (values -> INTEGER .)
    GREATER         reduce using rule 180 (something_ex -> INTEGER .)
    SMALLER         reduce using rule 180 (something_ex -> INTEGER .)
    GREATER_OR_EQUAL reduce using rule 180 (something_ex -> INTEGER .)
    SMALLER_OR_EQUAL reduce using rule 180 (something_ex -> INTEGER .)
    EQUAL_COMPARE   reduce using rule 180 (something_ex -> INTEGER .)
    NOT_EQUAL       reduce using rule 180 (something_ex -> INTEGER .)
    PLUS            reduce using rule 180 (something_ex -> INTEGER .)
    TIMES           reduce using rule 180 (something_ex -> INTEGER .)
    DIVIDE          reduce using rule 180 (something_ex -> INTEGER .)
    MINUS           reduce using rule 180 (something_ex -> INTEGER .)
    MOD             reduce using rule 180 (something_ex -> INTEGER .)

  ! COLON           [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! PRINT           [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! SCAN            [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! FOR             [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! CONST           [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! ID              [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! APPEND          [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! LEN             [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! COPY            [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! DELETE          [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! IF              [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! ELSE            [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! TYPE            [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! SWITCH          [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! VAR             [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! FUNC            [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! INTEGER         [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! FLOAT           [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! NOT             [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! RLLAVE          [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! RETURN          [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! STRING          [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! TRUE            [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! FALSE           [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! INT32           [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! INT64           [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! FLOAT32         [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! FLOAT64         [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! BYTE            [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! WFLOAT          [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! WSTRING         [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! WINT            [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! BOOL            [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! DEFAULT         [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! CASE            [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! RPAREN          [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! COMA            [ reduce using rule 180 (something_ex -> INTEGER .) ]


state 176

    (53) values -> FLOAT .
    (181) something_ex -> FLOAT .

  ! reduce/reduce conflict for COLON resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for PRINT resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for SCAN resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for FOR resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for CONST resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for ID resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for APPEND resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for LEN resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for COPY resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for DELETE resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for IF resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for ELSE resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for TYPE resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for SWITCH resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for VAR resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for FUNC resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for INTEGER resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for FLOAT resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for RETURN resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for STRING resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for TRUE resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for FALSE resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for INT32 resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for INT64 resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for FLOAT32 resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for FLOAT64 resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for BYTE resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for WFLOAT resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for WSTRING resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for WINT resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for BOOL resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for CASE resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for RCORCHE resolved using rule 53 (values -> FLOAT .)
  ! reduce/reduce conflict for COMA resolved using rule 53 (values -> FLOAT .)
    COLON           reduce using rule 53 (values -> FLOAT .)
    PRINT           reduce using rule 53 (values -> FLOAT .)
    SCAN            reduce using rule 53 (values -> FLOAT .)
    FOR             reduce using rule 53 (values -> FLOAT .)
    CONST           reduce using rule 53 (values -> FLOAT .)
    ID              reduce using rule 53 (values -> FLOAT .)
    APPEND          reduce using rule 53 (values -> FLOAT .)
    LEN             reduce using rule 53 (values -> FLOAT .)
    COPY            reduce using rule 53 (values -> FLOAT .)
    DELETE          reduce using rule 53 (values -> FLOAT .)
    IF              reduce using rule 53 (values -> FLOAT .)
    ELSE            reduce using rule 53 (values -> FLOAT .)
    TYPE            reduce using rule 53 (values -> FLOAT .)
    SWITCH          reduce using rule 53 (values -> FLOAT .)
    VAR             reduce using rule 53 (values -> FLOAT .)
    FUNC            reduce using rule 53 (values -> FLOAT .)
    INTEGER         reduce using rule 53 (values -> FLOAT .)
    FLOAT           reduce using rule 53 (values -> FLOAT .)
    NOT             reduce using rule 53 (values -> FLOAT .)
    RLLAVE          reduce using rule 53 (values -> FLOAT .)
    RETURN          reduce using rule 53 (values -> FLOAT .)
    STRING          reduce using rule 53 (values -> FLOAT .)
    TRUE            reduce using rule 53 (values -> FLOAT .)
    FALSE           reduce using rule 53 (values -> FLOAT .)
    INT32           reduce using rule 53 (values -> FLOAT .)
    INT64           reduce using rule 53 (values -> FLOAT .)
    FLOAT32         reduce using rule 53 (values -> FLOAT .)
    FLOAT64         reduce using rule 53 (values -> FLOAT .)
    BYTE            reduce using rule 53 (values -> FLOAT .)
    WFLOAT          reduce using rule 53 (values -> FLOAT .)
    WSTRING         reduce using rule 53 (values -> FLOAT .)
    WINT            reduce using rule 53 (values -> FLOAT .)
    BOOL            reduce using rule 53 (values -> FLOAT .)
    DEFAULT         reduce using rule 53 (values -> FLOAT .)
    CASE            reduce using rule 53 (values -> FLOAT .)
    RPAREN          reduce using rule 53 (values -> FLOAT .)
    RCORCHE         reduce using rule 53 (values -> FLOAT .)
    COMA            reduce using rule 53 (values -> FLOAT .)
    GREATER         reduce using rule 181 (something_ex -> FLOAT .)
    SMALLER         reduce using rule 181 (something_ex -> FLOAT .)
    GREATER_OR_EQUAL reduce using rule 181 (something_ex -> FLOAT .)
    SMALLER_OR_EQUAL reduce using rule 181 (something_ex -> FLOAT .)
    EQUAL_COMPARE   reduce using rule 181 (something_ex -> FLOAT .)
    NOT_EQUAL       reduce using rule 181 (something_ex -> FLOAT .)
    PLUS            reduce using rule 181 (something_ex -> FLOAT .)
    TIMES           reduce using rule 181 (something_ex -> FLOAT .)
    DIVIDE          reduce using rule 181 (something_ex -> FLOAT .)
    MINUS           reduce using rule 181 (something_ex -> FLOAT .)
    MOD             reduce using rule 181 (something_ex -> FLOAT .)

  ! COLON           [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! PRINT           [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! SCAN            [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! FOR             [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! CONST           [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! ID              [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! APPEND          [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! LEN             [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! COPY            [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! DELETE          [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! IF              [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! ELSE            [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! TYPE            [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! SWITCH          [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! VAR             [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! FUNC            [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! INTEGER         [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! FLOAT           [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! NOT             [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! RLLAVE          [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! RETURN          [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! STRING          [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! TRUE            [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! FALSE           [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! INT32           [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! INT64           [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! FLOAT32         [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! FLOAT64         [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! BYTE            [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! WFLOAT          [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! WSTRING         [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! WINT            [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! BOOL            [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! DEFAULT         [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! CASE            [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! RPAREN          [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! RCORCHE         [ reduce using rule 181 (something_ex -> FLOAT .) ]
  ! COMA            [ reduce using rule 181 (something_ex -> FLOAT .) ]


state 177

    (54) values -> TRUE .

    COLON           reduce using rule 54 (values -> TRUE .)
    PRINT           reduce using rule 54 (values -> TRUE .)
    SCAN            reduce using rule 54 (values -> TRUE .)
    FOR             reduce using rule 54 (values -> TRUE .)
    CONST           reduce using rule 54 (values -> TRUE .)
    ID              reduce using rule 54 (values -> TRUE .)
    APPEND          reduce using rule 54 (values -> TRUE .)
    LEN             reduce using rule 54 (values -> TRUE .)
    COPY            reduce using rule 54 (values -> TRUE .)
    DELETE          reduce using rule 54 (values -> TRUE .)
    IF              reduce using rule 54 (values -> TRUE .)
    ELSE            reduce using rule 54 (values -> TRUE .)
    TYPE            reduce using rule 54 (values -> TRUE .)
    SWITCH          reduce using rule 54 (values -> TRUE .)
    VAR             reduce using rule 54 (values -> TRUE .)
    FUNC            reduce using rule 54 (values -> TRUE .)
    INTEGER         reduce using rule 54 (values -> TRUE .)
    FLOAT           reduce using rule 54 (values -> TRUE .)
    NOT             reduce using rule 54 (values -> TRUE .)
    RLLAVE          reduce using rule 54 (values -> TRUE .)
    RETURN          reduce using rule 54 (values -> TRUE .)
    STRING          reduce using rule 54 (values -> TRUE .)
    TRUE            reduce using rule 54 (values -> TRUE .)
    FALSE           reduce using rule 54 (values -> TRUE .)
    INT32           reduce using rule 54 (values -> TRUE .)
    INT64           reduce using rule 54 (values -> TRUE .)
    FLOAT32         reduce using rule 54 (values -> TRUE .)
    FLOAT64         reduce using rule 54 (values -> TRUE .)
    BYTE            reduce using rule 54 (values -> TRUE .)
    WFLOAT          reduce using rule 54 (values -> TRUE .)
    WSTRING         reduce using rule 54 (values -> TRUE .)
    WINT            reduce using rule 54 (values -> TRUE .)
    BOOL            reduce using rule 54 (values -> TRUE .)
    DEFAULT         reduce using rule 54 (values -> TRUE .)
    CASE            reduce using rule 54 (values -> TRUE .)
    RPAREN          reduce using rule 54 (values -> TRUE .)
    RCORCHE         reduce using rule 54 (values -> TRUE .)
    POINTS          reduce using rule 54 (values -> TRUE .)
    COMA            reduce using rule 54 (values -> TRUE .)


state 178

    (55) values -> FALSE .

    COLON           reduce using rule 55 (values -> FALSE .)
    PRINT           reduce using rule 55 (values -> FALSE .)
    SCAN            reduce using rule 55 (values -> FALSE .)
    FOR             reduce using rule 55 (values -> FALSE .)
    CONST           reduce using rule 55 (values -> FALSE .)
    ID              reduce using rule 55 (values -> FALSE .)
    APPEND          reduce using rule 55 (values -> FALSE .)
    LEN             reduce using rule 55 (values -> FALSE .)
    COPY            reduce using rule 55 (values -> FALSE .)
    DELETE          reduce using rule 55 (values -> FALSE .)
    IF              reduce using rule 55 (values -> FALSE .)
    ELSE            reduce using rule 55 (values -> FALSE .)
    TYPE            reduce using rule 55 (values -> FALSE .)
    SWITCH          reduce using rule 55 (values -> FALSE .)
    VAR             reduce using rule 55 (values -> FALSE .)
    FUNC            reduce using rule 55 (values -> FALSE .)
    INTEGER         reduce using rule 55 (values -> FALSE .)
    FLOAT           reduce using rule 55 (values -> FALSE .)
    NOT             reduce using rule 55 (values -> FALSE .)
    RLLAVE          reduce using rule 55 (values -> FALSE .)
    RETURN          reduce using rule 55 (values -> FALSE .)
    STRING          reduce using rule 55 (values -> FALSE .)
    TRUE            reduce using rule 55 (values -> FALSE .)
    FALSE           reduce using rule 55 (values -> FALSE .)
    INT32           reduce using rule 55 (values -> FALSE .)
    INT64           reduce using rule 55 (values -> FALSE .)
    FLOAT32         reduce using rule 55 (values -> FALSE .)
    FLOAT64         reduce using rule 55 (values -> FALSE .)
    BYTE            reduce using rule 55 (values -> FALSE .)
    WFLOAT          reduce using rule 55 (values -> FALSE .)
    WSTRING         reduce using rule 55 (values -> FALSE .)
    WINT            reduce using rule 55 (values -> FALSE .)
    BOOL            reduce using rule 55 (values -> FALSE .)
    DEFAULT         reduce using rule 55 (values -> FALSE .)
    CASE            reduce using rule 55 (values -> FALSE .)
    RPAREN          reduce using rule 55 (values -> FALSE .)
    RCORCHE         reduce using rule 55 (values -> FALSE .)
    POINTS          reduce using rule 55 (values -> FALSE .)
    COMA            reduce using rule 55 (values -> FALSE .)


state 179

    (65) operations -> expression .
    (140) value -> expression .

    COLON           reduce using rule 65 (operations -> expression .)
    PRINT           reduce using rule 65 (operations -> expression .)
    SCAN            reduce using rule 65 (operations -> expression .)
    FOR             reduce using rule 65 (operations -> expression .)
    CONST           reduce using rule 65 (operations -> expression .)
    ID              reduce using rule 65 (operations -> expression .)
    APPEND          reduce using rule 65 (operations -> expression .)
    LEN             reduce using rule 65 (operations -> expression .)
    COPY            reduce using rule 65 (operations -> expression .)
    DELETE          reduce using rule 65 (operations -> expression .)
    IF              reduce using rule 65 (operations -> expression .)
    ELSE            reduce using rule 65 (operations -> expression .)
    TYPE            reduce using rule 65 (operations -> expression .)
    SWITCH          reduce using rule 65 (operations -> expression .)
    VAR             reduce using rule 65 (operations -> expression .)
    FUNC            reduce using rule 65 (operations -> expression .)
    INTEGER         reduce using rule 65 (operations -> expression .)
    FLOAT           reduce using rule 65 (operations -> expression .)
    NOT             reduce using rule 65 (operations -> expression .)
    RLLAVE          reduce using rule 65 (operations -> expression .)
    RETURN          reduce using rule 65 (operations -> expression .)
    STRING          reduce using rule 65 (operations -> expression .)
    TRUE            reduce using rule 65 (operations -> expression .)
    FALSE           reduce using rule 65 (operations -> expression .)
    INT32           reduce using rule 65 (operations -> expression .)
    INT64           reduce using rule 65 (operations -> expression .)
    FLOAT32         reduce using rule 65 (operations -> expression .)
    FLOAT64         reduce using rule 65 (operations -> expression .)
    BYTE            reduce using rule 65 (operations -> expression .)
    WFLOAT          reduce using rule 65 (operations -> expression .)
    WSTRING         reduce using rule 65 (operations -> expression .)
    WINT            reduce using rule 65 (operations -> expression .)
    BOOL            reduce using rule 65 (operations -> expression .)
    DEFAULT         reduce using rule 65 (operations -> expression .)
    CASE            reduce using rule 65 (operations -> expression .)
    RPAREN          reduce using rule 65 (operations -> expression .)
    COMA            reduce using rule 65 (operations -> expression .)
    GREATER         reduce using rule 140 (value -> expression .)
    SMALLER         reduce using rule 140 (value -> expression .)
    GREATER_OR_EQUAL reduce using rule 140 (value -> expression .)
    SMALLER_OR_EQUAL reduce using rule 140 (value -> expression .)
    EQUAL_COMPARE   reduce using rule 140 (value -> expression .)
    NOT_EQUAL       reduce using rule 140 (value -> expression .)
    PLUS            reduce using rule 140 (value -> expression .)
    TIMES           reduce using rule 140 (value -> expression .)
    DIVIDE          reduce using rule 140 (value -> expression .)
    MINUS           reduce using rule 140 (value -> expression .)
    MOD             reduce using rule 140 (value -> expression .)


state 180

    (66) operations -> comparison .
    (194) logic_value -> comparison .

    COLON           reduce using rule 66 (operations -> comparison .)
    PRINT           reduce using rule 66 (operations -> comparison .)
    SCAN            reduce using rule 66 (operations -> comparison .)
    FOR             reduce using rule 66 (operations -> comparison .)
    CONST           reduce using rule 66 (operations -> comparison .)
    ID              reduce using rule 66 (operations -> comparison .)
    APPEND          reduce using rule 66 (operations -> comparison .)
    LEN             reduce using rule 66 (operations -> comparison .)
    COPY            reduce using rule 66 (operations -> comparison .)
    DELETE          reduce using rule 66 (operations -> comparison .)
    IF              reduce using rule 66 (operations -> comparison .)
    ELSE            reduce using rule 66 (operations -> comparison .)
    TYPE            reduce using rule 66 (operations -> comparison .)
    SWITCH          reduce using rule 66 (operations -> comparison .)
    VAR             reduce using rule 66 (operations -> comparison .)
    FUNC            reduce using rule 66 (operations -> comparison .)
    INTEGER         reduce using rule 66 (operations -> comparison .)
    FLOAT           reduce using rule 66 (operations -> comparison .)
    NOT             reduce using rule 66 (operations -> comparison .)
    RLLAVE          reduce using rule 66 (operations -> comparison .)
    RETURN          reduce using rule 66 (operations -> comparison .)
    STRING          reduce using rule 66 (operations -> comparison .)
    TRUE            reduce using rule 66 (operations -> comparison .)
    FALSE           reduce using rule 66 (operations -> comparison .)
    INT32           reduce using rule 66 (operations -> comparison .)
    INT64           reduce using rule 66 (operations -> comparison .)
    FLOAT32         reduce using rule 66 (operations -> comparison .)
    FLOAT64         reduce using rule 66 (operations -> comparison .)
    BYTE            reduce using rule 66 (operations -> comparison .)
    WFLOAT          reduce using rule 66 (operations -> comparison .)
    WSTRING         reduce using rule 66 (operations -> comparison .)
    WINT            reduce using rule 66 (operations -> comparison .)
    BOOL            reduce using rule 66 (operations -> comparison .)
    DEFAULT         reduce using rule 66 (operations -> comparison .)
    CASE            reduce using rule 66 (operations -> comparison .)
    RPAREN          reduce using rule 66 (operations -> comparison .)
    RCORCHE         reduce using rule 66 (operations -> comparison .)
    COMA            reduce using rule 66 (operations -> comparison .)
    AND             reduce using rule 194 (logic_value -> comparison .)
    OR              reduce using rule 194 (logic_value -> comparison .)


state 181

    (67) operations -> logic_operation .

    COLON           reduce using rule 67 (operations -> logic_operation .)
    PRINT           reduce using rule 67 (operations -> logic_operation .)
    SCAN            reduce using rule 67 (operations -> logic_operation .)
    FOR             reduce using rule 67 (operations -> logic_operation .)
    CONST           reduce using rule 67 (operations -> logic_operation .)
    ID              reduce using rule 67 (operations -> logic_operation .)
    APPEND          reduce using rule 67 (operations -> logic_operation .)
    LEN             reduce using rule 67 (operations -> logic_operation .)
    COPY            reduce using rule 67 (operations -> logic_operation .)
    DELETE          reduce using rule 67 (operations -> logic_operation .)
    IF              reduce using rule 67 (operations -> logic_operation .)
    ELSE            reduce using rule 67 (operations -> logic_operation .)
    TYPE            reduce using rule 67 (operations -> logic_operation .)
    SWITCH          reduce using rule 67 (operations -> logic_operation .)
    VAR             reduce using rule 67 (operations -> logic_operation .)
    FUNC            reduce using rule 67 (operations -> logic_operation .)
    INTEGER         reduce using rule 67 (operations -> logic_operation .)
    FLOAT           reduce using rule 67 (operations -> logic_operation .)
    NOT             reduce using rule 67 (operations -> logic_operation .)
    RLLAVE          reduce using rule 67 (operations -> logic_operation .)
    RETURN          reduce using rule 67 (operations -> logic_operation .)
    STRING          reduce using rule 67 (operations -> logic_operation .)
    TRUE            reduce using rule 67 (operations -> logic_operation .)
    FALSE           reduce using rule 67 (operations -> logic_operation .)
    INT32           reduce using rule 67 (operations -> logic_operation .)
    INT64           reduce using rule 67 (operations -> logic_operation .)
    FLOAT32         reduce using rule 67 (operations -> logic_operation .)
    FLOAT64         reduce using rule 67 (operations -> logic_operation .)
    BYTE            reduce using rule 67 (operations -> logic_operation .)
    WFLOAT          reduce using rule 67 (operations -> logic_operation .)
    WSTRING         reduce using rule 67 (operations -> logic_operation .)
    WINT            reduce using rule 67 (operations -> logic_operation .)
    BOOL            reduce using rule 67 (operations -> logic_operation .)
    DEFAULT         reduce using rule 67 (operations -> logic_operation .)
    CASE            reduce using rule 67 (operations -> logic_operation .)
    RPAREN          reduce using rule 67 (operations -> logic_operation .)
    RCORCHE         reduce using rule 67 (operations -> logic_operation .)
    COMA            reduce using rule 67 (operations -> logic_operation .)


state 182

    (161) slice_assignment -> slice_var EQUAL something_s .

    COLON           reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    PRINT           reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    SCAN            reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    FOR             reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    CONST           reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    ID              reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    APPEND          reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    LEN             reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    COPY            reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    DELETE          reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    IF              reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    ELSE            reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    TYPE            reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    SWITCH          reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    VAR             reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    FUNC            reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    INTEGER         reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    FLOAT           reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    NOT             reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    RLLAVE          reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    RETURN          reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    STRING          reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    TRUE            reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    FALSE           reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    INT32           reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    INT64           reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    FLOAT32         reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    FLOAT64         reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    BYTE            reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    WFLOAT          reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    WSTRING         reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    WINT            reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    BOOL            reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    DEFAULT         reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)
    CASE            reduce using rule 161 (slice_assignment -> slice_var EQUAL something_s .)


state 183

    (162) something_s -> ID .
    (243) array_var -> ID . LCORCHE index RCORCHE
    (179) something_ex -> ID .
    (139) value -> ID .
    (195) logic_value -> ID .
    (249) map_var -> ID . LCORCHE key RCORCHE
    (157) slice_var -> ID . LCORCHE index_s RCORCHE
    (202) call_func -> ID . LPAREN list_params RPAREN
    (203) call_func -> ID . LPAREN RPAREN

  ! reduce/reduce conflict for COLON resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for PRINT resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for SCAN resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for FOR resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for CONST resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for APPEND resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for LEN resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for COPY resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for DELETE resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for TYPE resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for SWITCH resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for VAR resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for FUNC resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for INTEGER resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for NOT resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for STRING resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for TRUE resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for FALSE resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for INT32 resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for INT64 resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for FLOAT32 resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for FLOAT64 resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for BYTE resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for WFLOAT resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for WSTRING resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for WINT resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for BOOL resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 162 (something_s -> ID .)
  ! reduce/reduce conflict for GREATER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for GREATER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for EQUAL_COMPARE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MOD resolved using rule 139 (value -> ID .)
    COLON           reduce using rule 162 (something_s -> ID .)
    PRINT           reduce using rule 162 (something_s -> ID .)
    SCAN            reduce using rule 162 (something_s -> ID .)
    FOR             reduce using rule 162 (something_s -> ID .)
    CONST           reduce using rule 162 (something_s -> ID .)
    ID              reduce using rule 162 (something_s -> ID .)
    APPEND          reduce using rule 162 (something_s -> ID .)
    LEN             reduce using rule 162 (something_s -> ID .)
    COPY            reduce using rule 162 (something_s -> ID .)
    DELETE          reduce using rule 162 (something_s -> ID .)
    IF              reduce using rule 162 (something_s -> ID .)
    ELSE            reduce using rule 162 (something_s -> ID .)
    TYPE            reduce using rule 162 (something_s -> ID .)
    SWITCH          reduce using rule 162 (something_s -> ID .)
    VAR             reduce using rule 162 (something_s -> ID .)
    FUNC            reduce using rule 162 (something_s -> ID .)
    INTEGER         reduce using rule 162 (something_s -> ID .)
    FLOAT           reduce using rule 162 (something_s -> ID .)
    NOT             reduce using rule 162 (something_s -> ID .)
    RLLAVE          reduce using rule 162 (something_s -> ID .)
    RETURN          reduce using rule 162 (something_s -> ID .)
    STRING          reduce using rule 162 (something_s -> ID .)
    TRUE            reduce using rule 162 (something_s -> ID .)
    FALSE           reduce using rule 162 (something_s -> ID .)
    INT32           reduce using rule 162 (something_s -> ID .)
    INT64           reduce using rule 162 (something_s -> ID .)
    FLOAT32         reduce using rule 162 (something_s -> ID .)
    FLOAT64         reduce using rule 162 (something_s -> ID .)
    BYTE            reduce using rule 162 (something_s -> ID .)
    WFLOAT          reduce using rule 162 (something_s -> ID .)
    WSTRING         reduce using rule 162 (something_s -> ID .)
    WINT            reduce using rule 162 (something_s -> ID .)
    BOOL            reduce using rule 162 (something_s -> ID .)
    DEFAULT         reduce using rule 162 (something_s -> ID .)
    CASE            reduce using rule 162 (something_s -> ID .)
    LCORCHE         shift and go to state 196
    GREATER         reduce using rule 139 (value -> ID .)
    SMALLER         reduce using rule 139 (value -> ID .)
    GREATER_OR_EQUAL reduce using rule 139 (value -> ID .)
    SMALLER_OR_EQUAL reduce using rule 139 (value -> ID .)
    EQUAL_COMPARE   reduce using rule 139 (value -> ID .)
    NOT_EQUAL       reduce using rule 139 (value -> ID .)
    PLUS            reduce using rule 139 (value -> ID .)
    TIMES           reduce using rule 139 (value -> ID .)
    DIVIDE          reduce using rule 139 (value -> ID .)
    MINUS           reduce using rule 139 (value -> ID .)
    MOD             reduce using rule 139 (value -> ID .)
    AND             reduce using rule 195 (logic_value -> ID .)
    OR              reduce using rule 195 (logic_value -> ID .)
    LPAREN          shift and go to state 146

  ! GREATER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! GREATER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! EQUAL_COMPARE   [ reduce using rule 179 (something_ex -> ID .) ]
  ! NOT_EQUAL       [ reduce using rule 179 (something_ex -> ID .) ]
  ! PLUS            [ reduce using rule 179 (something_ex -> ID .) ]
  ! TIMES           [ reduce using rule 179 (something_ex -> ID .) ]
  ! DIVIDE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! MINUS           [ reduce using rule 179 (something_ex -> ID .) ]
  ! MOD             [ reduce using rule 179 (something_ex -> ID .) ]
  ! COLON           [ reduce using rule 179 (something_ex -> ID .) ]
  ! PRINT           [ reduce using rule 179 (something_ex -> ID .) ]
  ! SCAN            [ reduce using rule 179 (something_ex -> ID .) ]
  ! FOR             [ reduce using rule 179 (something_ex -> ID .) ]
  ! CONST           [ reduce using rule 179 (something_ex -> ID .) ]
  ! ID              [ reduce using rule 179 (something_ex -> ID .) ]
  ! APPEND          [ reduce using rule 179 (something_ex -> ID .) ]
  ! LEN             [ reduce using rule 179 (something_ex -> ID .) ]
  ! COPY            [ reduce using rule 179 (something_ex -> ID .) ]
  ! DELETE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! IF              [ reduce using rule 179 (something_ex -> ID .) ]
  ! ELSE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! TYPE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! SWITCH          [ reduce using rule 179 (something_ex -> ID .) ]
  ! VAR             [ reduce using rule 179 (something_ex -> ID .) ]
  ! FUNC            [ reduce using rule 179 (something_ex -> ID .) ]
  ! INTEGER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! FLOAT           [ reduce using rule 179 (something_ex -> ID .) ]
  ! NOT             [ reduce using rule 179 (something_ex -> ID .) ]
  ! RLLAVE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! RETURN          [ reduce using rule 179 (something_ex -> ID .) ]
  ! STRING          [ reduce using rule 179 (something_ex -> ID .) ]
  ! TRUE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! FALSE           [ reduce using rule 179 (something_ex -> ID .) ]
  ! INT32           [ reduce using rule 179 (something_ex -> ID .) ]
  ! INT64           [ reduce using rule 179 (something_ex -> ID .) ]
  ! FLOAT32         [ reduce using rule 179 (something_ex -> ID .) ]
  ! FLOAT64         [ reduce using rule 179 (something_ex -> ID .) ]
  ! BYTE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! WFLOAT          [ reduce using rule 179 (something_ex -> ID .) ]
  ! WSTRING         [ reduce using rule 179 (something_ex -> ID .) ]
  ! WINT            [ reduce using rule 179 (something_ex -> ID .) ]
  ! BOOL            [ reduce using rule 179 (something_ex -> ID .) ]
  ! DEFAULT         [ reduce using rule 179 (something_ex -> ID .) ]
  ! CASE            [ reduce using rule 179 (something_ex -> ID .) ]


state 184

    (163) something_s -> array_var .
    (74) data_structure -> array_var .

  ! reduce/reduce conflict for COLON resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for PRINT resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for SCAN resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for FOR resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for CONST resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for ID resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for APPEND resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for LEN resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for COPY resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for DELETE resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for IF resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for ELSE resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for TYPE resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for SWITCH resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for VAR resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for FUNC resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for INTEGER resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for FLOAT resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for NOT resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for RETURN resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for STRING resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for TRUE resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for FALSE resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for INT32 resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for INT64 resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for FLOAT32 resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for FLOAT64 resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for BYTE resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for WFLOAT resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for WSTRING resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for WINT resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for BOOL resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 74 (data_structure -> array_var .)
  ! reduce/reduce conflict for CASE resolved using rule 74 (data_structure -> array_var .)
    GREATER         reduce using rule 74 (data_structure -> array_var .)
    SMALLER         reduce using rule 74 (data_structure -> array_var .)
    GREATER_OR_EQUAL reduce using rule 74 (data_structure -> array_var .)
    SMALLER_OR_EQUAL reduce using rule 74 (data_structure -> array_var .)
    EQUAL_COMPARE   reduce using rule 74 (data_structure -> array_var .)
    NOT_EQUAL       reduce using rule 74 (data_structure -> array_var .)
    PLUS            reduce using rule 74 (data_structure -> array_var .)
    TIMES           reduce using rule 74 (data_structure -> array_var .)
    DIVIDE          reduce using rule 74 (data_structure -> array_var .)
    MINUS           reduce using rule 74 (data_structure -> array_var .)
    MOD             reduce using rule 74 (data_structure -> array_var .)
    COLON           reduce using rule 74 (data_structure -> array_var .)
    PRINT           reduce using rule 74 (data_structure -> array_var .)
    SCAN            reduce using rule 74 (data_structure -> array_var .)
    FOR             reduce using rule 74 (data_structure -> array_var .)
    CONST           reduce using rule 74 (data_structure -> array_var .)
    ID              reduce using rule 74 (data_structure -> array_var .)
    APPEND          reduce using rule 74 (data_structure -> array_var .)
    LEN             reduce using rule 74 (data_structure -> array_var .)
    COPY            reduce using rule 74 (data_structure -> array_var .)
    DELETE          reduce using rule 74 (data_structure -> array_var .)
    IF              reduce using rule 74 (data_structure -> array_var .)
    ELSE            reduce using rule 74 (data_structure -> array_var .)
    TYPE            reduce using rule 74 (data_structure -> array_var .)
    SWITCH          reduce using rule 74 (data_structure -> array_var .)
    VAR             reduce using rule 74 (data_structure -> array_var .)
    FUNC            reduce using rule 74 (data_structure -> array_var .)
    INTEGER         reduce using rule 74 (data_structure -> array_var .)
    FLOAT           reduce using rule 74 (data_structure -> array_var .)
    NOT             reduce using rule 74 (data_structure -> array_var .)
    RLLAVE          reduce using rule 74 (data_structure -> array_var .)
    RETURN          reduce using rule 74 (data_structure -> array_var .)
    STRING          reduce using rule 74 (data_structure -> array_var .)
    TRUE            reduce using rule 74 (data_structure -> array_var .)
    FALSE           reduce using rule 74 (data_structure -> array_var .)
    INT32           reduce using rule 74 (data_structure -> array_var .)
    INT64           reduce using rule 74 (data_structure -> array_var .)
    FLOAT32         reduce using rule 74 (data_structure -> array_var .)
    FLOAT64         reduce using rule 74 (data_structure -> array_var .)
    BYTE            reduce using rule 74 (data_structure -> array_var .)
    WFLOAT          reduce using rule 74 (data_structure -> array_var .)
    WSTRING         reduce using rule 74 (data_structure -> array_var .)
    WINT            reduce using rule 74 (data_structure -> array_var .)
    BOOL            reduce using rule 74 (data_structure -> array_var .)
    DEFAULT         reduce using rule 74 (data_structure -> array_var .)
    CASE            reduce using rule 74 (data_structure -> array_var .)

  ! COLON           [ reduce using rule 163 (something_s -> array_var .) ]
  ! PRINT           [ reduce using rule 163 (something_s -> array_var .) ]
  ! SCAN            [ reduce using rule 163 (something_s -> array_var .) ]
  ! FOR             [ reduce using rule 163 (something_s -> array_var .) ]
  ! CONST           [ reduce using rule 163 (something_s -> array_var .) ]
  ! ID              [ reduce using rule 163 (something_s -> array_var .) ]
  ! APPEND          [ reduce using rule 163 (something_s -> array_var .) ]
  ! LEN             [ reduce using rule 163 (something_s -> array_var .) ]
  ! COPY            [ reduce using rule 163 (something_s -> array_var .) ]
  ! DELETE          [ reduce using rule 163 (something_s -> array_var .) ]
  ! IF              [ reduce using rule 163 (something_s -> array_var .) ]
  ! ELSE            [ reduce using rule 163 (something_s -> array_var .) ]
  ! TYPE            [ reduce using rule 163 (something_s -> array_var .) ]
  ! SWITCH          [ reduce using rule 163 (something_s -> array_var .) ]
  ! VAR             [ reduce using rule 163 (something_s -> array_var .) ]
  ! FUNC            [ reduce using rule 163 (something_s -> array_var .) ]
  ! INTEGER         [ reduce using rule 163 (something_s -> array_var .) ]
  ! FLOAT           [ reduce using rule 163 (something_s -> array_var .) ]
  ! NOT             [ reduce using rule 163 (something_s -> array_var .) ]
  ! RLLAVE          [ reduce using rule 163 (something_s -> array_var .) ]
  ! RETURN          [ reduce using rule 163 (something_s -> array_var .) ]
  ! STRING          [ reduce using rule 163 (something_s -> array_var .) ]
  ! TRUE            [ reduce using rule 163 (something_s -> array_var .) ]
  ! FALSE           [ reduce using rule 163 (something_s -> array_var .) ]
  ! INT32           [ reduce using rule 163 (something_s -> array_var .) ]
  ! INT64           [ reduce using rule 163 (something_s -> array_var .) ]
  ! FLOAT32         [ reduce using rule 163 (something_s -> array_var .) ]
  ! FLOAT64         [ reduce using rule 163 (something_s -> array_var .) ]
  ! BYTE            [ reduce using rule 163 (something_s -> array_var .) ]
  ! WFLOAT          [ reduce using rule 163 (something_s -> array_var .) ]
  ! WSTRING         [ reduce using rule 163 (something_s -> array_var .) ]
  ! WINT            [ reduce using rule 163 (something_s -> array_var .) ]
  ! BOOL            [ reduce using rule 163 (something_s -> array_var .) ]
  ! DEFAULT         [ reduce using rule 163 (something_s -> array_var .) ]
  ! CASE            [ reduce using rule 163 (something_s -> array_var .) ]


state 185

    (164) something_s -> values .

    COLON           reduce using rule 164 (something_s -> values .)
    PRINT           reduce using rule 164 (something_s -> values .)
    SCAN            reduce using rule 164 (something_s -> values .)
    FOR             reduce using rule 164 (something_s -> values .)
    CONST           reduce using rule 164 (something_s -> values .)
    ID              reduce using rule 164 (something_s -> values .)
    APPEND          reduce using rule 164 (something_s -> values .)
    LEN             reduce using rule 164 (something_s -> values .)
    COPY            reduce using rule 164 (something_s -> values .)
    DELETE          reduce using rule 164 (something_s -> values .)
    IF              reduce using rule 164 (something_s -> values .)
    ELSE            reduce using rule 164 (something_s -> values .)
    TYPE            reduce using rule 164 (something_s -> values .)
    SWITCH          reduce using rule 164 (something_s -> values .)
    VAR             reduce using rule 164 (something_s -> values .)
    FUNC            reduce using rule 164 (something_s -> values .)
    INTEGER         reduce using rule 164 (something_s -> values .)
    FLOAT           reduce using rule 164 (something_s -> values .)
    NOT             reduce using rule 164 (something_s -> values .)
    RLLAVE          reduce using rule 164 (something_s -> values .)
    RETURN          reduce using rule 164 (something_s -> values .)
    STRING          reduce using rule 164 (something_s -> values .)
    TRUE            reduce using rule 164 (something_s -> values .)
    FALSE           reduce using rule 164 (something_s -> values .)
    INT32           reduce using rule 164 (something_s -> values .)
    INT64           reduce using rule 164 (something_s -> values .)
    FLOAT32         reduce using rule 164 (something_s -> values .)
    FLOAT64         reduce using rule 164 (something_s -> values .)
    BYTE            reduce using rule 164 (something_s -> values .)
    WFLOAT          reduce using rule 164 (something_s -> values .)
    WSTRING         reduce using rule 164 (something_s -> values .)
    WINT            reduce using rule 164 (something_s -> values .)
    BOOL            reduce using rule 164 (something_s -> values .)
    DEFAULT         reduce using rule 164 (something_s -> values .)
    CASE            reduce using rule 164 (something_s -> values .)


state 186

    (165) something_s -> operations .

    COLON           reduce using rule 165 (something_s -> operations .)
    PRINT           reduce using rule 165 (something_s -> operations .)
    SCAN            reduce using rule 165 (something_s -> operations .)
    FOR             reduce using rule 165 (something_s -> operations .)
    CONST           reduce using rule 165 (something_s -> operations .)
    ID              reduce using rule 165 (something_s -> operations .)
    APPEND          reduce using rule 165 (something_s -> operations .)
    LEN             reduce using rule 165 (something_s -> operations .)
    COPY            reduce using rule 165 (something_s -> operations .)
    DELETE          reduce using rule 165 (something_s -> operations .)
    IF              reduce using rule 165 (something_s -> operations .)
    ELSE            reduce using rule 165 (something_s -> operations .)
    TYPE            reduce using rule 165 (something_s -> operations .)
    SWITCH          reduce using rule 165 (something_s -> operations .)
    VAR             reduce using rule 165 (something_s -> operations .)
    FUNC            reduce using rule 165 (something_s -> operations .)
    INTEGER         reduce using rule 165 (something_s -> operations .)
    FLOAT           reduce using rule 165 (something_s -> operations .)
    NOT             reduce using rule 165 (something_s -> operations .)
    RLLAVE          reduce using rule 165 (something_s -> operations .)
    RETURN          reduce using rule 165 (something_s -> operations .)
    STRING          reduce using rule 165 (something_s -> operations .)
    TRUE            reduce using rule 165 (something_s -> operations .)
    FALSE           reduce using rule 165 (something_s -> operations .)
    INT32           reduce using rule 165 (something_s -> operations .)
    INT64           reduce using rule 165 (something_s -> operations .)
    FLOAT32         reduce using rule 165 (something_s -> operations .)
    FLOAT64         reduce using rule 165 (something_s -> operations .)
    BYTE            reduce using rule 165 (something_s -> operations .)
    WFLOAT          reduce using rule 165 (something_s -> operations .)
    WSTRING         reduce using rule 165 (something_s -> operations .)
    WINT            reduce using rule 165 (something_s -> operations .)
    BOOL            reduce using rule 165 (something_s -> operations .)
    DEFAULT         reduce using rule 165 (something_s -> operations .)
    CASE            reduce using rule 165 (something_s -> operations .)


state 187

    (173) impresion -> PRINT LPAREN something . RPAREN

    RPAREN          shift and go to state 271


state 188

    (174) impresion -> PRINT LPAREN error . RPAREN

    RPAREN          shift and go to state 272


state 189

    (201) scan_func -> SCAN LPAREN POINTER . RPAREN

    RPAREN          shift and go to state 273


state 190

    (177) adicionaEx -> op something_ex .
    (178) adicionaEx -> op something_ex . adicionaEx
    (177) adicionaEx -> . op something_ex
    (178) adicionaEx -> . op something_ex adicionaEx
    (141) op -> . GREATER
    (142) op -> . SMALLER
    (143) op -> . GREATER_OR_EQUAL
    (144) op -> . SMALLER_OR_EQUAL
    (145) op -> . EQUAL_COMPARE
    (146) op -> . NOT_EQUAL
    (184) op -> . PLUS
    (185) op -> . TIMES
    (186) op -> . DIVIDE
    (187) op -> . MINUS
    (188) op -> . MOD

  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for GREATER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SMALLER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_COMPARE resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    COLON           reduce using rule 177 (adicionaEx -> op something_ex .)
    PRINT           reduce using rule 177 (adicionaEx -> op something_ex .)
    SCAN            reduce using rule 177 (adicionaEx -> op something_ex .)
    FOR             reduce using rule 177 (adicionaEx -> op something_ex .)
    CONST           reduce using rule 177 (adicionaEx -> op something_ex .)
    ID              reduce using rule 177 (adicionaEx -> op something_ex .)
    APPEND          reduce using rule 177 (adicionaEx -> op something_ex .)
    LEN             reduce using rule 177 (adicionaEx -> op something_ex .)
    COPY            reduce using rule 177 (adicionaEx -> op something_ex .)
    DELETE          reduce using rule 177 (adicionaEx -> op something_ex .)
    IF              reduce using rule 177 (adicionaEx -> op something_ex .)
    ELSE            reduce using rule 177 (adicionaEx -> op something_ex .)
    TYPE            reduce using rule 177 (adicionaEx -> op something_ex .)
    SWITCH          reduce using rule 177 (adicionaEx -> op something_ex .)
    VAR             reduce using rule 177 (adicionaEx -> op something_ex .)
    FUNC            reduce using rule 177 (adicionaEx -> op something_ex .)
    INTEGER         reduce using rule 177 (adicionaEx -> op something_ex .)
    FLOAT           reduce using rule 177 (adicionaEx -> op something_ex .)
    NOT             reduce using rule 177 (adicionaEx -> op something_ex .)
    RLLAVE          reduce using rule 177 (adicionaEx -> op something_ex .)
    RETURN          reduce using rule 177 (adicionaEx -> op something_ex .)
    STRING          reduce using rule 177 (adicionaEx -> op something_ex .)
    TRUE            reduce using rule 177 (adicionaEx -> op something_ex .)
    FALSE           reduce using rule 177 (adicionaEx -> op something_ex .)
    INT32           reduce using rule 177 (adicionaEx -> op something_ex .)
    INT64           reduce using rule 177 (adicionaEx -> op something_ex .)
    FLOAT32         reduce using rule 177 (adicionaEx -> op something_ex .)
    FLOAT64         reduce using rule 177 (adicionaEx -> op something_ex .)
    BYTE            reduce using rule 177 (adicionaEx -> op something_ex .)
    WFLOAT          reduce using rule 177 (adicionaEx -> op something_ex .)
    WSTRING         reduce using rule 177 (adicionaEx -> op something_ex .)
    WINT            reduce using rule 177 (adicionaEx -> op something_ex .)
    BOOL            reduce using rule 177 (adicionaEx -> op something_ex .)
    DEFAULT         reduce using rule 177 (adicionaEx -> op something_ex .)
    CASE            reduce using rule 177 (adicionaEx -> op something_ex .)
    RPAREN          reduce using rule 177 (adicionaEx -> op something_ex .)
    AND             reduce using rule 177 (adicionaEx -> op something_ex .)
    OR              reduce using rule 177 (adicionaEx -> op something_ex .)
    LLLAVE          reduce using rule 177 (adicionaEx -> op something_ex .)
    RCORCHE         reduce using rule 177 (adicionaEx -> op something_ex .)
    COMA            reduce using rule 177 (adicionaEx -> op something_ex .)
    GREATER         shift and go to state 117
    SMALLER         shift and go to state 118
    GREATER_OR_EQUAL shift and go to state 119
    SMALLER_OR_EQUAL shift and go to state 120
    EQUAL_COMPARE   shift and go to state 121
    NOT_EQUAL       shift and go to state 122
    PLUS            shift and go to state 123
    TIMES           shift and go to state 124
    DIVIDE          shift and go to state 125
    MINUS           shift and go to state 126
    MOD             shift and go to state 127

  ! GREATER         [ reduce using rule 177 (adicionaEx -> op something_ex .) ]
  ! SMALLER         [ reduce using rule 177 (adicionaEx -> op something_ex .) ]
  ! GREATER_OR_EQUAL [ reduce using rule 177 (adicionaEx -> op something_ex .) ]
  ! SMALLER_OR_EQUAL [ reduce using rule 177 (adicionaEx -> op something_ex .) ]
  ! EQUAL_COMPARE   [ reduce using rule 177 (adicionaEx -> op something_ex .) ]
  ! NOT_EQUAL       [ reduce using rule 177 (adicionaEx -> op something_ex .) ]
  ! PLUS            [ reduce using rule 177 (adicionaEx -> op something_ex .) ]
  ! TIMES           [ reduce using rule 177 (adicionaEx -> op something_ex .) ]
  ! DIVIDE          [ reduce using rule 177 (adicionaEx -> op something_ex .) ]
  ! MINUS           [ reduce using rule 177 (adicionaEx -> op something_ex .) ]
  ! MOD             [ reduce using rule 177 (adicionaEx -> op something_ex .) ]

    op                             shift and go to state 116
    adicionaEx                     shift and go to state 274

state 191

    (179) something_ex -> ID .
    (243) array_var -> ID . LCORCHE index RCORCHE
    (249) map_var -> ID . LCORCHE key RCORCHE
    (157) slice_var -> ID . LCORCHE index_s RCORCHE
    (202) call_func -> ID . LPAREN list_params RPAREN
    (203) call_func -> ID . LPAREN RPAREN

    GREATER         reduce using rule 179 (something_ex -> ID .)
    SMALLER         reduce using rule 179 (something_ex -> ID .)
    GREATER_OR_EQUAL reduce using rule 179 (something_ex -> ID .)
    SMALLER_OR_EQUAL reduce using rule 179 (something_ex -> ID .)
    EQUAL_COMPARE   reduce using rule 179 (something_ex -> ID .)
    NOT_EQUAL       reduce using rule 179 (something_ex -> ID .)
    PLUS            reduce using rule 179 (something_ex -> ID .)
    TIMES           reduce using rule 179 (something_ex -> ID .)
    DIVIDE          reduce using rule 179 (something_ex -> ID .)
    MINUS           reduce using rule 179 (something_ex -> ID .)
    MOD             reduce using rule 179 (something_ex -> ID .)
    COLON           reduce using rule 179 (something_ex -> ID .)
    PRINT           reduce using rule 179 (something_ex -> ID .)
    SCAN            reduce using rule 179 (something_ex -> ID .)
    FOR             reduce using rule 179 (something_ex -> ID .)
    CONST           reduce using rule 179 (something_ex -> ID .)
    ID              reduce using rule 179 (something_ex -> ID .)
    APPEND          reduce using rule 179 (something_ex -> ID .)
    LEN             reduce using rule 179 (something_ex -> ID .)
    COPY            reduce using rule 179 (something_ex -> ID .)
    DELETE          reduce using rule 179 (something_ex -> ID .)
    IF              reduce using rule 179 (something_ex -> ID .)
    ELSE            reduce using rule 179 (something_ex -> ID .)
    TYPE            reduce using rule 179 (something_ex -> ID .)
    SWITCH          reduce using rule 179 (something_ex -> ID .)
    VAR             reduce using rule 179 (something_ex -> ID .)
    FUNC            reduce using rule 179 (something_ex -> ID .)
    INTEGER         reduce using rule 179 (something_ex -> ID .)
    FLOAT           reduce using rule 179 (something_ex -> ID .)
    NOT             reduce using rule 179 (something_ex -> ID .)
    RLLAVE          reduce using rule 179 (something_ex -> ID .)
    RETURN          reduce using rule 179 (something_ex -> ID .)
    STRING          reduce using rule 179 (something_ex -> ID .)
    TRUE            reduce using rule 179 (something_ex -> ID .)
    FALSE           reduce using rule 179 (something_ex -> ID .)
    INT32           reduce using rule 179 (something_ex -> ID .)
    INT64           reduce using rule 179 (something_ex -> ID .)
    FLOAT32         reduce using rule 179 (something_ex -> ID .)
    FLOAT64         reduce using rule 179 (something_ex -> ID .)
    BYTE            reduce using rule 179 (something_ex -> ID .)
    WFLOAT          reduce using rule 179 (something_ex -> ID .)
    WSTRING         reduce using rule 179 (something_ex -> ID .)
    WINT            reduce using rule 179 (something_ex -> ID .)
    BOOL            reduce using rule 179 (something_ex -> ID .)
    DEFAULT         reduce using rule 179 (something_ex -> ID .)
    CASE            reduce using rule 179 (something_ex -> ID .)
    RPAREN          reduce using rule 179 (something_ex -> ID .)
    AND             reduce using rule 179 (something_ex -> ID .)
    OR              reduce using rule 179 (something_ex -> ID .)
    LLLAVE          reduce using rule 179 (something_ex -> ID .)
    RCORCHE         reduce using rule 179 (something_ex -> ID .)
    COMA            reduce using rule 179 (something_ex -> ID .)
    LCORCHE         shift and go to state 196
    LPAREN          shift and go to state 146


state 192

    (166) cicloFor -> FOR comparison LLLAVE . codigo RLLAVE
    (7) codigo -> . rule
    (8) codigo -> . more_rules
    (10) rule -> . impresion COLON
    (11) rule -> . impresion
    (12) rule -> . scan_func COLON
    (13) rule -> . scan_func
    (14) rule -> . expression COLON
    (15) rule -> . expression
    (16) rule -> . cicloFor
    (17) rule -> . comparison
    (18) rule -> . logic_operation
    (19) rule -> . decVar COLON
    (20) rule -> . decVar
    (21) rule -> . decConst COLON
    (22) rule -> . decConst
    (23) rule -> . var_asignation
    (24) rule -> . var_asignation COLON
    (25) rule -> . funciones
    (26) rule -> . funciones COLON
    (27) rule -> . SenIF
    (28) rule -> . SenElseIF
    (29) rule -> . SenElse
    (30) rule -> . SenStruct
    (31) rule -> . cStruct
    (32) rule -> . switch_statement
    (33) rule -> . array_declaration COLON
    (34) rule -> . array_declaration
    (35) rule -> . array_var COLON
    (36) rule -> . array_var
    (37) rule -> . array_assignment COLON
    (38) rule -> . array_assignment
    (39) rule -> . slice_declaration COLON
    (40) rule -> . slice_declaration
    (41) rule -> . slice_var COLON
    (42) rule -> . slice_var
    (43) rule -> . slice_assignment COLON
    (44) rule -> . slice_assignment
    (45) rule -> . map_declaration COLON
    (46) rule -> . map_declaration
    (47) rule -> . map_assignment COLON
    (48) rule -> . map_assignment
    (49) rule -> . func_declaration
    (50) rule -> . main_func
    (9) more_rules -> . rule codigo
    (173) impresion -> . PRINT LPAREN something RPAREN
    (174) impresion -> . PRINT LPAREN error RPAREN
    (201) scan_func -> . SCAN LPAREN POINTER RPAREN
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (166) cicloFor -> . FOR comparison LLLAVE codigo RLLAVE
    (167) cicloFor -> . FOR logic_operation LLLAVE codigo RLLAVE
    (168) cicloFor -> . FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (112) decVar -> . static
    (113) decVar -> . dynamic
    (109) decConst -> . CONST ID data_type_and_value
    (110) decConst -> . CONST ID EQUAL ID
    (111) decConst -> . CONST ID EQUAL data_structure
    (77) var_asignation -> . ID EQUAL any
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (88) SenIF -> . IF comparison LLLAVE codigo RLLAVE
    (89) SenIF -> . IF logic_operation LLLAVE codigo RLLAVE
    (90) SenIF -> . IF TRUE LLLAVE codigo RLLAVE
    (91) SenIF -> . IF FALSE LLLAVE codigo RLLAVE
    (92) SenElseIF -> . ELSE IF comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> . ELSE IF logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> . ELSE IF TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> . ELSE IF FALSE LLLAVE codigo RLLAVE
    (96) SenElse -> . ELSE LLLAVE codigo RLLAVE
    (97) SenStruct -> . TYPE ID STRUCT LLLAVE declaration RLLAVE
    (101) cStruct -> . ID DEQUAL ID LLLAVE asignaciones RLLAVE
    (233) switch_statement -> . SWITCH ID LLLAVE cases RLLAVE
    (238) array_declaration -> . VAR ID LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> . VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (243) array_var -> . ID LCORCHE index RCORCHE
    (247) array_assignment -> . array_var EQUAL something
    (147) slice_declaration -> . VAR ID LCORCHE RCORCHE data_types
    (148) slice_declaration -> . VAR ID EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> . VAR ID EQUAL funM
    (150) slice_declaration -> . ID DEQUAL funM
    (151) slice_declaration -> . ID DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (161) slice_assignment -> . slice_var EQUAL something_s
    (248) map_declaration -> . VAR ID LCORCHE data_types RCORCHE data_types
    (253) map_assignment -> . map_var EQUAL something
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (114) static -> . single
    (115) static -> . multiple
    (124) dynamic -> . ID DEQUAL algo
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (249) map_var -> . ID LCORCHE key RCORCHE
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (120) single -> . VAR ID data_types
    (121) single -> . VAR ID data_types EQUAL funciones
    (122) single -> . VAR ID data_types EQUAL data_structure
    (123) single -> . VAR ID data_type_and_value
    (116) multiple -> . list_var data_types
    (117) list_var -> . VAR ID COMA more

    PRINT           shift and go to state 62
    SCAN            shift and go to state 63
    FOR             shift and go to state 65
    CONST           shift and go to state 71
    ID              shift and go to state 72
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    IF              shift and go to state 79
    ELSE            shift and go to state 80
    TYPE            shift and go to state 81
    SWITCH          shift and go to state 82
    VAR             shift and go to state 83
    FUNC            shift and go to state 32
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    NOT             shift and go to state 87

    comparison                     shift and go to state 40
    codigo                         shift and go to state 275
    rule                           shift and go to state 34
    more_rules                     shift and go to state 35
    impresion                      shift and go to state 36
    scan_func                      shift and go to state 37
    expression                     shift and go to state 38
    cicloFor                       shift and go to state 39
    logic_operation                shift and go to state 41
    decVar                         shift and go to state 42
    decConst                       shift and go to state 43
    var_asignation                 shift and go to state 44
    funciones                      shift and go to state 45
    SenIF                          shift and go to state 46
    SenElseIF                      shift and go to state 47
    SenElse                        shift and go to state 48
    SenStruct                      shift and go to state 49
    cStruct                        shift and go to state 50
    switch_statement               shift and go to state 51
    array_declaration              shift and go to state 52
    array_var                      shift and go to state 53
    array_assignment               shift and go to state 54
    slice_declaration              shift and go to state 55
    slice_var                      shift and go to state 56
    slice_assignment               shift and go to state 57
    map_declaration                shift and go to state 58
    map_assignment                 shift and go to state 59
    func_declaration               shift and go to state 60
    main_func                      shift and go to state 61
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    static                         shift and go to state 69
    dynamic                        shift and go to state 70
    data_structure                 shift and go to state 73
    call_func                      shift and go to state 78
    map_var                        shift and go to state 84
    single                         shift and go to state 88
    multiple                       shift and go to state 89
    list_var                       shift and go to state 90

state 193

    (167) cicloFor -> FOR logic_operation LLLAVE . codigo RLLAVE
    (7) codigo -> . rule
    (8) codigo -> . more_rules
    (10) rule -> . impresion COLON
    (11) rule -> . impresion
    (12) rule -> . scan_func COLON
    (13) rule -> . scan_func
    (14) rule -> . expression COLON
    (15) rule -> . expression
    (16) rule -> . cicloFor
    (17) rule -> . comparison
    (18) rule -> . logic_operation
    (19) rule -> . decVar COLON
    (20) rule -> . decVar
    (21) rule -> . decConst COLON
    (22) rule -> . decConst
    (23) rule -> . var_asignation
    (24) rule -> . var_asignation COLON
    (25) rule -> . funciones
    (26) rule -> . funciones COLON
    (27) rule -> . SenIF
    (28) rule -> . SenElseIF
    (29) rule -> . SenElse
    (30) rule -> . SenStruct
    (31) rule -> . cStruct
    (32) rule -> . switch_statement
    (33) rule -> . array_declaration COLON
    (34) rule -> . array_declaration
    (35) rule -> . array_var COLON
    (36) rule -> . array_var
    (37) rule -> . array_assignment COLON
    (38) rule -> . array_assignment
    (39) rule -> . slice_declaration COLON
    (40) rule -> . slice_declaration
    (41) rule -> . slice_var COLON
    (42) rule -> . slice_var
    (43) rule -> . slice_assignment COLON
    (44) rule -> . slice_assignment
    (45) rule -> . map_declaration COLON
    (46) rule -> . map_declaration
    (47) rule -> . map_assignment COLON
    (48) rule -> . map_assignment
    (49) rule -> . func_declaration
    (50) rule -> . main_func
    (9) more_rules -> . rule codigo
    (173) impresion -> . PRINT LPAREN something RPAREN
    (174) impresion -> . PRINT LPAREN error RPAREN
    (201) scan_func -> . SCAN LPAREN POINTER RPAREN
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (166) cicloFor -> . FOR comparison LLLAVE codigo RLLAVE
    (167) cicloFor -> . FOR logic_operation LLLAVE codigo RLLAVE
    (168) cicloFor -> . FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (112) decVar -> . static
    (113) decVar -> . dynamic
    (109) decConst -> . CONST ID data_type_and_value
    (110) decConst -> . CONST ID EQUAL ID
    (111) decConst -> . CONST ID EQUAL data_structure
    (77) var_asignation -> . ID EQUAL any
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (88) SenIF -> . IF comparison LLLAVE codigo RLLAVE
    (89) SenIF -> . IF logic_operation LLLAVE codigo RLLAVE
    (90) SenIF -> . IF TRUE LLLAVE codigo RLLAVE
    (91) SenIF -> . IF FALSE LLLAVE codigo RLLAVE
    (92) SenElseIF -> . ELSE IF comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> . ELSE IF logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> . ELSE IF TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> . ELSE IF FALSE LLLAVE codigo RLLAVE
    (96) SenElse -> . ELSE LLLAVE codigo RLLAVE
    (97) SenStruct -> . TYPE ID STRUCT LLLAVE declaration RLLAVE
    (101) cStruct -> . ID DEQUAL ID LLLAVE asignaciones RLLAVE
    (233) switch_statement -> . SWITCH ID LLLAVE cases RLLAVE
    (238) array_declaration -> . VAR ID LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> . VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (243) array_var -> . ID LCORCHE index RCORCHE
    (247) array_assignment -> . array_var EQUAL something
    (147) slice_declaration -> . VAR ID LCORCHE RCORCHE data_types
    (148) slice_declaration -> . VAR ID EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> . VAR ID EQUAL funM
    (150) slice_declaration -> . ID DEQUAL funM
    (151) slice_declaration -> . ID DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (161) slice_assignment -> . slice_var EQUAL something_s
    (248) map_declaration -> . VAR ID LCORCHE data_types RCORCHE data_types
    (253) map_assignment -> . map_var EQUAL something
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (114) static -> . single
    (115) static -> . multiple
    (124) dynamic -> . ID DEQUAL algo
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (249) map_var -> . ID LCORCHE key RCORCHE
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (120) single -> . VAR ID data_types
    (121) single -> . VAR ID data_types EQUAL funciones
    (122) single -> . VAR ID data_types EQUAL data_structure
    (123) single -> . VAR ID data_type_and_value
    (116) multiple -> . list_var data_types
    (117) list_var -> . VAR ID COMA more

    PRINT           shift and go to state 62
    SCAN            shift and go to state 63
    FOR             shift and go to state 65
    CONST           shift and go to state 71
    ID              shift and go to state 72
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    IF              shift and go to state 79
    ELSE            shift and go to state 80
    TYPE            shift and go to state 81
    SWITCH          shift and go to state 82
    VAR             shift and go to state 83
    FUNC            shift and go to state 32
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    NOT             shift and go to state 87

    logic_operation                shift and go to state 41
    codigo                         shift and go to state 276
    rule                           shift and go to state 34
    more_rules                     shift and go to state 35
    impresion                      shift and go to state 36
    scan_func                      shift and go to state 37
    expression                     shift and go to state 38
    cicloFor                       shift and go to state 39
    comparison                     shift and go to state 40
    decVar                         shift and go to state 42
    decConst                       shift and go to state 43
    var_asignation                 shift and go to state 44
    funciones                      shift and go to state 45
    SenIF                          shift and go to state 46
    SenElseIF                      shift and go to state 47
    SenElse                        shift and go to state 48
    SenStruct                      shift and go to state 49
    cStruct                        shift and go to state 50
    switch_statement               shift and go to state 51
    array_declaration              shift and go to state 52
    array_var                      shift and go to state 53
    array_assignment               shift and go to state 54
    slice_declaration              shift and go to state 55
    slice_var                      shift and go to state 56
    slice_assignment               shift and go to state 57
    map_declaration                shift and go to state 58
    map_assignment                 shift and go to state 59
    func_declaration               shift and go to state 60
    main_func                      shift and go to state 61
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    static                         shift and go to state 69
    dynamic                        shift and go to state 70
    data_structure                 shift and go to state 73
    call_func                      shift and go to state 78
    map_var                        shift and go to state 84
    single                         shift and go to state 88
    multiple                       shift and go to state 89
    list_var                       shift and go to state 90

state 194

    (168) cicloFor -> FOR decVarOne COLON . comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (139) value -> . ID
    (140) value -> . expression
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    ID              shift and go to state 198
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    comparison                     shift and go to state 277
    value                          shift and go to state 66
    expression                     shift and go to state 132
    something_ex                   shift and go to state 64
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 195

    (171) decVarOne -> ID DEQUAL . ID
    (172) decVarOne -> ID DEQUAL . INTEGER

    ID              shift and go to state 278
    INTEGER         shift and go to state 279


state 196

    (243) array_var -> ID LCORCHE . index RCORCHE
    (249) map_var -> ID LCORCHE . key RCORCHE
    (157) slice_var -> ID LCORCHE . index_s RCORCHE
    (244) index -> . ID
    (245) index -> . INTEGER
    (246) index -> . expression
    (250) key -> . ID
    (251) key -> . values
    (252) key -> . operations
    (158) index_s -> . ID
    (159) index_s -> . INTEGER
    (160) index_s -> . expression
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (51) values -> . STRING
    (52) values -> . INTEGER
    (53) values -> . FLOAT
    (54) values -> . TRUE
    (55) values -> . FALSE
    (65) operations -> . expression
    (66) operations -> . comparison
    (67) operations -> . logic_operation
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    ID              shift and go to state 280
    INTEGER         shift and go to state 232
    STRING          shift and go to state 174
    FLOAT           shift and go to state 176
    TRUE            shift and go to state 177
    FALSE           shift and go to state 178
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    NOT             shift and go to state 87

    index                          shift and go to state 229
    key                            shift and go to state 231
    index_s                        shift and go to state 230
    expression                     shift and go to state 233
    values                         shift and go to state 234
    operations                     shift and go to state 235
    something_ex                   shift and go to state 64
    comparison                     shift and go to state 180
    logic_operation                shift and go to state 181
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 197

    (138) comparison -> value op value .

    PRINT           reduce using rule 138 (comparison -> value op value .)
    SCAN            reduce using rule 138 (comparison -> value op value .)
    FOR             reduce using rule 138 (comparison -> value op value .)
    CONST           reduce using rule 138 (comparison -> value op value .)
    ID              reduce using rule 138 (comparison -> value op value .)
    APPEND          reduce using rule 138 (comparison -> value op value .)
    LEN             reduce using rule 138 (comparison -> value op value .)
    COPY            reduce using rule 138 (comparison -> value op value .)
    DELETE          reduce using rule 138 (comparison -> value op value .)
    IF              reduce using rule 138 (comparison -> value op value .)
    ELSE            reduce using rule 138 (comparison -> value op value .)
    TYPE            reduce using rule 138 (comparison -> value op value .)
    SWITCH          reduce using rule 138 (comparison -> value op value .)
    VAR             reduce using rule 138 (comparison -> value op value .)
    FUNC            reduce using rule 138 (comparison -> value op value .)
    INTEGER         reduce using rule 138 (comparison -> value op value .)
    FLOAT           reduce using rule 138 (comparison -> value op value .)
    NOT             reduce using rule 138 (comparison -> value op value .)
    RLLAVE          reduce using rule 138 (comparison -> value op value .)
    AND             reduce using rule 138 (comparison -> value op value .)
    OR              reduce using rule 138 (comparison -> value op value .)
    RETURN          reduce using rule 138 (comparison -> value op value .)
    STRING          reduce using rule 138 (comparison -> value op value .)
    TRUE            reduce using rule 138 (comparison -> value op value .)
    FALSE           reduce using rule 138 (comparison -> value op value .)
    INT32           reduce using rule 138 (comparison -> value op value .)
    INT64           reduce using rule 138 (comparison -> value op value .)
    FLOAT32         reduce using rule 138 (comparison -> value op value .)
    FLOAT64         reduce using rule 138 (comparison -> value op value .)
    BYTE            reduce using rule 138 (comparison -> value op value .)
    WFLOAT          reduce using rule 138 (comparison -> value op value .)
    WSTRING         reduce using rule 138 (comparison -> value op value .)
    WINT            reduce using rule 138 (comparison -> value op value .)
    BOOL            reduce using rule 138 (comparison -> value op value .)
    DEFAULT         reduce using rule 138 (comparison -> value op value .)
    CASE            reduce using rule 138 (comparison -> value op value .)
    LLLAVE          reduce using rule 138 (comparison -> value op value .)
    COLON           reduce using rule 138 (comparison -> value op value .)
    RPAREN          reduce using rule 138 (comparison -> value op value .)
    RCORCHE         reduce using rule 138 (comparison -> value op value .)
    COMA            reduce using rule 138 (comparison -> value op value .)


state 198

    (139) value -> ID .
    (179) something_ex -> ID .
    (243) array_var -> ID . LCORCHE index RCORCHE
    (249) map_var -> ID . LCORCHE key RCORCHE
    (157) slice_var -> ID . LCORCHE index_s RCORCHE
    (202) call_func -> ID . LPAREN list_params RPAREN
    (203) call_func -> ID . LPAREN RPAREN

  ! reduce/reduce conflict for GREATER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for GREATER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for EQUAL_COMPARE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MOD resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for PRINT resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SCAN resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for FOR resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for CONST resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for APPEND resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for LEN resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for COPY resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for DELETE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for TYPE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SWITCH resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for VAR resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for FUNC resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for INTEGER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for NOT resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for STRING resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for TRUE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for FALSE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for INT32 resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for INT64 resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for FLOAT32 resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for FLOAT64 resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for BYTE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for WFLOAT resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for WSTRING resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for WINT resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for BOOL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for LLLAVE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for RCORCHE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for COMA resolved using rule 139 (value -> ID .)
    PRINT           reduce using rule 139 (value -> ID .)
    SCAN            reduce using rule 139 (value -> ID .)
    FOR             reduce using rule 139 (value -> ID .)
    CONST           reduce using rule 139 (value -> ID .)
    ID              reduce using rule 139 (value -> ID .)
    APPEND          reduce using rule 139 (value -> ID .)
    LEN             reduce using rule 139 (value -> ID .)
    COPY            reduce using rule 139 (value -> ID .)
    DELETE          reduce using rule 139 (value -> ID .)
    IF              reduce using rule 139 (value -> ID .)
    ELSE            reduce using rule 139 (value -> ID .)
    TYPE            reduce using rule 139 (value -> ID .)
    SWITCH          reduce using rule 139 (value -> ID .)
    VAR             reduce using rule 139 (value -> ID .)
    FUNC            reduce using rule 139 (value -> ID .)
    INTEGER         reduce using rule 139 (value -> ID .)
    FLOAT           reduce using rule 139 (value -> ID .)
    NOT             reduce using rule 139 (value -> ID .)
    RLLAVE          reduce using rule 139 (value -> ID .)
    AND             reduce using rule 139 (value -> ID .)
    OR              reduce using rule 139 (value -> ID .)
    RETURN          reduce using rule 139 (value -> ID .)
    STRING          reduce using rule 139 (value -> ID .)
    TRUE            reduce using rule 139 (value -> ID .)
    FALSE           reduce using rule 139 (value -> ID .)
    INT32           reduce using rule 139 (value -> ID .)
    INT64           reduce using rule 139 (value -> ID .)
    FLOAT32         reduce using rule 139 (value -> ID .)
    FLOAT64         reduce using rule 139 (value -> ID .)
    BYTE            reduce using rule 139 (value -> ID .)
    WFLOAT          reduce using rule 139 (value -> ID .)
    WSTRING         reduce using rule 139 (value -> ID .)
    WINT            reduce using rule 139 (value -> ID .)
    BOOL            reduce using rule 139 (value -> ID .)
    DEFAULT         reduce using rule 139 (value -> ID .)
    CASE            reduce using rule 139 (value -> ID .)
    LLLAVE          reduce using rule 139 (value -> ID .)
    COLON           reduce using rule 139 (value -> ID .)
    RPAREN          reduce using rule 139 (value -> ID .)
    RCORCHE         reduce using rule 139 (value -> ID .)
    COMA            reduce using rule 139 (value -> ID .)
    GREATER         reduce using rule 139 (value -> ID .)
    SMALLER         reduce using rule 139 (value -> ID .)
    GREATER_OR_EQUAL reduce using rule 139 (value -> ID .)
    SMALLER_OR_EQUAL reduce using rule 139 (value -> ID .)
    EQUAL_COMPARE   reduce using rule 139 (value -> ID .)
    NOT_EQUAL       reduce using rule 139 (value -> ID .)
    PLUS            reduce using rule 139 (value -> ID .)
    TIMES           reduce using rule 139 (value -> ID .)
    DIVIDE          reduce using rule 139 (value -> ID .)
    MINUS           reduce using rule 139 (value -> ID .)
    MOD             reduce using rule 139 (value -> ID .)
    LCORCHE         shift and go to state 196
    LPAREN          shift and go to state 146

  ! GREATER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! GREATER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! EQUAL_COMPARE   [ reduce using rule 179 (something_ex -> ID .) ]
  ! NOT_EQUAL       [ reduce using rule 179 (something_ex -> ID .) ]
  ! PLUS            [ reduce using rule 179 (something_ex -> ID .) ]
  ! TIMES           [ reduce using rule 179 (something_ex -> ID .) ]
  ! DIVIDE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! MINUS           [ reduce using rule 179 (something_ex -> ID .) ]
  ! MOD             [ reduce using rule 179 (something_ex -> ID .) ]
  ! PRINT           [ reduce using rule 179 (something_ex -> ID .) ]
  ! SCAN            [ reduce using rule 179 (something_ex -> ID .) ]
  ! FOR             [ reduce using rule 179 (something_ex -> ID .) ]
  ! CONST           [ reduce using rule 179 (something_ex -> ID .) ]
  ! ID              [ reduce using rule 179 (something_ex -> ID .) ]
  ! APPEND          [ reduce using rule 179 (something_ex -> ID .) ]
  ! LEN             [ reduce using rule 179 (something_ex -> ID .) ]
  ! COPY            [ reduce using rule 179 (something_ex -> ID .) ]
  ! DELETE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! IF              [ reduce using rule 179 (something_ex -> ID .) ]
  ! ELSE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! TYPE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! SWITCH          [ reduce using rule 179 (something_ex -> ID .) ]
  ! VAR             [ reduce using rule 179 (something_ex -> ID .) ]
  ! FUNC            [ reduce using rule 179 (something_ex -> ID .) ]
  ! INTEGER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! FLOAT           [ reduce using rule 179 (something_ex -> ID .) ]
  ! NOT             [ reduce using rule 179 (something_ex -> ID .) ]
  ! RLLAVE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! AND             [ reduce using rule 179 (something_ex -> ID .) ]
  ! OR              [ reduce using rule 179 (something_ex -> ID .) ]
  ! RETURN          [ reduce using rule 179 (something_ex -> ID .) ]
  ! STRING          [ reduce using rule 179 (something_ex -> ID .) ]
  ! TRUE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! FALSE           [ reduce using rule 179 (something_ex -> ID .) ]
  ! INT32           [ reduce using rule 179 (something_ex -> ID .) ]
  ! INT64           [ reduce using rule 179 (something_ex -> ID .) ]
  ! FLOAT32         [ reduce using rule 179 (something_ex -> ID .) ]
  ! FLOAT64         [ reduce using rule 179 (something_ex -> ID .) ]
  ! BYTE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! WFLOAT          [ reduce using rule 179 (something_ex -> ID .) ]
  ! WSTRING         [ reduce using rule 179 (something_ex -> ID .) ]
  ! WINT            [ reduce using rule 179 (something_ex -> ID .) ]
  ! BOOL            [ reduce using rule 179 (something_ex -> ID .) ]
  ! DEFAULT         [ reduce using rule 179 (something_ex -> ID .) ]
  ! CASE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! LLLAVE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! COLON           [ reduce using rule 179 (something_ex -> ID .) ]
  ! RPAREN          [ reduce using rule 179 (something_ex -> ID .) ]
  ! RCORCHE         [ reduce using rule 179 (something_ex -> ID .) ]
  ! COMA            [ reduce using rule 179 (something_ex -> ID .) ]


state 199

    (191) logic_recu -> logic_op logic_value .
    (192) logic_recu -> logic_op logic_value . logic_recu
    (191) logic_recu -> . logic_op logic_value
    (192) logic_recu -> . logic_op logic_value logic_recu
    (198) logic_op -> . AND
    (199) logic_op -> . OR

    PRINT           reduce using rule 191 (logic_recu -> logic_op logic_value .)
    SCAN            reduce using rule 191 (logic_recu -> logic_op logic_value .)
    FOR             reduce using rule 191 (logic_recu -> logic_op logic_value .)
    CONST           reduce using rule 191 (logic_recu -> logic_op logic_value .)
    ID              reduce using rule 191 (logic_recu -> logic_op logic_value .)
    APPEND          reduce using rule 191 (logic_recu -> logic_op logic_value .)
    LEN             reduce using rule 191 (logic_recu -> logic_op logic_value .)
    COPY            reduce using rule 191 (logic_recu -> logic_op logic_value .)
    DELETE          reduce using rule 191 (logic_recu -> logic_op logic_value .)
    IF              reduce using rule 191 (logic_recu -> logic_op logic_value .)
    ELSE            reduce using rule 191 (logic_recu -> logic_op logic_value .)
    TYPE            reduce using rule 191 (logic_recu -> logic_op logic_value .)
    SWITCH          reduce using rule 191 (logic_recu -> logic_op logic_value .)
    VAR             reduce using rule 191 (logic_recu -> logic_op logic_value .)
    FUNC            reduce using rule 191 (logic_recu -> logic_op logic_value .)
    INTEGER         reduce using rule 191 (logic_recu -> logic_op logic_value .)
    FLOAT           reduce using rule 191 (logic_recu -> logic_op logic_value .)
    NOT             reduce using rule 191 (logic_recu -> logic_op logic_value .)
    RLLAVE          reduce using rule 191 (logic_recu -> logic_op logic_value .)
    RETURN          reduce using rule 191 (logic_recu -> logic_op logic_value .)
    STRING          reduce using rule 191 (logic_recu -> logic_op logic_value .)
    TRUE            reduce using rule 191 (logic_recu -> logic_op logic_value .)
    FALSE           reduce using rule 191 (logic_recu -> logic_op logic_value .)
    INT32           reduce using rule 191 (logic_recu -> logic_op logic_value .)
    INT64           reduce using rule 191 (logic_recu -> logic_op logic_value .)
    FLOAT32         reduce using rule 191 (logic_recu -> logic_op logic_value .)
    FLOAT64         reduce using rule 191 (logic_recu -> logic_op logic_value .)
    BYTE            reduce using rule 191 (logic_recu -> logic_op logic_value .)
    WFLOAT          reduce using rule 191 (logic_recu -> logic_op logic_value .)
    WSTRING         reduce using rule 191 (logic_recu -> logic_op logic_value .)
    WINT            reduce using rule 191 (logic_recu -> logic_op logic_value .)
    BOOL            reduce using rule 191 (logic_recu -> logic_op logic_value .)
    DEFAULT         reduce using rule 191 (logic_recu -> logic_op logic_value .)
    CASE            reduce using rule 191 (logic_recu -> logic_op logic_value .)
    LLLAVE          reduce using rule 191 (logic_recu -> logic_op logic_value .)
    COLON           reduce using rule 191 (logic_recu -> logic_op logic_value .)
    RPAREN          reduce using rule 191 (logic_recu -> logic_op logic_value .)
    RCORCHE         reduce using rule 191 (logic_recu -> logic_op logic_value .)
    COMA            reduce using rule 191 (logic_recu -> logic_op logic_value .)
    AND             shift and go to state 140
    OR              shift and go to state 141

    logic_op                       shift and go to state 139
    logic_recu                     shift and go to state 281

state 200

    (193) logic_value -> negation .

    AND             reduce using rule 193 (logic_value -> negation .)
    OR              reduce using rule 193 (logic_value -> negation .)
    PRINT           reduce using rule 193 (logic_value -> negation .)
    SCAN            reduce using rule 193 (logic_value -> negation .)
    FOR             reduce using rule 193 (logic_value -> negation .)
    CONST           reduce using rule 193 (logic_value -> negation .)
    ID              reduce using rule 193 (logic_value -> negation .)
    APPEND          reduce using rule 193 (logic_value -> negation .)
    LEN             reduce using rule 193 (logic_value -> negation .)
    COPY            reduce using rule 193 (logic_value -> negation .)
    DELETE          reduce using rule 193 (logic_value -> negation .)
    IF              reduce using rule 193 (logic_value -> negation .)
    ELSE            reduce using rule 193 (logic_value -> negation .)
    TYPE            reduce using rule 193 (logic_value -> negation .)
    SWITCH          reduce using rule 193 (logic_value -> negation .)
    VAR             reduce using rule 193 (logic_value -> negation .)
    FUNC            reduce using rule 193 (logic_value -> negation .)
    INTEGER         reduce using rule 193 (logic_value -> negation .)
    FLOAT           reduce using rule 193 (logic_value -> negation .)
    NOT             reduce using rule 193 (logic_value -> negation .)
    RLLAVE          reduce using rule 193 (logic_value -> negation .)
    RETURN          reduce using rule 193 (logic_value -> negation .)
    STRING          reduce using rule 193 (logic_value -> negation .)
    TRUE            reduce using rule 193 (logic_value -> negation .)
    FALSE           reduce using rule 193 (logic_value -> negation .)
    INT32           reduce using rule 193 (logic_value -> negation .)
    INT64           reduce using rule 193 (logic_value -> negation .)
    FLOAT32         reduce using rule 193 (logic_value -> negation .)
    FLOAT64         reduce using rule 193 (logic_value -> negation .)
    BYTE            reduce using rule 193 (logic_value -> negation .)
    WFLOAT          reduce using rule 193 (logic_value -> negation .)
    WSTRING         reduce using rule 193 (logic_value -> negation .)
    WINT            reduce using rule 193 (logic_value -> negation .)
    BOOL            reduce using rule 193 (logic_value -> negation .)
    DEFAULT         reduce using rule 193 (logic_value -> negation .)
    CASE            reduce using rule 193 (logic_value -> negation .)
    LLLAVE          reduce using rule 193 (logic_value -> negation .)
    COLON           reduce using rule 193 (logic_value -> negation .)
    RPAREN          reduce using rule 193 (logic_value -> negation .)
    RCORCHE         reduce using rule 193 (logic_value -> negation .)
    COMA            reduce using rule 193 (logic_value -> negation .)


state 201

    (194) logic_value -> comparison .

    AND             reduce using rule 194 (logic_value -> comparison .)
    OR              reduce using rule 194 (logic_value -> comparison .)
    PRINT           reduce using rule 194 (logic_value -> comparison .)
    SCAN            reduce using rule 194 (logic_value -> comparison .)
    FOR             reduce using rule 194 (logic_value -> comparison .)
    CONST           reduce using rule 194 (logic_value -> comparison .)
    ID              reduce using rule 194 (logic_value -> comparison .)
    APPEND          reduce using rule 194 (logic_value -> comparison .)
    LEN             reduce using rule 194 (logic_value -> comparison .)
    COPY            reduce using rule 194 (logic_value -> comparison .)
    DELETE          reduce using rule 194 (logic_value -> comparison .)
    IF              reduce using rule 194 (logic_value -> comparison .)
    ELSE            reduce using rule 194 (logic_value -> comparison .)
    TYPE            reduce using rule 194 (logic_value -> comparison .)
    SWITCH          reduce using rule 194 (logic_value -> comparison .)
    VAR             reduce using rule 194 (logic_value -> comparison .)
    FUNC            reduce using rule 194 (logic_value -> comparison .)
    INTEGER         reduce using rule 194 (logic_value -> comparison .)
    FLOAT           reduce using rule 194 (logic_value -> comparison .)
    NOT             reduce using rule 194 (logic_value -> comparison .)
    RLLAVE          reduce using rule 194 (logic_value -> comparison .)
    RETURN          reduce using rule 194 (logic_value -> comparison .)
    STRING          reduce using rule 194 (logic_value -> comparison .)
    TRUE            reduce using rule 194 (logic_value -> comparison .)
    FALSE           reduce using rule 194 (logic_value -> comparison .)
    INT32           reduce using rule 194 (logic_value -> comparison .)
    INT64           reduce using rule 194 (logic_value -> comparison .)
    FLOAT32         reduce using rule 194 (logic_value -> comparison .)
    FLOAT64         reduce using rule 194 (logic_value -> comparison .)
    BYTE            reduce using rule 194 (logic_value -> comparison .)
    WFLOAT          reduce using rule 194 (logic_value -> comparison .)
    WSTRING         reduce using rule 194 (logic_value -> comparison .)
    WINT            reduce using rule 194 (logic_value -> comparison .)
    BOOL            reduce using rule 194 (logic_value -> comparison .)
    DEFAULT         reduce using rule 194 (logic_value -> comparison .)
    CASE            reduce using rule 194 (logic_value -> comparison .)
    LLLAVE          reduce using rule 194 (logic_value -> comparison .)
    COLON           reduce using rule 194 (logic_value -> comparison .)
    RPAREN          reduce using rule 194 (logic_value -> comparison .)
    RCORCHE         reduce using rule 194 (logic_value -> comparison .)
    COMA            reduce using rule 194 (logic_value -> comparison .)


state 202

    (195) logic_value -> ID .
    (139) value -> ID .
    (179) something_ex -> ID .
    (243) array_var -> ID . LCORCHE index RCORCHE
    (249) map_var -> ID . LCORCHE key RCORCHE
    (157) slice_var -> ID . LCORCHE index_s RCORCHE
    (202) call_func -> ID . LPAREN list_params RPAREN
    (203) call_func -> ID . LPAREN RPAREN

  ! reduce/reduce conflict for GREATER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for GREATER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for EQUAL_COMPARE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MOD resolved using rule 139 (value -> ID .)
    AND             reduce using rule 195 (logic_value -> ID .)
    OR              reduce using rule 195 (logic_value -> ID .)
    PRINT           reduce using rule 195 (logic_value -> ID .)
    SCAN            reduce using rule 195 (logic_value -> ID .)
    FOR             reduce using rule 195 (logic_value -> ID .)
    CONST           reduce using rule 195 (logic_value -> ID .)
    ID              reduce using rule 195 (logic_value -> ID .)
    APPEND          reduce using rule 195 (logic_value -> ID .)
    LEN             reduce using rule 195 (logic_value -> ID .)
    COPY            reduce using rule 195 (logic_value -> ID .)
    DELETE          reduce using rule 195 (logic_value -> ID .)
    IF              reduce using rule 195 (logic_value -> ID .)
    ELSE            reduce using rule 195 (logic_value -> ID .)
    TYPE            reduce using rule 195 (logic_value -> ID .)
    SWITCH          reduce using rule 195 (logic_value -> ID .)
    VAR             reduce using rule 195 (logic_value -> ID .)
    FUNC            reduce using rule 195 (logic_value -> ID .)
    INTEGER         reduce using rule 195 (logic_value -> ID .)
    FLOAT           reduce using rule 195 (logic_value -> ID .)
    NOT             reduce using rule 195 (logic_value -> ID .)
    RLLAVE          reduce using rule 195 (logic_value -> ID .)
    RETURN          reduce using rule 195 (logic_value -> ID .)
    STRING          reduce using rule 195 (logic_value -> ID .)
    TRUE            reduce using rule 195 (logic_value -> ID .)
    FALSE           reduce using rule 195 (logic_value -> ID .)
    INT32           reduce using rule 195 (logic_value -> ID .)
    INT64           reduce using rule 195 (logic_value -> ID .)
    FLOAT32         reduce using rule 195 (logic_value -> ID .)
    FLOAT64         reduce using rule 195 (logic_value -> ID .)
    BYTE            reduce using rule 195 (logic_value -> ID .)
    WFLOAT          reduce using rule 195 (logic_value -> ID .)
    WSTRING         reduce using rule 195 (logic_value -> ID .)
    WINT            reduce using rule 195 (logic_value -> ID .)
    BOOL            reduce using rule 195 (logic_value -> ID .)
    DEFAULT         reduce using rule 195 (logic_value -> ID .)
    CASE            reduce using rule 195 (logic_value -> ID .)
    LLLAVE          reduce using rule 195 (logic_value -> ID .)
    COLON           reduce using rule 195 (logic_value -> ID .)
    RPAREN          reduce using rule 195 (logic_value -> ID .)
    RCORCHE         reduce using rule 195 (logic_value -> ID .)
    COMA            reduce using rule 195 (logic_value -> ID .)
    GREATER         reduce using rule 139 (value -> ID .)
    SMALLER         reduce using rule 139 (value -> ID .)
    GREATER_OR_EQUAL reduce using rule 139 (value -> ID .)
    SMALLER_OR_EQUAL reduce using rule 139 (value -> ID .)
    EQUAL_COMPARE   reduce using rule 139 (value -> ID .)
    NOT_EQUAL       reduce using rule 139 (value -> ID .)
    PLUS            reduce using rule 139 (value -> ID .)
    TIMES           reduce using rule 139 (value -> ID .)
    DIVIDE          reduce using rule 139 (value -> ID .)
    MINUS           reduce using rule 139 (value -> ID .)
    MOD             reduce using rule 139 (value -> ID .)
    LCORCHE         shift and go to state 196
    LPAREN          shift and go to state 146

  ! GREATER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! GREATER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! EQUAL_COMPARE   [ reduce using rule 179 (something_ex -> ID .) ]
  ! NOT_EQUAL       [ reduce using rule 179 (something_ex -> ID .) ]
  ! PLUS            [ reduce using rule 179 (something_ex -> ID .) ]
  ! TIMES           [ reduce using rule 179 (something_ex -> ID .) ]
  ! DIVIDE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! MINUS           [ reduce using rule 179 (something_ex -> ID .) ]
  ! MOD             [ reduce using rule 179 (something_ex -> ID .) ]


state 203

    (109) decConst -> CONST ID data_type_and_value .

    COLON           reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    PRINT           reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    SCAN            reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    FOR             reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    CONST           reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    ID              reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    APPEND          reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    LEN             reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    COPY            reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    DELETE          reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    IF              reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    ELSE            reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    TYPE            reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    SWITCH          reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    VAR             reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    FUNC            reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    INTEGER         reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    FLOAT           reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    NOT             reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    RLLAVE          reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    RETURN          reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    STRING          reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    TRUE            reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    FALSE           reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    INT32           reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    INT64           reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    FLOAT32         reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    FLOAT64         reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    BYTE            reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    WFLOAT          reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    WSTRING         reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    WINT            reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    BOOL            reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    DEFAULT         reduce using rule 109 (decConst -> CONST ID data_type_and_value .)
    CASE            reduce using rule 109 (decConst -> CONST ID data_type_and_value .)


state 204

    (110) decConst -> CONST ID EQUAL . ID
    (111) decConst -> CONST ID EQUAL . data_structure
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE

    ID              shift and go to state 282

    data_structure                 shift and go to state 283
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136

state 205

    (207) data_type_and_value -> WSTRING . EQUAL str_value
    (225) data_type_and_value -> WSTRING . EQUAL error

    EQUAL           shift and go to state 284


state 206

    (208) data_type_and_value -> WINT . EQUAL int_value
    (226) data_type_and_value -> WINT . EQUAL error

    EQUAL           shift and go to state 285


state 207

    (209) data_type_and_value -> INT32 . EQUAL int_value
    (227) data_type_and_value -> INT32 . EQUAL error

    EQUAL           shift and go to state 286


state 208

    (210) data_type_and_value -> INT64 . EQUAL int_value
    (228) data_type_and_value -> INT64 . EQUAL error

    EQUAL           shift and go to state 287


state 209

    (211) data_type_and_value -> WFLOAT . EQUAL float_value
    (229) data_type_and_value -> WFLOAT . EQUAL error

    EQUAL           shift and go to state 288


state 210

    (212) data_type_and_value -> FLOAT32 . EQUAL float_value
    (230) data_type_and_value -> FLOAT32 . EQUAL error

    EQUAL           shift and go to state 289


state 211

    (213) data_type_and_value -> FLOAT64 . EQUAL float_value
    (231) data_type_and_value -> FLOAT64 . EQUAL error

    EQUAL           shift and go to state 290


state 212

    (214) data_type_and_value -> BOOL . EQUAL bool_value
    (232) data_type_and_value -> BOOL . EQUAL error

    EQUAL           shift and go to state 291


state 213

    (80) any -> ID .
    (243) array_var -> ID . LCORCHE index RCORCHE
    (249) map_var -> ID . LCORCHE key RCORCHE
    (157) slice_var -> ID . LCORCHE index_s RCORCHE
    (202) call_func -> ID . LPAREN list_params RPAREN
    (203) call_func -> ID . LPAREN RPAREN
    (179) something_ex -> ID .
    (139) value -> ID .
    (195) logic_value -> ID .

  ! reduce/reduce conflict for COLON resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for PRINT resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for SCAN resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for FOR resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for CONST resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for APPEND resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for LEN resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for COPY resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for DELETE resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for TYPE resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for SWITCH resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for VAR resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for FUNC resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for INTEGER resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for NOT resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for STRING resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for TRUE resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for FALSE resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for INT32 resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for INT64 resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for FLOAT32 resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for FLOAT64 resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for BYTE resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for WFLOAT resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for WSTRING resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for WINT resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for BOOL resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 80 (any -> ID .)
  ! reduce/reduce conflict for GREATER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for GREATER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for EQUAL_COMPARE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MOD resolved using rule 139 (value -> ID .)
    COLON           reduce using rule 80 (any -> ID .)
    PRINT           reduce using rule 80 (any -> ID .)
    SCAN            reduce using rule 80 (any -> ID .)
    FOR             reduce using rule 80 (any -> ID .)
    CONST           reduce using rule 80 (any -> ID .)
    ID              reduce using rule 80 (any -> ID .)
    APPEND          reduce using rule 80 (any -> ID .)
    LEN             reduce using rule 80 (any -> ID .)
    COPY            reduce using rule 80 (any -> ID .)
    DELETE          reduce using rule 80 (any -> ID .)
    IF              reduce using rule 80 (any -> ID .)
    ELSE            reduce using rule 80 (any -> ID .)
    TYPE            reduce using rule 80 (any -> ID .)
    SWITCH          reduce using rule 80 (any -> ID .)
    VAR             reduce using rule 80 (any -> ID .)
    FUNC            reduce using rule 80 (any -> ID .)
    INTEGER         reduce using rule 80 (any -> ID .)
    FLOAT           reduce using rule 80 (any -> ID .)
    NOT             reduce using rule 80 (any -> ID .)
    RLLAVE          reduce using rule 80 (any -> ID .)
    RETURN          reduce using rule 80 (any -> ID .)
    STRING          reduce using rule 80 (any -> ID .)
    TRUE            reduce using rule 80 (any -> ID .)
    FALSE           reduce using rule 80 (any -> ID .)
    INT32           reduce using rule 80 (any -> ID .)
    INT64           reduce using rule 80 (any -> ID .)
    FLOAT32         reduce using rule 80 (any -> ID .)
    FLOAT64         reduce using rule 80 (any -> ID .)
    BYTE            reduce using rule 80 (any -> ID .)
    WFLOAT          reduce using rule 80 (any -> ID .)
    WSTRING         reduce using rule 80 (any -> ID .)
    WINT            reduce using rule 80 (any -> ID .)
    BOOL            reduce using rule 80 (any -> ID .)
    DEFAULT         reduce using rule 80 (any -> ID .)
    CASE            reduce using rule 80 (any -> ID .)
    LCORCHE         shift and go to state 196
    LPAREN          shift and go to state 146
    GREATER         reduce using rule 139 (value -> ID .)
    SMALLER         reduce using rule 139 (value -> ID .)
    GREATER_OR_EQUAL reduce using rule 139 (value -> ID .)
    SMALLER_OR_EQUAL reduce using rule 139 (value -> ID .)
    EQUAL_COMPARE   reduce using rule 139 (value -> ID .)
    NOT_EQUAL       reduce using rule 139 (value -> ID .)
    PLUS            reduce using rule 139 (value -> ID .)
    TIMES           reduce using rule 139 (value -> ID .)
    DIVIDE          reduce using rule 139 (value -> ID .)
    MINUS           reduce using rule 139 (value -> ID .)
    MOD             reduce using rule 139 (value -> ID .)
    AND             reduce using rule 195 (logic_value -> ID .)
    OR              reduce using rule 195 (logic_value -> ID .)

  ! GREATER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! GREATER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! EQUAL_COMPARE   [ reduce using rule 179 (something_ex -> ID .) ]
  ! NOT_EQUAL       [ reduce using rule 179 (something_ex -> ID .) ]
  ! PLUS            [ reduce using rule 179 (something_ex -> ID .) ]
  ! TIMES           [ reduce using rule 179 (something_ex -> ID .) ]
  ! DIVIDE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! MINUS           [ reduce using rule 179 (something_ex -> ID .) ]
  ! MOD             [ reduce using rule 179 (something_ex -> ID .) ]
  ! COLON           [ reduce using rule 179 (something_ex -> ID .) ]
  ! PRINT           [ reduce using rule 179 (something_ex -> ID .) ]
  ! SCAN            [ reduce using rule 179 (something_ex -> ID .) ]
  ! FOR             [ reduce using rule 179 (something_ex -> ID .) ]
  ! CONST           [ reduce using rule 179 (something_ex -> ID .) ]
  ! ID              [ reduce using rule 179 (something_ex -> ID .) ]
  ! APPEND          [ reduce using rule 179 (something_ex -> ID .) ]
  ! LEN             [ reduce using rule 179 (something_ex -> ID .) ]
  ! COPY            [ reduce using rule 179 (something_ex -> ID .) ]
  ! DELETE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! IF              [ reduce using rule 179 (something_ex -> ID .) ]
  ! ELSE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! TYPE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! SWITCH          [ reduce using rule 179 (something_ex -> ID .) ]
  ! VAR             [ reduce using rule 179 (something_ex -> ID .) ]
  ! FUNC            [ reduce using rule 179 (something_ex -> ID .) ]
  ! INTEGER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! FLOAT           [ reduce using rule 179 (something_ex -> ID .) ]
  ! NOT             [ reduce using rule 179 (something_ex -> ID .) ]
  ! RLLAVE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! RETURN          [ reduce using rule 179 (something_ex -> ID .) ]
  ! STRING          [ reduce using rule 179 (something_ex -> ID .) ]
  ! TRUE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! FALSE           [ reduce using rule 179 (something_ex -> ID .) ]
  ! INT32           [ reduce using rule 179 (something_ex -> ID .) ]
  ! INT64           [ reduce using rule 179 (something_ex -> ID .) ]
  ! FLOAT32         [ reduce using rule 179 (something_ex -> ID .) ]
  ! FLOAT64         [ reduce using rule 179 (something_ex -> ID .) ]
  ! BYTE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! WFLOAT          [ reduce using rule 179 (something_ex -> ID .) ]
  ! WSTRING         [ reduce using rule 179 (something_ex -> ID .) ]
  ! WINT            [ reduce using rule 179 (something_ex -> ID .) ]
  ! BOOL            [ reduce using rule 179 (something_ex -> ID .) ]
  ! DEFAULT         [ reduce using rule 179 (something_ex -> ID .) ]
  ! CASE            [ reduce using rule 179 (something_ex -> ID .) ]


state 214

    (77) var_asignation -> ID EQUAL any .

    COLON           reduce using rule 77 (var_asignation -> ID EQUAL any .)
    PRINT           reduce using rule 77 (var_asignation -> ID EQUAL any .)
    SCAN            reduce using rule 77 (var_asignation -> ID EQUAL any .)
    FOR             reduce using rule 77 (var_asignation -> ID EQUAL any .)
    CONST           reduce using rule 77 (var_asignation -> ID EQUAL any .)
    ID              reduce using rule 77 (var_asignation -> ID EQUAL any .)
    APPEND          reduce using rule 77 (var_asignation -> ID EQUAL any .)
    LEN             reduce using rule 77 (var_asignation -> ID EQUAL any .)
    COPY            reduce using rule 77 (var_asignation -> ID EQUAL any .)
    DELETE          reduce using rule 77 (var_asignation -> ID EQUAL any .)
    IF              reduce using rule 77 (var_asignation -> ID EQUAL any .)
    ELSE            reduce using rule 77 (var_asignation -> ID EQUAL any .)
    TYPE            reduce using rule 77 (var_asignation -> ID EQUAL any .)
    SWITCH          reduce using rule 77 (var_asignation -> ID EQUAL any .)
    VAR             reduce using rule 77 (var_asignation -> ID EQUAL any .)
    FUNC            reduce using rule 77 (var_asignation -> ID EQUAL any .)
    INTEGER         reduce using rule 77 (var_asignation -> ID EQUAL any .)
    FLOAT           reduce using rule 77 (var_asignation -> ID EQUAL any .)
    NOT             reduce using rule 77 (var_asignation -> ID EQUAL any .)
    RLLAVE          reduce using rule 77 (var_asignation -> ID EQUAL any .)
    RETURN          reduce using rule 77 (var_asignation -> ID EQUAL any .)
    STRING          reduce using rule 77 (var_asignation -> ID EQUAL any .)
    TRUE            reduce using rule 77 (var_asignation -> ID EQUAL any .)
    FALSE           reduce using rule 77 (var_asignation -> ID EQUAL any .)
    INT32           reduce using rule 77 (var_asignation -> ID EQUAL any .)
    INT64           reduce using rule 77 (var_asignation -> ID EQUAL any .)
    FLOAT32         reduce using rule 77 (var_asignation -> ID EQUAL any .)
    FLOAT64         reduce using rule 77 (var_asignation -> ID EQUAL any .)
    BYTE            reduce using rule 77 (var_asignation -> ID EQUAL any .)
    WFLOAT          reduce using rule 77 (var_asignation -> ID EQUAL any .)
    WSTRING         reduce using rule 77 (var_asignation -> ID EQUAL any .)
    WINT            reduce using rule 77 (var_asignation -> ID EQUAL any .)
    BOOL            reduce using rule 77 (var_asignation -> ID EQUAL any .)
    DEFAULT         reduce using rule 77 (var_asignation -> ID EQUAL any .)
    CASE            reduce using rule 77 (var_asignation -> ID EQUAL any .)


state 215

    (78) any -> values .

    COLON           reduce using rule 78 (any -> values .)
    PRINT           reduce using rule 78 (any -> values .)
    SCAN            reduce using rule 78 (any -> values .)
    FOR             reduce using rule 78 (any -> values .)
    CONST           reduce using rule 78 (any -> values .)
    ID              reduce using rule 78 (any -> values .)
    APPEND          reduce using rule 78 (any -> values .)
    LEN             reduce using rule 78 (any -> values .)
    COPY            reduce using rule 78 (any -> values .)
    DELETE          reduce using rule 78 (any -> values .)
    IF              reduce using rule 78 (any -> values .)
    ELSE            reduce using rule 78 (any -> values .)
    TYPE            reduce using rule 78 (any -> values .)
    SWITCH          reduce using rule 78 (any -> values .)
    VAR             reduce using rule 78 (any -> values .)
    FUNC            reduce using rule 78 (any -> values .)
    INTEGER         reduce using rule 78 (any -> values .)
    FLOAT           reduce using rule 78 (any -> values .)
    NOT             reduce using rule 78 (any -> values .)
    RLLAVE          reduce using rule 78 (any -> values .)
    RETURN          reduce using rule 78 (any -> values .)
    STRING          reduce using rule 78 (any -> values .)
    TRUE            reduce using rule 78 (any -> values .)
    FALSE           reduce using rule 78 (any -> values .)
    INT32           reduce using rule 78 (any -> values .)
    INT64           reduce using rule 78 (any -> values .)
    FLOAT32         reduce using rule 78 (any -> values .)
    FLOAT64         reduce using rule 78 (any -> values .)
    BYTE            reduce using rule 78 (any -> values .)
    WFLOAT          reduce using rule 78 (any -> values .)
    WSTRING         reduce using rule 78 (any -> values .)
    WINT            reduce using rule 78 (any -> values .)
    BOOL            reduce using rule 78 (any -> values .)
    DEFAULT         reduce using rule 78 (any -> values .)
    CASE            reduce using rule 78 (any -> values .)


state 216

    (79) any -> operations .

    COLON           reduce using rule 79 (any -> operations .)
    PRINT           reduce using rule 79 (any -> operations .)
    SCAN            reduce using rule 79 (any -> operations .)
    FOR             reduce using rule 79 (any -> operations .)
    CONST           reduce using rule 79 (any -> operations .)
    ID              reduce using rule 79 (any -> operations .)
    APPEND          reduce using rule 79 (any -> operations .)
    LEN             reduce using rule 79 (any -> operations .)
    COPY            reduce using rule 79 (any -> operations .)
    DELETE          reduce using rule 79 (any -> operations .)
    IF              reduce using rule 79 (any -> operations .)
    ELSE            reduce using rule 79 (any -> operations .)
    TYPE            reduce using rule 79 (any -> operations .)
    SWITCH          reduce using rule 79 (any -> operations .)
    VAR             reduce using rule 79 (any -> operations .)
    FUNC            reduce using rule 79 (any -> operations .)
    INTEGER         reduce using rule 79 (any -> operations .)
    FLOAT           reduce using rule 79 (any -> operations .)
    NOT             reduce using rule 79 (any -> operations .)
    RLLAVE          reduce using rule 79 (any -> operations .)
    RETURN          reduce using rule 79 (any -> operations .)
    STRING          reduce using rule 79 (any -> operations .)
    TRUE            reduce using rule 79 (any -> operations .)
    FALSE           reduce using rule 79 (any -> operations .)
    INT32           reduce using rule 79 (any -> operations .)
    INT64           reduce using rule 79 (any -> operations .)
    FLOAT32         reduce using rule 79 (any -> operations .)
    FLOAT64         reduce using rule 79 (any -> operations .)
    BYTE            reduce using rule 79 (any -> operations .)
    WFLOAT          reduce using rule 79 (any -> operations .)
    WSTRING         reduce using rule 79 (any -> operations .)
    WINT            reduce using rule 79 (any -> operations .)
    BOOL            reduce using rule 79 (any -> operations .)
    DEFAULT         reduce using rule 79 (any -> operations .)
    CASE            reduce using rule 79 (any -> operations .)


state 217

    (81) any -> data_structure .
    (182) something_ex -> data_structure .

  ! reduce/reduce conflict for COLON resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for PRINT resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for SCAN resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for FOR resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for CONST resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for ID resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for APPEND resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for LEN resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for COPY resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for DELETE resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for IF resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for ELSE resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for TYPE resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for SWITCH resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for VAR resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for FUNC resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for INTEGER resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for FLOAT resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for NOT resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for RETURN resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for STRING resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for TRUE resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for FALSE resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for INT32 resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for INT64 resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for FLOAT32 resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for FLOAT64 resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for BYTE resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for WFLOAT resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for WSTRING resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for WINT resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for BOOL resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 81 (any -> data_structure .)
  ! reduce/reduce conflict for CASE resolved using rule 81 (any -> data_structure .)
    COLON           reduce using rule 81 (any -> data_structure .)
    PRINT           reduce using rule 81 (any -> data_structure .)
    SCAN            reduce using rule 81 (any -> data_structure .)
    FOR             reduce using rule 81 (any -> data_structure .)
    CONST           reduce using rule 81 (any -> data_structure .)
    ID              reduce using rule 81 (any -> data_structure .)
    APPEND          reduce using rule 81 (any -> data_structure .)
    LEN             reduce using rule 81 (any -> data_structure .)
    COPY            reduce using rule 81 (any -> data_structure .)
    DELETE          reduce using rule 81 (any -> data_structure .)
    IF              reduce using rule 81 (any -> data_structure .)
    ELSE            reduce using rule 81 (any -> data_structure .)
    TYPE            reduce using rule 81 (any -> data_structure .)
    SWITCH          reduce using rule 81 (any -> data_structure .)
    VAR             reduce using rule 81 (any -> data_structure .)
    FUNC            reduce using rule 81 (any -> data_structure .)
    INTEGER         reduce using rule 81 (any -> data_structure .)
    FLOAT           reduce using rule 81 (any -> data_structure .)
    NOT             reduce using rule 81 (any -> data_structure .)
    RLLAVE          reduce using rule 81 (any -> data_structure .)
    RETURN          reduce using rule 81 (any -> data_structure .)
    STRING          reduce using rule 81 (any -> data_structure .)
    TRUE            reduce using rule 81 (any -> data_structure .)
    FALSE           reduce using rule 81 (any -> data_structure .)
    INT32           reduce using rule 81 (any -> data_structure .)
    INT64           reduce using rule 81 (any -> data_structure .)
    FLOAT32         reduce using rule 81 (any -> data_structure .)
    FLOAT64         reduce using rule 81 (any -> data_structure .)
    BYTE            reduce using rule 81 (any -> data_structure .)
    WFLOAT          reduce using rule 81 (any -> data_structure .)
    WSTRING         reduce using rule 81 (any -> data_structure .)
    WINT            reduce using rule 81 (any -> data_structure .)
    BOOL            reduce using rule 81 (any -> data_structure .)
    DEFAULT         reduce using rule 81 (any -> data_structure .)
    CASE            reduce using rule 81 (any -> data_structure .)
    GREATER         reduce using rule 182 (something_ex -> data_structure .)
    SMALLER         reduce using rule 182 (something_ex -> data_structure .)
    GREATER_OR_EQUAL reduce using rule 182 (something_ex -> data_structure .)
    SMALLER_OR_EQUAL reduce using rule 182 (something_ex -> data_structure .)
    EQUAL_COMPARE   reduce using rule 182 (something_ex -> data_structure .)
    NOT_EQUAL       reduce using rule 182 (something_ex -> data_structure .)
    PLUS            reduce using rule 182 (something_ex -> data_structure .)
    TIMES           reduce using rule 182 (something_ex -> data_structure .)
    DIVIDE          reduce using rule 182 (something_ex -> data_structure .)
    MINUS           reduce using rule 182 (something_ex -> data_structure .)
    MOD             reduce using rule 182 (something_ex -> data_structure .)

  ! COLON           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! PRINT           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! SCAN            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! FOR             [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! CONST           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! ID              [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! APPEND          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! LEN             [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! COPY            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! DELETE          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! IF              [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! ELSE            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! TYPE            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! SWITCH          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! VAR             [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! FUNC            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! INTEGER         [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! FLOAT           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! NOT             [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! RLLAVE          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! RETURN          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! STRING          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! TRUE            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! FALSE           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! INT32           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! INT64           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! FLOAT32         [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! FLOAT64         [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! BYTE            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! WFLOAT          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! WSTRING         [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! WINT            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! BOOL            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! DEFAULT         [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! CASE            [ reduce using rule 182 (something_ex -> data_structure .) ]


state 218

    (82) any -> funciones .
    (183) something_ex -> funciones .

  ! reduce/reduce conflict for COLON resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for PRINT resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for SCAN resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for FOR resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for CONST resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for ID resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for APPEND resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for LEN resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for COPY resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for DELETE resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for IF resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for ELSE resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for TYPE resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for SWITCH resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for VAR resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for FUNC resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for INTEGER resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for FLOAT resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for NOT resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for RETURN resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for STRING resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for TRUE resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for FALSE resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for INT32 resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for INT64 resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for FLOAT32 resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for FLOAT64 resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for BYTE resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for WFLOAT resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for WSTRING resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for WINT resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for BOOL resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 82 (any -> funciones .)
  ! reduce/reduce conflict for CASE resolved using rule 82 (any -> funciones .)
    COLON           reduce using rule 82 (any -> funciones .)
    PRINT           reduce using rule 82 (any -> funciones .)
    SCAN            reduce using rule 82 (any -> funciones .)
    FOR             reduce using rule 82 (any -> funciones .)
    CONST           reduce using rule 82 (any -> funciones .)
    ID              reduce using rule 82 (any -> funciones .)
    APPEND          reduce using rule 82 (any -> funciones .)
    LEN             reduce using rule 82 (any -> funciones .)
    COPY            reduce using rule 82 (any -> funciones .)
    DELETE          reduce using rule 82 (any -> funciones .)
    IF              reduce using rule 82 (any -> funciones .)
    ELSE            reduce using rule 82 (any -> funciones .)
    TYPE            reduce using rule 82 (any -> funciones .)
    SWITCH          reduce using rule 82 (any -> funciones .)
    VAR             reduce using rule 82 (any -> funciones .)
    FUNC            reduce using rule 82 (any -> funciones .)
    INTEGER         reduce using rule 82 (any -> funciones .)
    FLOAT           reduce using rule 82 (any -> funciones .)
    NOT             reduce using rule 82 (any -> funciones .)
    RLLAVE          reduce using rule 82 (any -> funciones .)
    RETURN          reduce using rule 82 (any -> funciones .)
    STRING          reduce using rule 82 (any -> funciones .)
    TRUE            reduce using rule 82 (any -> funciones .)
    FALSE           reduce using rule 82 (any -> funciones .)
    INT32           reduce using rule 82 (any -> funciones .)
    INT64           reduce using rule 82 (any -> funciones .)
    FLOAT32         reduce using rule 82 (any -> funciones .)
    FLOAT64         reduce using rule 82 (any -> funciones .)
    BYTE            reduce using rule 82 (any -> funciones .)
    WFLOAT          reduce using rule 82 (any -> funciones .)
    WSTRING         reduce using rule 82 (any -> funciones .)
    WINT            reduce using rule 82 (any -> funciones .)
    BOOL            reduce using rule 82 (any -> funciones .)
    DEFAULT         reduce using rule 82 (any -> funciones .)
    CASE            reduce using rule 82 (any -> funciones .)
    GREATER         reduce using rule 183 (something_ex -> funciones .)
    SMALLER         reduce using rule 183 (something_ex -> funciones .)
    GREATER_OR_EQUAL reduce using rule 183 (something_ex -> funciones .)
    SMALLER_OR_EQUAL reduce using rule 183 (something_ex -> funciones .)
    EQUAL_COMPARE   reduce using rule 183 (something_ex -> funciones .)
    NOT_EQUAL       reduce using rule 183 (something_ex -> funciones .)
    PLUS            reduce using rule 183 (something_ex -> funciones .)
    TIMES           reduce using rule 183 (something_ex -> funciones .)
    DIVIDE          reduce using rule 183 (something_ex -> funciones .)
    MINUS           reduce using rule 183 (something_ex -> funciones .)
    MOD             reduce using rule 183 (something_ex -> funciones .)

  ! COLON           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! PRINT           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! SCAN            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FOR             [ reduce using rule 183 (something_ex -> funciones .) ]
  ! CONST           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! ID              [ reduce using rule 183 (something_ex -> funciones .) ]
  ! APPEND          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! LEN             [ reduce using rule 183 (something_ex -> funciones .) ]
  ! COPY            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! DELETE          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! IF              [ reduce using rule 183 (something_ex -> funciones .) ]
  ! ELSE            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! TYPE            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! SWITCH          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! VAR             [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FUNC            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! INTEGER         [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FLOAT           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! NOT             [ reduce using rule 183 (something_ex -> funciones .) ]
  ! RLLAVE          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! RETURN          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! STRING          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! TRUE            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FALSE           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! INT32           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! INT64           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FLOAT32         [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FLOAT64         [ reduce using rule 183 (something_ex -> funciones .) ]
  ! BYTE            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! WFLOAT          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! WSTRING         [ reduce using rule 183 (something_ex -> funciones .) ]
  ! WINT            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! BOOL            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! DEFAULT         [ reduce using rule 183 (something_ex -> funciones .) ]
  ! CASE            [ reduce using rule 183 (something_ex -> funciones .) ]


state 219

    (101) cStruct -> ID DEQUAL ID . LLLAVE asignaciones RLLAVE
    (127) algo -> ID .
    (243) array_var -> ID . LCORCHE index RCORCHE
    (249) map_var -> ID . LCORCHE key RCORCHE
    (157) slice_var -> ID . LCORCHE index_s RCORCHE
    (202) call_func -> ID . LPAREN list_params RPAREN
    (203) call_func -> ID . LPAREN RPAREN
    (179) something_ex -> ID .
    (139) value -> ID .
    (195) logic_value -> ID .

  ! reduce/reduce conflict for COLON resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for PRINT resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for SCAN resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for FOR resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for CONST resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for APPEND resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for LEN resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for COPY resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for DELETE resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for TYPE resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for SWITCH resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for VAR resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for FUNC resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for INTEGER resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for NOT resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for STRING resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for TRUE resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for FALSE resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for INT32 resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for INT64 resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for FLOAT32 resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for FLOAT64 resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for BYTE resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for WFLOAT resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for WSTRING resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for WINT resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for BOOL resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 127 (algo -> ID .)
  ! reduce/reduce conflict for GREATER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for GREATER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for EQUAL_COMPARE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MOD resolved using rule 139 (value -> ID .)
    LLLAVE          shift and go to state 292
    COLON           reduce using rule 127 (algo -> ID .)
    PRINT           reduce using rule 127 (algo -> ID .)
    SCAN            reduce using rule 127 (algo -> ID .)
    FOR             reduce using rule 127 (algo -> ID .)
    CONST           reduce using rule 127 (algo -> ID .)
    ID              reduce using rule 127 (algo -> ID .)
    APPEND          reduce using rule 127 (algo -> ID .)
    LEN             reduce using rule 127 (algo -> ID .)
    COPY            reduce using rule 127 (algo -> ID .)
    DELETE          reduce using rule 127 (algo -> ID .)
    IF              reduce using rule 127 (algo -> ID .)
    ELSE            reduce using rule 127 (algo -> ID .)
    TYPE            reduce using rule 127 (algo -> ID .)
    SWITCH          reduce using rule 127 (algo -> ID .)
    VAR             reduce using rule 127 (algo -> ID .)
    FUNC            reduce using rule 127 (algo -> ID .)
    INTEGER         reduce using rule 127 (algo -> ID .)
    FLOAT           reduce using rule 127 (algo -> ID .)
    NOT             reduce using rule 127 (algo -> ID .)
    RLLAVE          reduce using rule 127 (algo -> ID .)
    RETURN          reduce using rule 127 (algo -> ID .)
    STRING          reduce using rule 127 (algo -> ID .)
    TRUE            reduce using rule 127 (algo -> ID .)
    FALSE           reduce using rule 127 (algo -> ID .)
    INT32           reduce using rule 127 (algo -> ID .)
    INT64           reduce using rule 127 (algo -> ID .)
    FLOAT32         reduce using rule 127 (algo -> ID .)
    FLOAT64         reduce using rule 127 (algo -> ID .)
    BYTE            reduce using rule 127 (algo -> ID .)
    WFLOAT          reduce using rule 127 (algo -> ID .)
    WSTRING         reduce using rule 127 (algo -> ID .)
    WINT            reduce using rule 127 (algo -> ID .)
    BOOL            reduce using rule 127 (algo -> ID .)
    DEFAULT         reduce using rule 127 (algo -> ID .)
    CASE            reduce using rule 127 (algo -> ID .)
    LCORCHE         shift and go to state 196
    LPAREN          shift and go to state 146
    GREATER         reduce using rule 139 (value -> ID .)
    SMALLER         reduce using rule 139 (value -> ID .)
    GREATER_OR_EQUAL reduce using rule 139 (value -> ID .)
    SMALLER_OR_EQUAL reduce using rule 139 (value -> ID .)
    EQUAL_COMPARE   reduce using rule 139 (value -> ID .)
    NOT_EQUAL       reduce using rule 139 (value -> ID .)
    PLUS            reduce using rule 139 (value -> ID .)
    TIMES           reduce using rule 139 (value -> ID .)
    DIVIDE          reduce using rule 139 (value -> ID .)
    MINUS           reduce using rule 139 (value -> ID .)
    MOD             reduce using rule 139 (value -> ID .)
    AND             reduce using rule 195 (logic_value -> ID .)
    OR              reduce using rule 195 (logic_value -> ID .)

  ! GREATER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! GREATER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! EQUAL_COMPARE   [ reduce using rule 179 (something_ex -> ID .) ]
  ! NOT_EQUAL       [ reduce using rule 179 (something_ex -> ID .) ]
  ! PLUS            [ reduce using rule 179 (something_ex -> ID .) ]
  ! TIMES           [ reduce using rule 179 (something_ex -> ID .) ]
  ! DIVIDE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! MINUS           [ reduce using rule 179 (something_ex -> ID .) ]
  ! MOD             [ reduce using rule 179 (something_ex -> ID .) ]
  ! COLON           [ reduce using rule 179 (something_ex -> ID .) ]
  ! PRINT           [ reduce using rule 179 (something_ex -> ID .) ]
  ! SCAN            [ reduce using rule 179 (something_ex -> ID .) ]
  ! FOR             [ reduce using rule 179 (something_ex -> ID .) ]
  ! CONST           [ reduce using rule 179 (something_ex -> ID .) ]
  ! ID              [ reduce using rule 179 (something_ex -> ID .) ]
  ! APPEND          [ reduce using rule 179 (something_ex -> ID .) ]
  ! LEN             [ reduce using rule 179 (something_ex -> ID .) ]
  ! COPY            [ reduce using rule 179 (something_ex -> ID .) ]
  ! DELETE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! IF              [ reduce using rule 179 (something_ex -> ID .) ]
  ! ELSE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! TYPE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! SWITCH          [ reduce using rule 179 (something_ex -> ID .) ]
  ! VAR             [ reduce using rule 179 (something_ex -> ID .) ]
  ! FUNC            [ reduce using rule 179 (something_ex -> ID .) ]
  ! INTEGER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! FLOAT           [ reduce using rule 179 (something_ex -> ID .) ]
  ! NOT             [ reduce using rule 179 (something_ex -> ID .) ]
  ! RLLAVE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! RETURN          [ reduce using rule 179 (something_ex -> ID .) ]
  ! STRING          [ reduce using rule 179 (something_ex -> ID .) ]
  ! TRUE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! FALSE           [ reduce using rule 179 (something_ex -> ID .) ]
  ! INT32           [ reduce using rule 179 (something_ex -> ID .) ]
  ! INT64           [ reduce using rule 179 (something_ex -> ID .) ]
  ! FLOAT32         [ reduce using rule 179 (something_ex -> ID .) ]
  ! FLOAT64         [ reduce using rule 179 (something_ex -> ID .) ]
  ! BYTE            [ reduce using rule 179 (something_ex -> ID .) ]
  ! WFLOAT          [ reduce using rule 179 (something_ex -> ID .) ]
  ! WSTRING         [ reduce using rule 179 (something_ex -> ID .) ]
  ! WINT            [ reduce using rule 179 (something_ex -> ID .) ]
  ! BOOL            [ reduce using rule 179 (something_ex -> ID .) ]
  ! DEFAULT         [ reduce using rule 179 (something_ex -> ID .) ]
  ! CASE            [ reduce using rule 179 (something_ex -> ID .) ]


state 220

    (150) slice_declaration -> ID DEQUAL funM .

    COLON           reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    PRINT           reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    SCAN            reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    FOR             reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    CONST           reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    ID              reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    APPEND          reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    LEN             reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    COPY            reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    DELETE          reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    IF              reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    ELSE            reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    TYPE            reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    SWITCH          reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    VAR             reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    FUNC            reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    INTEGER         reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    FLOAT           reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    NOT             reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    RLLAVE          reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    RETURN          reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    STRING          reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    TRUE            reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    FALSE           reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    INT32           reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    INT64           reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    FLOAT32         reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    FLOAT64         reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    BYTE            reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    WFLOAT          reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    WSTRING         reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    WINT            reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    BOOL            reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    DEFAULT         reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)
    CASE            reduce using rule 150 (slice_declaration -> ID DEQUAL funM .)


state 221

    (151) slice_declaration -> ID DEQUAL LCORCHE . RCORCHE data_types arr_content

    RCORCHE         shift and go to state 293


state 222

    (124) dynamic -> ID DEQUAL algo .

    COLON           reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    PRINT           reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    SCAN            reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    FOR             reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    CONST           reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    ID              reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    APPEND          reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    LEN             reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    COPY            reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    DELETE          reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    IF              reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    ELSE            reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    TYPE            reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    SWITCH          reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    VAR             reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    FUNC            reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    INTEGER         reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    FLOAT           reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    NOT             reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    RLLAVE          reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    RETURN          reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    STRING          reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    TRUE            reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    FALSE           reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    INT32           reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    INT64           reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    FLOAT32         reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    FLOAT64         reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    BYTE            reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    WFLOAT          reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    WSTRING         reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    WINT            reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    BOOL            reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    DEFAULT         reduce using rule 124 (dynamic -> ID DEQUAL algo .)
    CASE            reduce using rule 124 (dynamic -> ID DEQUAL algo .)


state 223

    (152) funM -> MAKE . LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN
    (153) funM -> MAKE . LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN

    LPAREN          shift and go to state 294


state 224

    (125) algo -> values .

    COLON           reduce using rule 125 (algo -> values .)
    PRINT           reduce using rule 125 (algo -> values .)
    SCAN            reduce using rule 125 (algo -> values .)
    FOR             reduce using rule 125 (algo -> values .)
    CONST           reduce using rule 125 (algo -> values .)
    ID              reduce using rule 125 (algo -> values .)
    APPEND          reduce using rule 125 (algo -> values .)
    LEN             reduce using rule 125 (algo -> values .)
    COPY            reduce using rule 125 (algo -> values .)
    DELETE          reduce using rule 125 (algo -> values .)
    IF              reduce using rule 125 (algo -> values .)
    ELSE            reduce using rule 125 (algo -> values .)
    TYPE            reduce using rule 125 (algo -> values .)
    SWITCH          reduce using rule 125 (algo -> values .)
    VAR             reduce using rule 125 (algo -> values .)
    FUNC            reduce using rule 125 (algo -> values .)
    INTEGER         reduce using rule 125 (algo -> values .)
    FLOAT           reduce using rule 125 (algo -> values .)
    NOT             reduce using rule 125 (algo -> values .)
    RLLAVE          reduce using rule 125 (algo -> values .)
    RETURN          reduce using rule 125 (algo -> values .)
    STRING          reduce using rule 125 (algo -> values .)
    TRUE            reduce using rule 125 (algo -> values .)
    FALSE           reduce using rule 125 (algo -> values .)
    INT32           reduce using rule 125 (algo -> values .)
    INT64           reduce using rule 125 (algo -> values .)
    FLOAT32         reduce using rule 125 (algo -> values .)
    FLOAT64         reduce using rule 125 (algo -> values .)
    BYTE            reduce using rule 125 (algo -> values .)
    WFLOAT          reduce using rule 125 (algo -> values .)
    WSTRING         reduce using rule 125 (algo -> values .)
    WINT            reduce using rule 125 (algo -> values .)
    BOOL            reduce using rule 125 (algo -> values .)
    DEFAULT         reduce using rule 125 (algo -> values .)
    CASE            reduce using rule 125 (algo -> values .)


state 225

    (126) algo -> operations .

    COLON           reduce using rule 126 (algo -> operations .)
    PRINT           reduce using rule 126 (algo -> operations .)
    SCAN            reduce using rule 126 (algo -> operations .)
    FOR             reduce using rule 126 (algo -> operations .)
    CONST           reduce using rule 126 (algo -> operations .)
    ID              reduce using rule 126 (algo -> operations .)
    APPEND          reduce using rule 126 (algo -> operations .)
    LEN             reduce using rule 126 (algo -> operations .)
    COPY            reduce using rule 126 (algo -> operations .)
    DELETE          reduce using rule 126 (algo -> operations .)
    IF              reduce using rule 126 (algo -> operations .)
    ELSE            reduce using rule 126 (algo -> operations .)
    TYPE            reduce using rule 126 (algo -> operations .)
    SWITCH          reduce using rule 126 (algo -> operations .)
    VAR             reduce using rule 126 (algo -> operations .)
    FUNC            reduce using rule 126 (algo -> operations .)
    INTEGER         reduce using rule 126 (algo -> operations .)
    FLOAT           reduce using rule 126 (algo -> operations .)
    NOT             reduce using rule 126 (algo -> operations .)
    RLLAVE          reduce using rule 126 (algo -> operations .)
    RETURN          reduce using rule 126 (algo -> operations .)
    STRING          reduce using rule 126 (algo -> operations .)
    TRUE            reduce using rule 126 (algo -> operations .)
    FALSE           reduce using rule 126 (algo -> operations .)
    INT32           reduce using rule 126 (algo -> operations .)
    INT64           reduce using rule 126 (algo -> operations .)
    FLOAT32         reduce using rule 126 (algo -> operations .)
    FLOAT64         reduce using rule 126 (algo -> operations .)
    BYTE            reduce using rule 126 (algo -> operations .)
    WFLOAT          reduce using rule 126 (algo -> operations .)
    WSTRING         reduce using rule 126 (algo -> operations .)
    WINT            reduce using rule 126 (algo -> operations .)
    BOOL            reduce using rule 126 (algo -> operations .)
    DEFAULT         reduce using rule 126 (algo -> operations .)
    CASE            reduce using rule 126 (algo -> operations .)


state 226

    (128) algo -> data_structure .
    (182) something_ex -> data_structure .

  ! reduce/reduce conflict for COLON resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for PRINT resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for SCAN resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for FOR resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for CONST resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for ID resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for APPEND resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for LEN resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for COPY resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for DELETE resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for IF resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for ELSE resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for TYPE resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for SWITCH resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for VAR resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for FUNC resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for INTEGER resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for FLOAT resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for NOT resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for RETURN resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for STRING resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for TRUE resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for FALSE resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for INT32 resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for INT64 resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for FLOAT32 resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for FLOAT64 resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for BYTE resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for WFLOAT resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for WSTRING resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for WINT resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for BOOL resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 128 (algo -> data_structure .)
  ! reduce/reduce conflict for CASE resolved using rule 128 (algo -> data_structure .)
    COLON           reduce using rule 128 (algo -> data_structure .)
    PRINT           reduce using rule 128 (algo -> data_structure .)
    SCAN            reduce using rule 128 (algo -> data_structure .)
    FOR             reduce using rule 128 (algo -> data_structure .)
    CONST           reduce using rule 128 (algo -> data_structure .)
    ID              reduce using rule 128 (algo -> data_structure .)
    APPEND          reduce using rule 128 (algo -> data_structure .)
    LEN             reduce using rule 128 (algo -> data_structure .)
    COPY            reduce using rule 128 (algo -> data_structure .)
    DELETE          reduce using rule 128 (algo -> data_structure .)
    IF              reduce using rule 128 (algo -> data_structure .)
    ELSE            reduce using rule 128 (algo -> data_structure .)
    TYPE            reduce using rule 128 (algo -> data_structure .)
    SWITCH          reduce using rule 128 (algo -> data_structure .)
    VAR             reduce using rule 128 (algo -> data_structure .)
    FUNC            reduce using rule 128 (algo -> data_structure .)
    INTEGER         reduce using rule 128 (algo -> data_structure .)
    FLOAT           reduce using rule 128 (algo -> data_structure .)
    NOT             reduce using rule 128 (algo -> data_structure .)
    RLLAVE          reduce using rule 128 (algo -> data_structure .)
    RETURN          reduce using rule 128 (algo -> data_structure .)
    STRING          reduce using rule 128 (algo -> data_structure .)
    TRUE            reduce using rule 128 (algo -> data_structure .)
    FALSE           reduce using rule 128 (algo -> data_structure .)
    INT32           reduce using rule 128 (algo -> data_structure .)
    INT64           reduce using rule 128 (algo -> data_structure .)
    FLOAT32         reduce using rule 128 (algo -> data_structure .)
    FLOAT64         reduce using rule 128 (algo -> data_structure .)
    BYTE            reduce using rule 128 (algo -> data_structure .)
    WFLOAT          reduce using rule 128 (algo -> data_structure .)
    WSTRING         reduce using rule 128 (algo -> data_structure .)
    WINT            reduce using rule 128 (algo -> data_structure .)
    BOOL            reduce using rule 128 (algo -> data_structure .)
    DEFAULT         reduce using rule 128 (algo -> data_structure .)
    CASE            reduce using rule 128 (algo -> data_structure .)
    GREATER         reduce using rule 182 (something_ex -> data_structure .)
    SMALLER         reduce using rule 182 (something_ex -> data_structure .)
    GREATER_OR_EQUAL reduce using rule 182 (something_ex -> data_structure .)
    SMALLER_OR_EQUAL reduce using rule 182 (something_ex -> data_structure .)
    EQUAL_COMPARE   reduce using rule 182 (something_ex -> data_structure .)
    NOT_EQUAL       reduce using rule 182 (something_ex -> data_structure .)
    PLUS            reduce using rule 182 (something_ex -> data_structure .)
    TIMES           reduce using rule 182 (something_ex -> data_structure .)
    DIVIDE          reduce using rule 182 (something_ex -> data_structure .)
    MINUS           reduce using rule 182 (something_ex -> data_structure .)
    MOD             reduce using rule 182 (something_ex -> data_structure .)

  ! COLON           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! PRINT           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! SCAN            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! FOR             [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! CONST           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! ID              [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! APPEND          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! LEN             [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! COPY            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! DELETE          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! IF              [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! ELSE            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! TYPE            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! SWITCH          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! VAR             [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! FUNC            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! INTEGER         [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! FLOAT           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! NOT             [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! RLLAVE          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! RETURN          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! STRING          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! TRUE            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! FALSE           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! INT32           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! INT64           [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! FLOAT32         [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! FLOAT64         [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! BYTE            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! WFLOAT          [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! WSTRING         [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! WINT            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! BOOL            [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! DEFAULT         [ reduce using rule 182 (something_ex -> data_structure .) ]
  ! CASE            [ reduce using rule 182 (something_ex -> data_structure .) ]


state 227

    (129) algo -> funciones .
    (183) something_ex -> funciones .

  ! reduce/reduce conflict for COLON resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for PRINT resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for SCAN resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for FOR resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for CONST resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for ID resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for APPEND resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for LEN resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for COPY resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for DELETE resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for IF resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for ELSE resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for TYPE resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for SWITCH resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for VAR resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for FUNC resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for INTEGER resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for FLOAT resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for NOT resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for RETURN resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for STRING resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for TRUE resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for FALSE resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for INT32 resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for INT64 resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for FLOAT32 resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for FLOAT64 resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for BYTE resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for WFLOAT resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for WSTRING resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for WINT resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for BOOL resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 129 (algo -> funciones .)
  ! reduce/reduce conflict for CASE resolved using rule 129 (algo -> funciones .)
    COLON           reduce using rule 129 (algo -> funciones .)
    PRINT           reduce using rule 129 (algo -> funciones .)
    SCAN            reduce using rule 129 (algo -> funciones .)
    FOR             reduce using rule 129 (algo -> funciones .)
    CONST           reduce using rule 129 (algo -> funciones .)
    ID              reduce using rule 129 (algo -> funciones .)
    APPEND          reduce using rule 129 (algo -> funciones .)
    LEN             reduce using rule 129 (algo -> funciones .)
    COPY            reduce using rule 129 (algo -> funciones .)
    DELETE          reduce using rule 129 (algo -> funciones .)
    IF              reduce using rule 129 (algo -> funciones .)
    ELSE            reduce using rule 129 (algo -> funciones .)
    TYPE            reduce using rule 129 (algo -> funciones .)
    SWITCH          reduce using rule 129 (algo -> funciones .)
    VAR             reduce using rule 129 (algo -> funciones .)
    FUNC            reduce using rule 129 (algo -> funciones .)
    INTEGER         reduce using rule 129 (algo -> funciones .)
    FLOAT           reduce using rule 129 (algo -> funciones .)
    NOT             reduce using rule 129 (algo -> funciones .)
    RLLAVE          reduce using rule 129 (algo -> funciones .)
    RETURN          reduce using rule 129 (algo -> funciones .)
    STRING          reduce using rule 129 (algo -> funciones .)
    TRUE            reduce using rule 129 (algo -> funciones .)
    FALSE           reduce using rule 129 (algo -> funciones .)
    INT32           reduce using rule 129 (algo -> funciones .)
    INT64           reduce using rule 129 (algo -> funciones .)
    FLOAT32         reduce using rule 129 (algo -> funciones .)
    FLOAT64         reduce using rule 129 (algo -> funciones .)
    BYTE            reduce using rule 129 (algo -> funciones .)
    WFLOAT          reduce using rule 129 (algo -> funciones .)
    WSTRING         reduce using rule 129 (algo -> funciones .)
    WINT            reduce using rule 129 (algo -> funciones .)
    BOOL            reduce using rule 129 (algo -> funciones .)
    DEFAULT         reduce using rule 129 (algo -> funciones .)
    CASE            reduce using rule 129 (algo -> funciones .)
    GREATER         reduce using rule 183 (something_ex -> funciones .)
    SMALLER         reduce using rule 183 (something_ex -> funciones .)
    GREATER_OR_EQUAL reduce using rule 183 (something_ex -> funciones .)
    SMALLER_OR_EQUAL reduce using rule 183 (something_ex -> funciones .)
    EQUAL_COMPARE   reduce using rule 183 (something_ex -> funciones .)
    NOT_EQUAL       reduce using rule 183 (something_ex -> funciones .)
    PLUS            reduce using rule 183 (something_ex -> funciones .)
    TIMES           reduce using rule 183 (something_ex -> funciones .)
    DIVIDE          reduce using rule 183 (something_ex -> funciones .)
    MINUS           reduce using rule 183 (something_ex -> funciones .)
    MOD             reduce using rule 183 (something_ex -> funciones .)

  ! COLON           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! PRINT           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! SCAN            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FOR             [ reduce using rule 183 (something_ex -> funciones .) ]
  ! CONST           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! ID              [ reduce using rule 183 (something_ex -> funciones .) ]
  ! APPEND          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! LEN             [ reduce using rule 183 (something_ex -> funciones .) ]
  ! COPY            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! DELETE          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! IF              [ reduce using rule 183 (something_ex -> funciones .) ]
  ! ELSE            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! TYPE            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! SWITCH          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! VAR             [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FUNC            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! INTEGER         [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FLOAT           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! NOT             [ reduce using rule 183 (something_ex -> funciones .) ]
  ! RLLAVE          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! RETURN          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! STRING          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! TRUE            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FALSE           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! INT32           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! INT64           [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FLOAT32         [ reduce using rule 183 (something_ex -> funciones .) ]
  ! FLOAT64         [ reduce using rule 183 (something_ex -> funciones .) ]
  ! BYTE            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! WFLOAT          [ reduce using rule 183 (something_ex -> funciones .) ]
  ! WSTRING         [ reduce using rule 183 (something_ex -> funciones .) ]
  ! WINT            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! BOOL            [ reduce using rule 183 (something_ex -> funciones .) ]
  ! DEFAULT         [ reduce using rule 183 (something_ex -> funciones .) ]
  ! CASE            [ reduce using rule 183 (something_ex -> funciones .) ]


state 228

    (244) index -> ID .
    (158) index_s -> ID .
    (250) key -> ID .
    (179) something_ex -> ID .
    (139) value -> ID .
    (195) logic_value -> ID .
    (243) array_var -> ID . LCORCHE index RCORCHE
    (249) map_var -> ID . LCORCHE key RCORCHE
    (157) slice_var -> ID . LCORCHE index_s RCORCHE
    (202) call_func -> ID . LPAREN list_params RPAREN
    (203) call_func -> ID . LPAREN RPAREN

  ! reduce/reduce conflict for RCORCHE resolved using rule 158 (index_s -> ID .)
  ! reduce/reduce conflict for RCORCHE resolved using rule 158 (index_s -> ID .)
  ! reduce/reduce conflict for RCORCHE resolved using rule 158 (index_s -> ID .)
  ! reduce/reduce conflict for GREATER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for GREATER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for EQUAL_COMPARE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MOD resolved using rule 139 (value -> ID .)
    RCORCHE         reduce using rule 158 (index_s -> ID .)
    GREATER         reduce using rule 139 (value -> ID .)
    SMALLER         reduce using rule 139 (value -> ID .)
    GREATER_OR_EQUAL reduce using rule 139 (value -> ID .)
    SMALLER_OR_EQUAL reduce using rule 139 (value -> ID .)
    EQUAL_COMPARE   reduce using rule 139 (value -> ID .)
    NOT_EQUAL       reduce using rule 139 (value -> ID .)
    PLUS            reduce using rule 139 (value -> ID .)
    TIMES           reduce using rule 139 (value -> ID .)
    DIVIDE          reduce using rule 139 (value -> ID .)
    MINUS           reduce using rule 139 (value -> ID .)
    MOD             reduce using rule 139 (value -> ID .)
    AND             reduce using rule 195 (logic_value -> ID .)
    OR              reduce using rule 195 (logic_value -> ID .)
    LCORCHE         shift and go to state 196
    LPAREN          shift and go to state 146

  ! RCORCHE         [ reduce using rule 244 (index -> ID .) ]
  ! RCORCHE         [ reduce using rule 250 (key -> ID .) ]
  ! GREATER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! GREATER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! EQUAL_COMPARE   [ reduce using rule 179 (something_ex -> ID .) ]
  ! NOT_EQUAL       [ reduce using rule 179 (something_ex -> ID .) ]
  ! PLUS            [ reduce using rule 179 (something_ex -> ID .) ]
  ! TIMES           [ reduce using rule 179 (something_ex -> ID .) ]
  ! DIVIDE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! MINUS           [ reduce using rule 179 (something_ex -> ID .) ]
  ! MOD             [ reduce using rule 179 (something_ex -> ID .) ]
  ! RCORCHE         [ reduce using rule 179 (something_ex -> ID .) ]


state 229

    (243) array_var -> ID LCORCHE index . RCORCHE

    RCORCHE         shift and go to state 295


state 230

    (157) slice_var -> ID LCORCHE index_s . RCORCHE

    RCORCHE         shift and go to state 296


state 231

    (249) map_var -> ID LCORCHE key . RCORCHE

    RCORCHE         shift and go to state 297


state 232

    (245) index -> INTEGER .
    (159) index_s -> INTEGER .
    (52) values -> INTEGER .
    (180) something_ex -> INTEGER .

  ! reduce/reduce conflict for RCORCHE resolved using rule 159 (index_s -> INTEGER .)
  ! reduce/reduce conflict for RCORCHE resolved using rule 52 (values -> INTEGER .)
  ! reduce/reduce conflict for RCORCHE resolved using rule 52 (values -> INTEGER .)
    RCORCHE         reduce using rule 52 (values -> INTEGER .)
    GREATER         reduce using rule 180 (something_ex -> INTEGER .)
    SMALLER         reduce using rule 180 (something_ex -> INTEGER .)
    GREATER_OR_EQUAL reduce using rule 180 (something_ex -> INTEGER .)
    SMALLER_OR_EQUAL reduce using rule 180 (something_ex -> INTEGER .)
    EQUAL_COMPARE   reduce using rule 180 (something_ex -> INTEGER .)
    NOT_EQUAL       reduce using rule 180 (something_ex -> INTEGER .)
    PLUS            reduce using rule 180 (something_ex -> INTEGER .)
    TIMES           reduce using rule 180 (something_ex -> INTEGER .)
    DIVIDE          reduce using rule 180 (something_ex -> INTEGER .)
    MINUS           reduce using rule 180 (something_ex -> INTEGER .)
    MOD             reduce using rule 180 (something_ex -> INTEGER .)

  ! RCORCHE         [ reduce using rule 245 (index -> INTEGER .) ]
  ! RCORCHE         [ reduce using rule 159 (index_s -> INTEGER .) ]
  ! RCORCHE         [ reduce using rule 180 (something_ex -> INTEGER .) ]


state 233

    (246) index -> expression .
    (160) index_s -> expression .
    (65) operations -> expression .
    (140) value -> expression .

  ! reduce/reduce conflict for RCORCHE resolved using rule 160 (index_s -> expression .)
  ! reduce/reduce conflict for RCORCHE resolved using rule 65 (operations -> expression .)
    RCORCHE         reduce using rule 65 (operations -> expression .)
    GREATER         reduce using rule 140 (value -> expression .)
    SMALLER         reduce using rule 140 (value -> expression .)
    GREATER_OR_EQUAL reduce using rule 140 (value -> expression .)
    SMALLER_OR_EQUAL reduce using rule 140 (value -> expression .)
    EQUAL_COMPARE   reduce using rule 140 (value -> expression .)
    NOT_EQUAL       reduce using rule 140 (value -> expression .)
    PLUS            reduce using rule 140 (value -> expression .)
    TIMES           reduce using rule 140 (value -> expression .)
    DIVIDE          reduce using rule 140 (value -> expression .)
    MINUS           reduce using rule 140 (value -> expression .)
    MOD             reduce using rule 140 (value -> expression .)

  ! RCORCHE         [ reduce using rule 246 (index -> expression .) ]
  ! RCORCHE         [ reduce using rule 160 (index_s -> expression .) ]


state 234

    (251) key -> values .

    RCORCHE         reduce using rule 251 (key -> values .)


state 235

    (252) key -> operations .

    RCORCHE         reduce using rule 252 (key -> operations .)


state 236

    (204) list_params -> ID .
    (205) list_params -> ID . COMA more_p

    RPAREN          reduce using rule 204 (list_params -> ID .)
    COMA            shift and go to state 298


state 237

    (202) call_func -> ID LPAREN list_params . RPAREN

    RPAREN          shift and go to state 299


state 238

    (203) call_func -> ID LPAREN RPAREN .

    COLON           reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    PRINT           reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    SCAN            reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    FOR             reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    CONST           reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    ID              reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    APPEND          reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    LEN             reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    COPY            reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    DELETE          reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    IF              reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    TYPE            reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    SWITCH          reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    VAR             reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    FUNC            reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    INTEGER         reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    FLOAT           reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    NOT             reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    RLLAVE          reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    GREATER         reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    SMALLER         reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    GREATER_OR_EQUAL reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    SMALLER_OR_EQUAL reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    EQUAL_COMPARE   reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    MOD             reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    RETURN          reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    STRING          reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    TRUE            reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    FALSE           reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    INT32           reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    INT64           reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    FLOAT32         reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    FLOAT64         reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    BYTE            reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    WFLOAT          reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    WSTRING         reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    WINT            reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    BOOL            reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    DEFAULT         reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    CASE            reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    AND             reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    OR              reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    LLLAVE          reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    RCORCHE         reduce using rule 203 (call_func -> ID LPAREN RPAREN .)
    COMA            reduce using rule 203 (call_func -> ID LPAREN RPAREN .)


state 239

    (130) funciones -> APPEND LPAREN ID . COMA values RPAREN
    (131) funciones -> APPEND LPAREN ID . COMA ID RPAREN

    COMA            shift and go to state 300


state 240

    (132) funciones -> LEN LPAREN ID . RPAREN

    RPAREN          shift and go to state 301


state 241

    (133) funciones -> COPY LPAREN ID . COMA ID RPAREN

    COMA            shift and go to state 302


state 242

    (134) funciones -> DELETE LPAREN ID . COMA clave RPAREN

    COMA            shift and go to state 303


state 243

    (88) SenIF -> IF comparison LLLAVE . codigo RLLAVE
    (7) codigo -> . rule
    (8) codigo -> . more_rules
    (10) rule -> . impresion COLON
    (11) rule -> . impresion
    (12) rule -> . scan_func COLON
    (13) rule -> . scan_func
    (14) rule -> . expression COLON
    (15) rule -> . expression
    (16) rule -> . cicloFor
    (17) rule -> . comparison
    (18) rule -> . logic_operation
    (19) rule -> . decVar COLON
    (20) rule -> . decVar
    (21) rule -> . decConst COLON
    (22) rule -> . decConst
    (23) rule -> . var_asignation
    (24) rule -> . var_asignation COLON
    (25) rule -> . funciones
    (26) rule -> . funciones COLON
    (27) rule -> . SenIF
    (28) rule -> . SenElseIF
    (29) rule -> . SenElse
    (30) rule -> . SenStruct
    (31) rule -> . cStruct
    (32) rule -> . switch_statement
    (33) rule -> . array_declaration COLON
    (34) rule -> . array_declaration
    (35) rule -> . array_var COLON
    (36) rule -> . array_var
    (37) rule -> . array_assignment COLON
    (38) rule -> . array_assignment
    (39) rule -> . slice_declaration COLON
    (40) rule -> . slice_declaration
    (41) rule -> . slice_var COLON
    (42) rule -> . slice_var
    (43) rule -> . slice_assignment COLON
    (44) rule -> . slice_assignment
    (45) rule -> . map_declaration COLON
    (46) rule -> . map_declaration
    (47) rule -> . map_assignment COLON
    (48) rule -> . map_assignment
    (49) rule -> . func_declaration
    (50) rule -> . main_func
    (9) more_rules -> . rule codigo
    (173) impresion -> . PRINT LPAREN something RPAREN
    (174) impresion -> . PRINT LPAREN error RPAREN
    (201) scan_func -> . SCAN LPAREN POINTER RPAREN
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (166) cicloFor -> . FOR comparison LLLAVE codigo RLLAVE
    (167) cicloFor -> . FOR logic_operation LLLAVE codigo RLLAVE
    (168) cicloFor -> . FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (112) decVar -> . static
    (113) decVar -> . dynamic
    (109) decConst -> . CONST ID data_type_and_value
    (110) decConst -> . CONST ID EQUAL ID
    (111) decConst -> . CONST ID EQUAL data_structure
    (77) var_asignation -> . ID EQUAL any
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (88) SenIF -> . IF comparison LLLAVE codigo RLLAVE
    (89) SenIF -> . IF logic_operation LLLAVE codigo RLLAVE
    (90) SenIF -> . IF TRUE LLLAVE codigo RLLAVE
    (91) SenIF -> . IF FALSE LLLAVE codigo RLLAVE
    (92) SenElseIF -> . ELSE IF comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> . ELSE IF logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> . ELSE IF TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> . ELSE IF FALSE LLLAVE codigo RLLAVE
    (96) SenElse -> . ELSE LLLAVE codigo RLLAVE
    (97) SenStruct -> . TYPE ID STRUCT LLLAVE declaration RLLAVE
    (101) cStruct -> . ID DEQUAL ID LLLAVE asignaciones RLLAVE
    (233) switch_statement -> . SWITCH ID LLLAVE cases RLLAVE
    (238) array_declaration -> . VAR ID LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> . VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (243) array_var -> . ID LCORCHE index RCORCHE
    (247) array_assignment -> . array_var EQUAL something
    (147) slice_declaration -> . VAR ID LCORCHE RCORCHE data_types
    (148) slice_declaration -> . VAR ID EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> . VAR ID EQUAL funM
    (150) slice_declaration -> . ID DEQUAL funM
    (151) slice_declaration -> . ID DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (161) slice_assignment -> . slice_var EQUAL something_s
    (248) map_declaration -> . VAR ID LCORCHE data_types RCORCHE data_types
    (253) map_assignment -> . map_var EQUAL something
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (114) static -> . single
    (115) static -> . multiple
    (124) dynamic -> . ID DEQUAL algo
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (249) map_var -> . ID LCORCHE key RCORCHE
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (120) single -> . VAR ID data_types
    (121) single -> . VAR ID data_types EQUAL funciones
    (122) single -> . VAR ID data_types EQUAL data_structure
    (123) single -> . VAR ID data_type_and_value
    (116) multiple -> . list_var data_types
    (117) list_var -> . VAR ID COMA more

    PRINT           shift and go to state 62
    SCAN            shift and go to state 63
    FOR             shift and go to state 65
    CONST           shift and go to state 71
    ID              shift and go to state 72
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    IF              shift and go to state 79
    ELSE            shift and go to state 80
    TYPE            shift and go to state 81
    SWITCH          shift and go to state 82
    VAR             shift and go to state 83
    FUNC            shift and go to state 32
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    NOT             shift and go to state 87

    comparison                     shift and go to state 40
    codigo                         shift and go to state 304
    rule                           shift and go to state 34
    more_rules                     shift and go to state 35
    impresion                      shift and go to state 36
    scan_func                      shift and go to state 37
    expression                     shift and go to state 38
    cicloFor                       shift and go to state 39
    logic_operation                shift and go to state 41
    decVar                         shift and go to state 42
    decConst                       shift and go to state 43
    var_asignation                 shift and go to state 44
    funciones                      shift and go to state 45
    SenIF                          shift and go to state 46
    SenElseIF                      shift and go to state 47
    SenElse                        shift and go to state 48
    SenStruct                      shift and go to state 49
    cStruct                        shift and go to state 50
    switch_statement               shift and go to state 51
    array_declaration              shift and go to state 52
    array_var                      shift and go to state 53
    array_assignment               shift and go to state 54
    slice_declaration              shift and go to state 55
    slice_var                      shift and go to state 56
    slice_assignment               shift and go to state 57
    map_declaration                shift and go to state 58
    map_assignment                 shift and go to state 59
    func_declaration               shift and go to state 60
    main_func                      shift and go to state 61
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    static                         shift and go to state 69
    dynamic                        shift and go to state 70
    data_structure                 shift and go to state 73
    call_func                      shift and go to state 78
    map_var                        shift and go to state 84
    single                         shift and go to state 88
    multiple                       shift and go to state 89
    list_var                       shift and go to state 90

state 244

    (89) SenIF -> IF logic_operation LLLAVE . codigo RLLAVE
    (7) codigo -> . rule
    (8) codigo -> . more_rules
    (10) rule -> . impresion COLON
    (11) rule -> . impresion
    (12) rule -> . scan_func COLON
    (13) rule -> . scan_func
    (14) rule -> . expression COLON
    (15) rule -> . expression
    (16) rule -> . cicloFor
    (17) rule -> . comparison
    (18) rule -> . logic_operation
    (19) rule -> . decVar COLON
    (20) rule -> . decVar
    (21) rule -> . decConst COLON
    (22) rule -> . decConst
    (23) rule -> . var_asignation
    (24) rule -> . var_asignation COLON
    (25) rule -> . funciones
    (26) rule -> . funciones COLON
    (27) rule -> . SenIF
    (28) rule -> . SenElseIF
    (29) rule -> . SenElse
    (30) rule -> . SenStruct
    (31) rule -> . cStruct
    (32) rule -> . switch_statement
    (33) rule -> . array_declaration COLON
    (34) rule -> . array_declaration
    (35) rule -> . array_var COLON
    (36) rule -> . array_var
    (37) rule -> . array_assignment COLON
    (38) rule -> . array_assignment
    (39) rule -> . slice_declaration COLON
    (40) rule -> . slice_declaration
    (41) rule -> . slice_var COLON
    (42) rule -> . slice_var
    (43) rule -> . slice_assignment COLON
    (44) rule -> . slice_assignment
    (45) rule -> . map_declaration COLON
    (46) rule -> . map_declaration
    (47) rule -> . map_assignment COLON
    (48) rule -> . map_assignment
    (49) rule -> . func_declaration
    (50) rule -> . main_func
    (9) more_rules -> . rule codigo
    (173) impresion -> . PRINT LPAREN something RPAREN
    (174) impresion -> . PRINT LPAREN error RPAREN
    (201) scan_func -> . SCAN LPAREN POINTER RPAREN
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (166) cicloFor -> . FOR comparison LLLAVE codigo RLLAVE
    (167) cicloFor -> . FOR logic_operation LLLAVE codigo RLLAVE
    (168) cicloFor -> . FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (112) decVar -> . static
    (113) decVar -> . dynamic
    (109) decConst -> . CONST ID data_type_and_value
    (110) decConst -> . CONST ID EQUAL ID
    (111) decConst -> . CONST ID EQUAL data_structure
    (77) var_asignation -> . ID EQUAL any
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (88) SenIF -> . IF comparison LLLAVE codigo RLLAVE
    (89) SenIF -> . IF logic_operation LLLAVE codigo RLLAVE
    (90) SenIF -> . IF TRUE LLLAVE codigo RLLAVE
    (91) SenIF -> . IF FALSE LLLAVE codigo RLLAVE
    (92) SenElseIF -> . ELSE IF comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> . ELSE IF logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> . ELSE IF TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> . ELSE IF FALSE LLLAVE codigo RLLAVE
    (96) SenElse -> . ELSE LLLAVE codigo RLLAVE
    (97) SenStruct -> . TYPE ID STRUCT LLLAVE declaration RLLAVE
    (101) cStruct -> . ID DEQUAL ID LLLAVE asignaciones RLLAVE
    (233) switch_statement -> . SWITCH ID LLLAVE cases RLLAVE
    (238) array_declaration -> . VAR ID LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> . VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (243) array_var -> . ID LCORCHE index RCORCHE
    (247) array_assignment -> . array_var EQUAL something
    (147) slice_declaration -> . VAR ID LCORCHE RCORCHE data_types
    (148) slice_declaration -> . VAR ID EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> . VAR ID EQUAL funM
    (150) slice_declaration -> . ID DEQUAL funM
    (151) slice_declaration -> . ID DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (161) slice_assignment -> . slice_var EQUAL something_s
    (248) map_declaration -> . VAR ID LCORCHE data_types RCORCHE data_types
    (253) map_assignment -> . map_var EQUAL something
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (114) static -> . single
    (115) static -> . multiple
    (124) dynamic -> . ID DEQUAL algo
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (249) map_var -> . ID LCORCHE key RCORCHE
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (120) single -> . VAR ID data_types
    (121) single -> . VAR ID data_types EQUAL funciones
    (122) single -> . VAR ID data_types EQUAL data_structure
    (123) single -> . VAR ID data_type_and_value
    (116) multiple -> . list_var data_types
    (117) list_var -> . VAR ID COMA more

    PRINT           shift and go to state 62
    SCAN            shift and go to state 63
    FOR             shift and go to state 65
    CONST           shift and go to state 71
    ID              shift and go to state 72
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    IF              shift and go to state 79
    ELSE            shift and go to state 80
    TYPE            shift and go to state 81
    SWITCH          shift and go to state 82
    VAR             shift and go to state 83
    FUNC            shift and go to state 32
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    NOT             shift and go to state 87

    logic_operation                shift and go to state 41
    codigo                         shift and go to state 305
    rule                           shift and go to state 34
    more_rules                     shift and go to state 35
    impresion                      shift and go to state 36
    scan_func                      shift and go to state 37
    expression                     shift and go to state 38
    cicloFor                       shift and go to state 39
    comparison                     shift and go to state 40
    decVar                         shift and go to state 42
    decConst                       shift and go to state 43
    var_asignation                 shift and go to state 44
    funciones                      shift and go to state 45
    SenIF                          shift and go to state 46
    SenElseIF                      shift and go to state 47
    SenElse                        shift and go to state 48
    SenStruct                      shift and go to state 49
    cStruct                        shift and go to state 50
    switch_statement               shift and go to state 51
    array_declaration              shift and go to state 52
    array_var                      shift and go to state 53
    array_assignment               shift and go to state 54
    slice_declaration              shift and go to state 55
    slice_var                      shift and go to state 56
    slice_assignment               shift and go to state 57
    map_declaration                shift and go to state 58
    map_assignment                 shift and go to state 59
    func_declaration               shift and go to state 60
    main_func                      shift and go to state 61
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    static                         shift and go to state 69
    dynamic                        shift and go to state 70
    data_structure                 shift and go to state 73
    call_func                      shift and go to state 78
    map_var                        shift and go to state 84
    single                         shift and go to state 88
    multiple                       shift and go to state 89
    list_var                       shift and go to state 90

state 245

    (90) SenIF -> IF TRUE LLLAVE . codigo RLLAVE
    (7) codigo -> . rule
    (8) codigo -> . more_rules
    (10) rule -> . impresion COLON
    (11) rule -> . impresion
    (12) rule -> . scan_func COLON
    (13) rule -> . scan_func
    (14) rule -> . expression COLON
    (15) rule -> . expression
    (16) rule -> . cicloFor
    (17) rule -> . comparison
    (18) rule -> . logic_operation
    (19) rule -> . decVar COLON
    (20) rule -> . decVar
    (21) rule -> . decConst COLON
    (22) rule -> . decConst
    (23) rule -> . var_asignation
    (24) rule -> . var_asignation COLON
    (25) rule -> . funciones
    (26) rule -> . funciones COLON
    (27) rule -> . SenIF
    (28) rule -> . SenElseIF
    (29) rule -> . SenElse
    (30) rule -> . SenStruct
    (31) rule -> . cStruct
    (32) rule -> . switch_statement
    (33) rule -> . array_declaration COLON
    (34) rule -> . array_declaration
    (35) rule -> . array_var COLON
    (36) rule -> . array_var
    (37) rule -> . array_assignment COLON
    (38) rule -> . array_assignment
    (39) rule -> . slice_declaration COLON
    (40) rule -> . slice_declaration
    (41) rule -> . slice_var COLON
    (42) rule -> . slice_var
    (43) rule -> . slice_assignment COLON
    (44) rule -> . slice_assignment
    (45) rule -> . map_declaration COLON
    (46) rule -> . map_declaration
    (47) rule -> . map_assignment COLON
    (48) rule -> . map_assignment
    (49) rule -> . func_declaration
    (50) rule -> . main_func
    (9) more_rules -> . rule codigo
    (173) impresion -> . PRINT LPAREN something RPAREN
    (174) impresion -> . PRINT LPAREN error RPAREN
    (201) scan_func -> . SCAN LPAREN POINTER RPAREN
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (166) cicloFor -> . FOR comparison LLLAVE codigo RLLAVE
    (167) cicloFor -> . FOR logic_operation LLLAVE codigo RLLAVE
    (168) cicloFor -> . FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (112) decVar -> . static
    (113) decVar -> . dynamic
    (109) decConst -> . CONST ID data_type_and_value
    (110) decConst -> . CONST ID EQUAL ID
    (111) decConst -> . CONST ID EQUAL data_structure
    (77) var_asignation -> . ID EQUAL any
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (88) SenIF -> . IF comparison LLLAVE codigo RLLAVE
    (89) SenIF -> . IF logic_operation LLLAVE codigo RLLAVE
    (90) SenIF -> . IF TRUE LLLAVE codigo RLLAVE
    (91) SenIF -> . IF FALSE LLLAVE codigo RLLAVE
    (92) SenElseIF -> . ELSE IF comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> . ELSE IF logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> . ELSE IF TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> . ELSE IF FALSE LLLAVE codigo RLLAVE
    (96) SenElse -> . ELSE LLLAVE codigo RLLAVE
    (97) SenStruct -> . TYPE ID STRUCT LLLAVE declaration RLLAVE
    (101) cStruct -> . ID DEQUAL ID LLLAVE asignaciones RLLAVE
    (233) switch_statement -> . SWITCH ID LLLAVE cases RLLAVE
    (238) array_declaration -> . VAR ID LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> . VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (243) array_var -> . ID LCORCHE index RCORCHE
    (247) array_assignment -> . array_var EQUAL something
    (147) slice_declaration -> . VAR ID LCORCHE RCORCHE data_types
    (148) slice_declaration -> . VAR ID EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> . VAR ID EQUAL funM
    (150) slice_declaration -> . ID DEQUAL funM
    (151) slice_declaration -> . ID DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (161) slice_assignment -> . slice_var EQUAL something_s
    (248) map_declaration -> . VAR ID LCORCHE data_types RCORCHE data_types
    (253) map_assignment -> . map_var EQUAL something
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (114) static -> . single
    (115) static -> . multiple
    (124) dynamic -> . ID DEQUAL algo
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (249) map_var -> . ID LCORCHE key RCORCHE
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (120) single -> . VAR ID data_types
    (121) single -> . VAR ID data_types EQUAL funciones
    (122) single -> . VAR ID data_types EQUAL data_structure
    (123) single -> . VAR ID data_type_and_value
    (116) multiple -> . list_var data_types
    (117) list_var -> . VAR ID COMA more

    PRINT           shift and go to state 62
    SCAN            shift and go to state 63
    FOR             shift and go to state 65
    CONST           shift and go to state 71
    ID              shift and go to state 72
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    IF              shift and go to state 79
    ELSE            shift and go to state 80
    TYPE            shift and go to state 81
    SWITCH          shift and go to state 82
    VAR             shift and go to state 83
    FUNC            shift and go to state 32
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    NOT             shift and go to state 87

    codigo                         shift and go to state 306
    rule                           shift and go to state 34
    more_rules                     shift and go to state 35
    impresion                      shift and go to state 36
    scan_func                      shift and go to state 37
    expression                     shift and go to state 38
    cicloFor                       shift and go to state 39
    comparison                     shift and go to state 40
    logic_operation                shift and go to state 41
    decVar                         shift and go to state 42
    decConst                       shift and go to state 43
    var_asignation                 shift and go to state 44
    funciones                      shift and go to state 45
    SenIF                          shift and go to state 46
    SenElseIF                      shift and go to state 47
    SenElse                        shift and go to state 48
    SenStruct                      shift and go to state 49
    cStruct                        shift and go to state 50
    switch_statement               shift and go to state 51
    array_declaration              shift and go to state 52
    array_var                      shift and go to state 53
    array_assignment               shift and go to state 54
    slice_declaration              shift and go to state 55
    slice_var                      shift and go to state 56
    slice_assignment               shift and go to state 57
    map_declaration                shift and go to state 58
    map_assignment                 shift and go to state 59
    func_declaration               shift and go to state 60
    main_func                      shift and go to state 61
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    static                         shift and go to state 69
    dynamic                        shift and go to state 70
    data_structure                 shift and go to state 73
    call_func                      shift and go to state 78
    map_var                        shift and go to state 84
    single                         shift and go to state 88
    multiple                       shift and go to state 89
    list_var                       shift and go to state 90

state 246

    (91) SenIF -> IF FALSE LLLAVE . codigo RLLAVE
    (7) codigo -> . rule
    (8) codigo -> . more_rules
    (10) rule -> . impresion COLON
    (11) rule -> . impresion
    (12) rule -> . scan_func COLON
    (13) rule -> . scan_func
    (14) rule -> . expression COLON
    (15) rule -> . expression
    (16) rule -> . cicloFor
    (17) rule -> . comparison
    (18) rule -> . logic_operation
    (19) rule -> . decVar COLON
    (20) rule -> . decVar
    (21) rule -> . decConst COLON
    (22) rule -> . decConst
    (23) rule -> . var_asignation
    (24) rule -> . var_asignation COLON
    (25) rule -> . funciones
    (26) rule -> . funciones COLON
    (27) rule -> . SenIF
    (28) rule -> . SenElseIF
    (29) rule -> . SenElse
    (30) rule -> . SenStruct
    (31) rule -> . cStruct
    (32) rule -> . switch_statement
    (33) rule -> . array_declaration COLON
    (34) rule -> . array_declaration
    (35) rule -> . array_var COLON
    (36) rule -> . array_var
    (37) rule -> . array_assignment COLON
    (38) rule -> . array_assignment
    (39) rule -> . slice_declaration COLON
    (40) rule -> . slice_declaration
    (41) rule -> . slice_var COLON
    (42) rule -> . slice_var
    (43) rule -> . slice_assignment COLON
    (44) rule -> . slice_assignment
    (45) rule -> . map_declaration COLON
    (46) rule -> . map_declaration
    (47) rule -> . map_assignment COLON
    (48) rule -> . map_assignment
    (49) rule -> . func_declaration
    (50) rule -> . main_func
    (9) more_rules -> . rule codigo
    (173) impresion -> . PRINT LPAREN something RPAREN
    (174) impresion -> . PRINT LPAREN error RPAREN
    (201) scan_func -> . SCAN LPAREN POINTER RPAREN
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (166) cicloFor -> . FOR comparison LLLAVE codigo RLLAVE
    (167) cicloFor -> . FOR logic_operation LLLAVE codigo RLLAVE
    (168) cicloFor -> . FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (112) decVar -> . static
    (113) decVar -> . dynamic
    (109) decConst -> . CONST ID data_type_and_value
    (110) decConst -> . CONST ID EQUAL ID
    (111) decConst -> . CONST ID EQUAL data_structure
    (77) var_asignation -> . ID EQUAL any
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (88) SenIF -> . IF comparison LLLAVE codigo RLLAVE
    (89) SenIF -> . IF logic_operation LLLAVE codigo RLLAVE
    (90) SenIF -> . IF TRUE LLLAVE codigo RLLAVE
    (91) SenIF -> . IF FALSE LLLAVE codigo RLLAVE
    (92) SenElseIF -> . ELSE IF comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> . ELSE IF logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> . ELSE IF TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> . ELSE IF FALSE LLLAVE codigo RLLAVE
    (96) SenElse -> . ELSE LLLAVE codigo RLLAVE
    (97) SenStruct -> . TYPE ID STRUCT LLLAVE declaration RLLAVE
    (101) cStruct -> . ID DEQUAL ID LLLAVE asignaciones RLLAVE
    (233) switch_statement -> . SWITCH ID LLLAVE cases RLLAVE
    (238) array_declaration -> . VAR ID LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> . VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (243) array_var -> . ID LCORCHE index RCORCHE
    (247) array_assignment -> . array_var EQUAL something
    (147) slice_declaration -> . VAR ID LCORCHE RCORCHE data_types
    (148) slice_declaration -> . VAR ID EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> . VAR ID EQUAL funM
    (150) slice_declaration -> . ID DEQUAL funM
    (151) slice_declaration -> . ID DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (161) slice_assignment -> . slice_var EQUAL something_s
    (248) map_declaration -> . VAR ID LCORCHE data_types RCORCHE data_types
    (253) map_assignment -> . map_var EQUAL something
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (114) static -> . single
    (115) static -> . multiple
    (124) dynamic -> . ID DEQUAL algo
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (249) map_var -> . ID LCORCHE key RCORCHE
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (120) single -> . VAR ID data_types
    (121) single -> . VAR ID data_types EQUAL funciones
    (122) single -> . VAR ID data_types EQUAL data_structure
    (123) single -> . VAR ID data_type_and_value
    (116) multiple -> . list_var data_types
    (117) list_var -> . VAR ID COMA more

    PRINT           shift and go to state 62
    SCAN            shift and go to state 63
    FOR             shift and go to state 65
    CONST           shift and go to state 71
    ID              shift and go to state 72
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    IF              shift and go to state 79
    ELSE            shift and go to state 80
    TYPE            shift and go to state 81
    SWITCH          shift and go to state 82
    VAR             shift and go to state 83
    FUNC            shift and go to state 32
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    NOT             shift and go to state 87

    codigo                         shift and go to state 307
    rule                           shift and go to state 34
    more_rules                     shift and go to state 35
    impresion                      shift and go to state 36
    scan_func                      shift and go to state 37
    expression                     shift and go to state 38
    cicloFor                       shift and go to state 39
    comparison                     shift and go to state 40
    logic_operation                shift and go to state 41
    decVar                         shift and go to state 42
    decConst                       shift and go to state 43
    var_asignation                 shift and go to state 44
    funciones                      shift and go to state 45
    SenIF                          shift and go to state 46
    SenElseIF                      shift and go to state 47
    SenElse                        shift and go to state 48
    SenStruct                      shift and go to state 49
    cStruct                        shift and go to state 50
    switch_statement               shift and go to state 51
    array_declaration              shift and go to state 52
    array_var                      shift and go to state 53
    array_assignment               shift and go to state 54
    slice_declaration              shift and go to state 55
    slice_var                      shift and go to state 56
    slice_assignment               shift and go to state 57
    map_declaration                shift and go to state 58
    map_assignment                 shift and go to state 59
    func_declaration               shift and go to state 60
    main_func                      shift and go to state 61
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    static                         shift and go to state 69
    dynamic                        shift and go to state 70
    data_structure                 shift and go to state 73
    call_func                      shift and go to state 78
    map_var                        shift and go to state 84
    single                         shift and go to state 88
    multiple                       shift and go to state 89
    list_var                       shift and go to state 90

state 247

    (92) SenElseIF -> ELSE IF comparison . LLLAVE codigo RLLAVE
    (194) logic_value -> comparison .

    LLLAVE          shift and go to state 308
    AND             reduce using rule 194 (logic_value -> comparison .)
    OR              reduce using rule 194 (logic_value -> comparison .)


state 248

    (93) SenElseIF -> ELSE IF logic_operation . LLLAVE codigo RLLAVE

    LLLAVE          shift and go to state 309


state 249

    (94) SenElseIF -> ELSE IF TRUE . LLLAVE codigo RLLAVE

    LLLAVE          shift and go to state 310


state 250

    (95) SenElseIF -> ELSE IF FALSE . LLLAVE codigo RLLAVE

    LLLAVE          shift and go to state 311


state 251

    (96) SenElse -> ELSE LLLAVE codigo . RLLAVE

    RLLAVE          shift and go to state 312


state 252

    (97) SenStruct -> TYPE ID STRUCT . LLLAVE declaration RLLAVE

    LLLAVE          shift and go to state 313


state 253

    (233) switch_statement -> SWITCH ID LLLAVE . cases RLLAVE
    (234) cases -> . CASE values POINTS codigo
    (235) cases -> . CASE values POINTS codigo more

    CASE            shift and go to state 315

    cases                          shift and go to state 314

state 254

    (238) array_declaration -> VAR ID LCORCHE . capacity RCORCHE data_types
    (147) slice_declaration -> VAR ID LCORCHE . RCORCHE data_types
    (248) map_declaration -> VAR ID LCORCHE . data_types RCORCHE data_types
    (240) capacity -> . INTEGER
    (241) capacity -> . ID
    (242) capacity -> . expression
    (56) data_types -> . INT32
    (57) data_types -> . INT64
    (58) data_types -> . FLOAT32
    (59) data_types -> . FLOAT64
    (60) data_types -> . BYTE
    (61) data_types -> . WFLOAT
    (62) data_types -> . WSTRING
    (63) data_types -> . WINT
    (64) data_types -> . BOOL
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    RCORCHE         shift and go to state 318
    INTEGER         shift and go to state 320
    ID              shift and go to state 316
    INT32           shift and go to state 22
    INT64           shift and go to state 23
    FLOAT32         shift and go to state 24
    FLOAT64         shift and go to state 25
    BYTE            shift and go to state 26
    WFLOAT          shift and go to state 27
    WSTRING         shift and go to state 28
    WINT            shift and go to state 29
    BOOL            shift and go to state 30
    FLOAT           shift and go to state 86
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    capacity                       shift and go to state 317
    data_types                     shift and go to state 319
    expression                     shift and go to state 321
    something_ex                   shift and go to state 64
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 255

    (120) single -> VAR ID data_types .
    (121) single -> VAR ID data_types . EQUAL funciones
    (122) single -> VAR ID data_types . EQUAL data_structure

    COLON           reduce using rule 120 (single -> VAR ID data_types .)
    PRINT           reduce using rule 120 (single -> VAR ID data_types .)
    SCAN            reduce using rule 120 (single -> VAR ID data_types .)
    FOR             reduce using rule 120 (single -> VAR ID data_types .)
    CONST           reduce using rule 120 (single -> VAR ID data_types .)
    ID              reduce using rule 120 (single -> VAR ID data_types .)
    APPEND          reduce using rule 120 (single -> VAR ID data_types .)
    LEN             reduce using rule 120 (single -> VAR ID data_types .)
    COPY            reduce using rule 120 (single -> VAR ID data_types .)
    DELETE          reduce using rule 120 (single -> VAR ID data_types .)
    IF              reduce using rule 120 (single -> VAR ID data_types .)
    ELSE            reduce using rule 120 (single -> VAR ID data_types .)
    TYPE            reduce using rule 120 (single -> VAR ID data_types .)
    SWITCH          reduce using rule 120 (single -> VAR ID data_types .)
    VAR             reduce using rule 120 (single -> VAR ID data_types .)
    FUNC            reduce using rule 120 (single -> VAR ID data_types .)
    INTEGER         reduce using rule 120 (single -> VAR ID data_types .)
    FLOAT           reduce using rule 120 (single -> VAR ID data_types .)
    NOT             reduce using rule 120 (single -> VAR ID data_types .)
    RLLAVE          reduce using rule 120 (single -> VAR ID data_types .)
    RETURN          reduce using rule 120 (single -> VAR ID data_types .)
    STRING          reduce using rule 120 (single -> VAR ID data_types .)
    TRUE            reduce using rule 120 (single -> VAR ID data_types .)
    FALSE           reduce using rule 120 (single -> VAR ID data_types .)
    INT32           reduce using rule 120 (single -> VAR ID data_types .)
    INT64           reduce using rule 120 (single -> VAR ID data_types .)
    FLOAT32         reduce using rule 120 (single -> VAR ID data_types .)
    FLOAT64         reduce using rule 120 (single -> VAR ID data_types .)
    BYTE            reduce using rule 120 (single -> VAR ID data_types .)
    WFLOAT          reduce using rule 120 (single -> VAR ID data_types .)
    WSTRING         reduce using rule 120 (single -> VAR ID data_types .)
    WINT            reduce using rule 120 (single -> VAR ID data_types .)
    BOOL            reduce using rule 120 (single -> VAR ID data_types .)
    DEFAULT         reduce using rule 120 (single -> VAR ID data_types .)
    CASE            reduce using rule 120 (single -> VAR ID data_types .)
    EQUAL           shift and go to state 322


state 256

    (239) array_declaration -> VAR ID EQUAL . LCORCHE capacity RCORCHE data_types arr_content
    (148) slice_declaration -> VAR ID EQUAL . LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> VAR ID EQUAL . funM
    (152) funM -> . MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN
    (153) funM -> . MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN

    LCORCHE         shift and go to state 323
    MAKE            shift and go to state 223

    funM                           shift and go to state 324

state 257

    (123) single -> VAR ID data_type_and_value .

    COLON           reduce using rule 123 (single -> VAR ID data_type_and_value .)
    PRINT           reduce using rule 123 (single -> VAR ID data_type_and_value .)
    SCAN            reduce using rule 123 (single -> VAR ID data_type_and_value .)
    FOR             reduce using rule 123 (single -> VAR ID data_type_and_value .)
    CONST           reduce using rule 123 (single -> VAR ID data_type_and_value .)
    ID              reduce using rule 123 (single -> VAR ID data_type_and_value .)
    APPEND          reduce using rule 123 (single -> VAR ID data_type_and_value .)
    LEN             reduce using rule 123 (single -> VAR ID data_type_and_value .)
    COPY            reduce using rule 123 (single -> VAR ID data_type_and_value .)
    DELETE          reduce using rule 123 (single -> VAR ID data_type_and_value .)
    IF              reduce using rule 123 (single -> VAR ID data_type_and_value .)
    ELSE            reduce using rule 123 (single -> VAR ID data_type_and_value .)
    TYPE            reduce using rule 123 (single -> VAR ID data_type_and_value .)
    SWITCH          reduce using rule 123 (single -> VAR ID data_type_and_value .)
    VAR             reduce using rule 123 (single -> VAR ID data_type_and_value .)
    FUNC            reduce using rule 123 (single -> VAR ID data_type_and_value .)
    INTEGER         reduce using rule 123 (single -> VAR ID data_type_and_value .)
    FLOAT           reduce using rule 123 (single -> VAR ID data_type_and_value .)
    NOT             reduce using rule 123 (single -> VAR ID data_type_and_value .)
    RLLAVE          reduce using rule 123 (single -> VAR ID data_type_and_value .)
    RETURN          reduce using rule 123 (single -> VAR ID data_type_and_value .)
    STRING          reduce using rule 123 (single -> VAR ID data_type_and_value .)
    TRUE            reduce using rule 123 (single -> VAR ID data_type_and_value .)
    FALSE           reduce using rule 123 (single -> VAR ID data_type_and_value .)
    INT32           reduce using rule 123 (single -> VAR ID data_type_and_value .)
    INT64           reduce using rule 123 (single -> VAR ID data_type_and_value .)
    FLOAT32         reduce using rule 123 (single -> VAR ID data_type_and_value .)
    FLOAT64         reduce using rule 123 (single -> VAR ID data_type_and_value .)
    BYTE            reduce using rule 123 (single -> VAR ID data_type_and_value .)
    WFLOAT          reduce using rule 123 (single -> VAR ID data_type_and_value .)
    WSTRING         reduce using rule 123 (single -> VAR ID data_type_and_value .)
    WINT            reduce using rule 123 (single -> VAR ID data_type_and_value .)
    BOOL            reduce using rule 123 (single -> VAR ID data_type_and_value .)
    DEFAULT         reduce using rule 123 (single -> VAR ID data_type_and_value .)
    CASE            reduce using rule 123 (single -> VAR ID data_type_and_value .)


state 258

    (117) list_var -> VAR ID COMA . more
    (118) more -> . ID
    (119) more -> . ID COMA more
    (236) more -> . cases
    (237) more -> . DEFAULT POINTS codigo
    (234) cases -> . CASE values POINTS codigo
    (235) cases -> . CASE values POINTS codigo more

    ID              shift and go to state 325
    DEFAULT         shift and go to state 328
    CASE            shift and go to state 315

    more                           shift and go to state 326
    cases                          shift and go to state 327

state 259

    (56) data_types -> INT32 .
    (209) data_type_and_value -> INT32 . EQUAL int_value
    (227) data_type_and_value -> INT32 . EQUAL error

  ! shift/reduce conflict for EQUAL resolved as shift
    COLON           reduce using rule 56 (data_types -> INT32 .)
    PRINT           reduce using rule 56 (data_types -> INT32 .)
    SCAN            reduce using rule 56 (data_types -> INT32 .)
    FOR             reduce using rule 56 (data_types -> INT32 .)
    CONST           reduce using rule 56 (data_types -> INT32 .)
    ID              reduce using rule 56 (data_types -> INT32 .)
    APPEND          reduce using rule 56 (data_types -> INT32 .)
    LEN             reduce using rule 56 (data_types -> INT32 .)
    COPY            reduce using rule 56 (data_types -> INT32 .)
    DELETE          reduce using rule 56 (data_types -> INT32 .)
    IF              reduce using rule 56 (data_types -> INT32 .)
    ELSE            reduce using rule 56 (data_types -> INT32 .)
    TYPE            reduce using rule 56 (data_types -> INT32 .)
    SWITCH          reduce using rule 56 (data_types -> INT32 .)
    VAR             reduce using rule 56 (data_types -> INT32 .)
    FUNC            reduce using rule 56 (data_types -> INT32 .)
    INTEGER         reduce using rule 56 (data_types -> INT32 .)
    FLOAT           reduce using rule 56 (data_types -> INT32 .)
    NOT             reduce using rule 56 (data_types -> INT32 .)
    RLLAVE          reduce using rule 56 (data_types -> INT32 .)
    RETURN          reduce using rule 56 (data_types -> INT32 .)
    STRING          reduce using rule 56 (data_types -> INT32 .)
    TRUE            reduce using rule 56 (data_types -> INT32 .)
    FALSE           reduce using rule 56 (data_types -> INT32 .)
    INT32           reduce using rule 56 (data_types -> INT32 .)
    INT64           reduce using rule 56 (data_types -> INT32 .)
    FLOAT32         reduce using rule 56 (data_types -> INT32 .)
    FLOAT64         reduce using rule 56 (data_types -> INT32 .)
    BYTE            reduce using rule 56 (data_types -> INT32 .)
    WFLOAT          reduce using rule 56 (data_types -> INT32 .)
    WSTRING         reduce using rule 56 (data_types -> INT32 .)
    WINT            reduce using rule 56 (data_types -> INT32 .)
    BOOL            reduce using rule 56 (data_types -> INT32 .)
    DEFAULT         reduce using rule 56 (data_types -> INT32 .)
    CASE            reduce using rule 56 (data_types -> INT32 .)
    EQUAL           shift and go to state 286

  ! EQUAL           [ reduce using rule 56 (data_types -> INT32 .) ]


state 260

    (57) data_types -> INT64 .
    (210) data_type_and_value -> INT64 . EQUAL int_value
    (228) data_type_and_value -> INT64 . EQUAL error

  ! shift/reduce conflict for EQUAL resolved as shift
    COLON           reduce using rule 57 (data_types -> INT64 .)
    PRINT           reduce using rule 57 (data_types -> INT64 .)
    SCAN            reduce using rule 57 (data_types -> INT64 .)
    FOR             reduce using rule 57 (data_types -> INT64 .)
    CONST           reduce using rule 57 (data_types -> INT64 .)
    ID              reduce using rule 57 (data_types -> INT64 .)
    APPEND          reduce using rule 57 (data_types -> INT64 .)
    LEN             reduce using rule 57 (data_types -> INT64 .)
    COPY            reduce using rule 57 (data_types -> INT64 .)
    DELETE          reduce using rule 57 (data_types -> INT64 .)
    IF              reduce using rule 57 (data_types -> INT64 .)
    ELSE            reduce using rule 57 (data_types -> INT64 .)
    TYPE            reduce using rule 57 (data_types -> INT64 .)
    SWITCH          reduce using rule 57 (data_types -> INT64 .)
    VAR             reduce using rule 57 (data_types -> INT64 .)
    FUNC            reduce using rule 57 (data_types -> INT64 .)
    INTEGER         reduce using rule 57 (data_types -> INT64 .)
    FLOAT           reduce using rule 57 (data_types -> INT64 .)
    NOT             reduce using rule 57 (data_types -> INT64 .)
    RLLAVE          reduce using rule 57 (data_types -> INT64 .)
    RETURN          reduce using rule 57 (data_types -> INT64 .)
    STRING          reduce using rule 57 (data_types -> INT64 .)
    TRUE            reduce using rule 57 (data_types -> INT64 .)
    FALSE           reduce using rule 57 (data_types -> INT64 .)
    INT32           reduce using rule 57 (data_types -> INT64 .)
    INT64           reduce using rule 57 (data_types -> INT64 .)
    FLOAT32         reduce using rule 57 (data_types -> INT64 .)
    FLOAT64         reduce using rule 57 (data_types -> INT64 .)
    BYTE            reduce using rule 57 (data_types -> INT64 .)
    WFLOAT          reduce using rule 57 (data_types -> INT64 .)
    WSTRING         reduce using rule 57 (data_types -> INT64 .)
    WINT            reduce using rule 57 (data_types -> INT64 .)
    BOOL            reduce using rule 57 (data_types -> INT64 .)
    DEFAULT         reduce using rule 57 (data_types -> INT64 .)
    CASE            reduce using rule 57 (data_types -> INT64 .)
    EQUAL           shift and go to state 287

  ! EQUAL           [ reduce using rule 57 (data_types -> INT64 .) ]


state 261

    (58) data_types -> FLOAT32 .
    (212) data_type_and_value -> FLOAT32 . EQUAL float_value
    (230) data_type_and_value -> FLOAT32 . EQUAL error

  ! shift/reduce conflict for EQUAL resolved as shift
    COLON           reduce using rule 58 (data_types -> FLOAT32 .)
    PRINT           reduce using rule 58 (data_types -> FLOAT32 .)
    SCAN            reduce using rule 58 (data_types -> FLOAT32 .)
    FOR             reduce using rule 58 (data_types -> FLOAT32 .)
    CONST           reduce using rule 58 (data_types -> FLOAT32 .)
    ID              reduce using rule 58 (data_types -> FLOAT32 .)
    APPEND          reduce using rule 58 (data_types -> FLOAT32 .)
    LEN             reduce using rule 58 (data_types -> FLOAT32 .)
    COPY            reduce using rule 58 (data_types -> FLOAT32 .)
    DELETE          reduce using rule 58 (data_types -> FLOAT32 .)
    IF              reduce using rule 58 (data_types -> FLOAT32 .)
    ELSE            reduce using rule 58 (data_types -> FLOAT32 .)
    TYPE            reduce using rule 58 (data_types -> FLOAT32 .)
    SWITCH          reduce using rule 58 (data_types -> FLOAT32 .)
    VAR             reduce using rule 58 (data_types -> FLOAT32 .)
    FUNC            reduce using rule 58 (data_types -> FLOAT32 .)
    INTEGER         reduce using rule 58 (data_types -> FLOAT32 .)
    FLOAT           reduce using rule 58 (data_types -> FLOAT32 .)
    NOT             reduce using rule 58 (data_types -> FLOAT32 .)
    RLLAVE          reduce using rule 58 (data_types -> FLOAT32 .)
    RETURN          reduce using rule 58 (data_types -> FLOAT32 .)
    STRING          reduce using rule 58 (data_types -> FLOAT32 .)
    TRUE            reduce using rule 58 (data_types -> FLOAT32 .)
    FALSE           reduce using rule 58 (data_types -> FLOAT32 .)
    INT32           reduce using rule 58 (data_types -> FLOAT32 .)
    INT64           reduce using rule 58 (data_types -> FLOAT32 .)
    FLOAT32         reduce using rule 58 (data_types -> FLOAT32 .)
    FLOAT64         reduce using rule 58 (data_types -> FLOAT32 .)
    BYTE            reduce using rule 58 (data_types -> FLOAT32 .)
    WFLOAT          reduce using rule 58 (data_types -> FLOAT32 .)
    WSTRING         reduce using rule 58 (data_types -> FLOAT32 .)
    WINT            reduce using rule 58 (data_types -> FLOAT32 .)
    BOOL            reduce using rule 58 (data_types -> FLOAT32 .)
    DEFAULT         reduce using rule 58 (data_types -> FLOAT32 .)
    CASE            reduce using rule 58 (data_types -> FLOAT32 .)
    EQUAL           shift and go to state 289

  ! EQUAL           [ reduce using rule 58 (data_types -> FLOAT32 .) ]


state 262

    (59) data_types -> FLOAT64 .
    (213) data_type_and_value -> FLOAT64 . EQUAL float_value
    (231) data_type_and_value -> FLOAT64 . EQUAL error

  ! shift/reduce conflict for EQUAL resolved as shift
    COLON           reduce using rule 59 (data_types -> FLOAT64 .)
    PRINT           reduce using rule 59 (data_types -> FLOAT64 .)
    SCAN            reduce using rule 59 (data_types -> FLOAT64 .)
    FOR             reduce using rule 59 (data_types -> FLOAT64 .)
    CONST           reduce using rule 59 (data_types -> FLOAT64 .)
    ID              reduce using rule 59 (data_types -> FLOAT64 .)
    APPEND          reduce using rule 59 (data_types -> FLOAT64 .)
    LEN             reduce using rule 59 (data_types -> FLOAT64 .)
    COPY            reduce using rule 59 (data_types -> FLOAT64 .)
    DELETE          reduce using rule 59 (data_types -> FLOAT64 .)
    IF              reduce using rule 59 (data_types -> FLOAT64 .)
    ELSE            reduce using rule 59 (data_types -> FLOAT64 .)
    TYPE            reduce using rule 59 (data_types -> FLOAT64 .)
    SWITCH          reduce using rule 59 (data_types -> FLOAT64 .)
    VAR             reduce using rule 59 (data_types -> FLOAT64 .)
    FUNC            reduce using rule 59 (data_types -> FLOAT64 .)
    INTEGER         reduce using rule 59 (data_types -> FLOAT64 .)
    FLOAT           reduce using rule 59 (data_types -> FLOAT64 .)
    NOT             reduce using rule 59 (data_types -> FLOAT64 .)
    RLLAVE          reduce using rule 59 (data_types -> FLOAT64 .)
    RETURN          reduce using rule 59 (data_types -> FLOAT64 .)
    STRING          reduce using rule 59 (data_types -> FLOAT64 .)
    TRUE            reduce using rule 59 (data_types -> FLOAT64 .)
    FALSE           reduce using rule 59 (data_types -> FLOAT64 .)
    INT32           reduce using rule 59 (data_types -> FLOAT64 .)
    INT64           reduce using rule 59 (data_types -> FLOAT64 .)
    FLOAT32         reduce using rule 59 (data_types -> FLOAT64 .)
    FLOAT64         reduce using rule 59 (data_types -> FLOAT64 .)
    BYTE            reduce using rule 59 (data_types -> FLOAT64 .)
    WFLOAT          reduce using rule 59 (data_types -> FLOAT64 .)
    WSTRING         reduce using rule 59 (data_types -> FLOAT64 .)
    WINT            reduce using rule 59 (data_types -> FLOAT64 .)
    BOOL            reduce using rule 59 (data_types -> FLOAT64 .)
    DEFAULT         reduce using rule 59 (data_types -> FLOAT64 .)
    CASE            reduce using rule 59 (data_types -> FLOAT64 .)
    EQUAL           shift and go to state 290

  ! EQUAL           [ reduce using rule 59 (data_types -> FLOAT64 .) ]


state 263

    (61) data_types -> WFLOAT .
    (211) data_type_and_value -> WFLOAT . EQUAL float_value
    (229) data_type_and_value -> WFLOAT . EQUAL error

  ! shift/reduce conflict for EQUAL resolved as shift
    COLON           reduce using rule 61 (data_types -> WFLOAT .)
    PRINT           reduce using rule 61 (data_types -> WFLOAT .)
    SCAN            reduce using rule 61 (data_types -> WFLOAT .)
    FOR             reduce using rule 61 (data_types -> WFLOAT .)
    CONST           reduce using rule 61 (data_types -> WFLOAT .)
    ID              reduce using rule 61 (data_types -> WFLOAT .)
    APPEND          reduce using rule 61 (data_types -> WFLOAT .)
    LEN             reduce using rule 61 (data_types -> WFLOAT .)
    COPY            reduce using rule 61 (data_types -> WFLOAT .)
    DELETE          reduce using rule 61 (data_types -> WFLOAT .)
    IF              reduce using rule 61 (data_types -> WFLOAT .)
    ELSE            reduce using rule 61 (data_types -> WFLOAT .)
    TYPE            reduce using rule 61 (data_types -> WFLOAT .)
    SWITCH          reduce using rule 61 (data_types -> WFLOAT .)
    VAR             reduce using rule 61 (data_types -> WFLOAT .)
    FUNC            reduce using rule 61 (data_types -> WFLOAT .)
    INTEGER         reduce using rule 61 (data_types -> WFLOAT .)
    FLOAT           reduce using rule 61 (data_types -> WFLOAT .)
    NOT             reduce using rule 61 (data_types -> WFLOAT .)
    RLLAVE          reduce using rule 61 (data_types -> WFLOAT .)
    RETURN          reduce using rule 61 (data_types -> WFLOAT .)
    STRING          reduce using rule 61 (data_types -> WFLOAT .)
    TRUE            reduce using rule 61 (data_types -> WFLOAT .)
    FALSE           reduce using rule 61 (data_types -> WFLOAT .)
    INT32           reduce using rule 61 (data_types -> WFLOAT .)
    INT64           reduce using rule 61 (data_types -> WFLOAT .)
    FLOAT32         reduce using rule 61 (data_types -> WFLOAT .)
    FLOAT64         reduce using rule 61 (data_types -> WFLOAT .)
    BYTE            reduce using rule 61 (data_types -> WFLOAT .)
    WFLOAT          reduce using rule 61 (data_types -> WFLOAT .)
    WSTRING         reduce using rule 61 (data_types -> WFLOAT .)
    WINT            reduce using rule 61 (data_types -> WFLOAT .)
    BOOL            reduce using rule 61 (data_types -> WFLOAT .)
    DEFAULT         reduce using rule 61 (data_types -> WFLOAT .)
    CASE            reduce using rule 61 (data_types -> WFLOAT .)
    EQUAL           shift and go to state 288

  ! EQUAL           [ reduce using rule 61 (data_types -> WFLOAT .) ]


state 264

    (62) data_types -> WSTRING .
    (207) data_type_and_value -> WSTRING . EQUAL str_value
    (225) data_type_and_value -> WSTRING . EQUAL error

  ! shift/reduce conflict for EQUAL resolved as shift
    COLON           reduce using rule 62 (data_types -> WSTRING .)
    PRINT           reduce using rule 62 (data_types -> WSTRING .)
    SCAN            reduce using rule 62 (data_types -> WSTRING .)
    FOR             reduce using rule 62 (data_types -> WSTRING .)
    CONST           reduce using rule 62 (data_types -> WSTRING .)
    ID              reduce using rule 62 (data_types -> WSTRING .)
    APPEND          reduce using rule 62 (data_types -> WSTRING .)
    LEN             reduce using rule 62 (data_types -> WSTRING .)
    COPY            reduce using rule 62 (data_types -> WSTRING .)
    DELETE          reduce using rule 62 (data_types -> WSTRING .)
    IF              reduce using rule 62 (data_types -> WSTRING .)
    ELSE            reduce using rule 62 (data_types -> WSTRING .)
    TYPE            reduce using rule 62 (data_types -> WSTRING .)
    SWITCH          reduce using rule 62 (data_types -> WSTRING .)
    VAR             reduce using rule 62 (data_types -> WSTRING .)
    FUNC            reduce using rule 62 (data_types -> WSTRING .)
    INTEGER         reduce using rule 62 (data_types -> WSTRING .)
    FLOAT           reduce using rule 62 (data_types -> WSTRING .)
    NOT             reduce using rule 62 (data_types -> WSTRING .)
    RLLAVE          reduce using rule 62 (data_types -> WSTRING .)
    RETURN          reduce using rule 62 (data_types -> WSTRING .)
    STRING          reduce using rule 62 (data_types -> WSTRING .)
    TRUE            reduce using rule 62 (data_types -> WSTRING .)
    FALSE           reduce using rule 62 (data_types -> WSTRING .)
    INT32           reduce using rule 62 (data_types -> WSTRING .)
    INT64           reduce using rule 62 (data_types -> WSTRING .)
    FLOAT32         reduce using rule 62 (data_types -> WSTRING .)
    FLOAT64         reduce using rule 62 (data_types -> WSTRING .)
    BYTE            reduce using rule 62 (data_types -> WSTRING .)
    WFLOAT          reduce using rule 62 (data_types -> WSTRING .)
    WSTRING         reduce using rule 62 (data_types -> WSTRING .)
    WINT            reduce using rule 62 (data_types -> WSTRING .)
    BOOL            reduce using rule 62 (data_types -> WSTRING .)
    DEFAULT         reduce using rule 62 (data_types -> WSTRING .)
    CASE            reduce using rule 62 (data_types -> WSTRING .)
    EQUAL           shift and go to state 284

  ! EQUAL           [ reduce using rule 62 (data_types -> WSTRING .) ]


state 265

    (63) data_types -> WINT .
    (208) data_type_and_value -> WINT . EQUAL int_value
    (226) data_type_and_value -> WINT . EQUAL error

  ! shift/reduce conflict for EQUAL resolved as shift
    COLON           reduce using rule 63 (data_types -> WINT .)
    PRINT           reduce using rule 63 (data_types -> WINT .)
    SCAN            reduce using rule 63 (data_types -> WINT .)
    FOR             reduce using rule 63 (data_types -> WINT .)
    CONST           reduce using rule 63 (data_types -> WINT .)
    ID              reduce using rule 63 (data_types -> WINT .)
    APPEND          reduce using rule 63 (data_types -> WINT .)
    LEN             reduce using rule 63 (data_types -> WINT .)
    COPY            reduce using rule 63 (data_types -> WINT .)
    DELETE          reduce using rule 63 (data_types -> WINT .)
    IF              reduce using rule 63 (data_types -> WINT .)
    ELSE            reduce using rule 63 (data_types -> WINT .)
    TYPE            reduce using rule 63 (data_types -> WINT .)
    SWITCH          reduce using rule 63 (data_types -> WINT .)
    VAR             reduce using rule 63 (data_types -> WINT .)
    FUNC            reduce using rule 63 (data_types -> WINT .)
    INTEGER         reduce using rule 63 (data_types -> WINT .)
    FLOAT           reduce using rule 63 (data_types -> WINT .)
    NOT             reduce using rule 63 (data_types -> WINT .)
    RLLAVE          reduce using rule 63 (data_types -> WINT .)
    RETURN          reduce using rule 63 (data_types -> WINT .)
    STRING          reduce using rule 63 (data_types -> WINT .)
    TRUE            reduce using rule 63 (data_types -> WINT .)
    FALSE           reduce using rule 63 (data_types -> WINT .)
    INT32           reduce using rule 63 (data_types -> WINT .)
    INT64           reduce using rule 63 (data_types -> WINT .)
    FLOAT32         reduce using rule 63 (data_types -> WINT .)
    FLOAT64         reduce using rule 63 (data_types -> WINT .)
    BYTE            reduce using rule 63 (data_types -> WINT .)
    WFLOAT          reduce using rule 63 (data_types -> WINT .)
    WSTRING         reduce using rule 63 (data_types -> WINT .)
    WINT            reduce using rule 63 (data_types -> WINT .)
    BOOL            reduce using rule 63 (data_types -> WINT .)
    DEFAULT         reduce using rule 63 (data_types -> WINT .)
    CASE            reduce using rule 63 (data_types -> WINT .)
    EQUAL           shift and go to state 285

  ! EQUAL           [ reduce using rule 63 (data_types -> WINT .) ]


state 266

    (64) data_types -> BOOL .
    (214) data_type_and_value -> BOOL . EQUAL bool_value
    (232) data_type_and_value -> BOOL . EQUAL error

  ! shift/reduce conflict for EQUAL resolved as shift
    COLON           reduce using rule 64 (data_types -> BOOL .)
    PRINT           reduce using rule 64 (data_types -> BOOL .)
    SCAN            reduce using rule 64 (data_types -> BOOL .)
    FOR             reduce using rule 64 (data_types -> BOOL .)
    CONST           reduce using rule 64 (data_types -> BOOL .)
    ID              reduce using rule 64 (data_types -> BOOL .)
    APPEND          reduce using rule 64 (data_types -> BOOL .)
    LEN             reduce using rule 64 (data_types -> BOOL .)
    COPY            reduce using rule 64 (data_types -> BOOL .)
    DELETE          reduce using rule 64 (data_types -> BOOL .)
    IF              reduce using rule 64 (data_types -> BOOL .)
    ELSE            reduce using rule 64 (data_types -> BOOL .)
    TYPE            reduce using rule 64 (data_types -> BOOL .)
    SWITCH          reduce using rule 64 (data_types -> BOOL .)
    VAR             reduce using rule 64 (data_types -> BOOL .)
    FUNC            reduce using rule 64 (data_types -> BOOL .)
    INTEGER         reduce using rule 64 (data_types -> BOOL .)
    FLOAT           reduce using rule 64 (data_types -> BOOL .)
    NOT             reduce using rule 64 (data_types -> BOOL .)
    RLLAVE          reduce using rule 64 (data_types -> BOOL .)
    RETURN          reduce using rule 64 (data_types -> BOOL .)
    STRING          reduce using rule 64 (data_types -> BOOL .)
    TRUE            reduce using rule 64 (data_types -> BOOL .)
    FALSE           reduce using rule 64 (data_types -> BOOL .)
    INT32           reduce using rule 64 (data_types -> BOOL .)
    INT64           reduce using rule 64 (data_types -> BOOL .)
    FLOAT32         reduce using rule 64 (data_types -> BOOL .)
    FLOAT64         reduce using rule 64 (data_types -> BOOL .)
    BYTE            reduce using rule 64 (data_types -> BOOL .)
    WFLOAT          reduce using rule 64 (data_types -> BOOL .)
    WSTRING         reduce using rule 64 (data_types -> BOOL .)
    WINT            reduce using rule 64 (data_types -> BOOL .)
    BOOL            reduce using rule 64 (data_types -> BOOL .)
    DEFAULT         reduce using rule 64 (data_types -> BOOL .)
    CASE            reduce using rule 64 (data_types -> BOOL .)
    EQUAL           shift and go to state 291

  ! EQUAL           [ reduce using rule 64 (data_types -> BOOL .) ]


state 267

    (253) map_assignment -> map_var EQUAL something .

    COLON           reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    PRINT           reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    SCAN            reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    FOR             reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    CONST           reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    ID              reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    APPEND          reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    LEN             reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    COPY            reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    DELETE          reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    IF              reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    ELSE            reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    TYPE            reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    SWITCH          reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    VAR             reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    FUNC            reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    INTEGER         reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    FLOAT           reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    NOT             reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    RLLAVE          reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    RETURN          reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    STRING          reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    TRUE            reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    FALSE           reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    INT32           reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    INT64           reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    FLOAT32         reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    FLOAT64         reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    BYTE            reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    WFLOAT          reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    WSTRING         reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    WINT            reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    BOOL            reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    DEFAULT         reduce using rule 253 (map_assignment -> map_var EQUAL something .)
    CASE            reduce using rule 253 (map_assignment -> map_var EQUAL something .)


state 268

    (254) func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo . RETURN retorno RLLAVE

    RETURN          shift and go to state 329


state 269

    (255) func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN . body RLLAVE
    (257) body -> . codigo return_value
    (258) body -> . return_value
    (7) codigo -> . rule
    (8) codigo -> . more_rules
    (259) return_value -> . retorno COLON
    (260) return_value -> . retorno
    (10) rule -> . impresion COLON
    (11) rule -> . impresion
    (12) rule -> . scan_func COLON
    (13) rule -> . scan_func
    (14) rule -> . expression COLON
    (15) rule -> . expression
    (16) rule -> . cicloFor
    (17) rule -> . comparison
    (18) rule -> . logic_operation
    (19) rule -> . decVar COLON
    (20) rule -> . decVar
    (21) rule -> . decConst COLON
    (22) rule -> . decConst
    (23) rule -> . var_asignation
    (24) rule -> . var_asignation COLON
    (25) rule -> . funciones
    (26) rule -> . funciones COLON
    (27) rule -> . SenIF
    (28) rule -> . SenElseIF
    (29) rule -> . SenElse
    (30) rule -> . SenStruct
    (31) rule -> . cStruct
    (32) rule -> . switch_statement
    (33) rule -> . array_declaration COLON
    (34) rule -> . array_declaration
    (35) rule -> . array_var COLON
    (36) rule -> . array_var
    (37) rule -> . array_assignment COLON
    (38) rule -> . array_assignment
    (39) rule -> . slice_declaration COLON
    (40) rule -> . slice_declaration
    (41) rule -> . slice_var COLON
    (42) rule -> . slice_var
    (43) rule -> . slice_assignment COLON
    (44) rule -> . slice_assignment
    (45) rule -> . map_declaration COLON
    (46) rule -> . map_declaration
    (47) rule -> . map_assignment COLON
    (48) rule -> . map_assignment
    (49) rule -> . func_declaration
    (50) rule -> . main_func
    (9) more_rules -> . rule codigo
    (261) retorno -> . ID
    (262) retorno -> . values
    (263) retorno -> . operations
    (264) retorno -> . data_structure
    (173) impresion -> . PRINT LPAREN something RPAREN
    (174) impresion -> . PRINT LPAREN error RPAREN
    (201) scan_func -> . SCAN LPAREN POINTER RPAREN
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (166) cicloFor -> . FOR comparison LLLAVE codigo RLLAVE
    (167) cicloFor -> . FOR logic_operation LLLAVE codigo RLLAVE
    (168) cicloFor -> . FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (112) decVar -> . static
    (113) decVar -> . dynamic
    (109) decConst -> . CONST ID data_type_and_value
    (110) decConst -> . CONST ID EQUAL ID
    (111) decConst -> . CONST ID EQUAL data_structure
    (77) var_asignation -> . ID EQUAL any
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (88) SenIF -> . IF comparison LLLAVE codigo RLLAVE
    (89) SenIF -> . IF logic_operation LLLAVE codigo RLLAVE
    (90) SenIF -> . IF TRUE LLLAVE codigo RLLAVE
    (91) SenIF -> . IF FALSE LLLAVE codigo RLLAVE
    (92) SenElseIF -> . ELSE IF comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> . ELSE IF logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> . ELSE IF TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> . ELSE IF FALSE LLLAVE codigo RLLAVE
    (96) SenElse -> . ELSE LLLAVE codigo RLLAVE
    (97) SenStruct -> . TYPE ID STRUCT LLLAVE declaration RLLAVE
    (101) cStruct -> . ID DEQUAL ID LLLAVE asignaciones RLLAVE
    (233) switch_statement -> . SWITCH ID LLLAVE cases RLLAVE
    (238) array_declaration -> . VAR ID LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> . VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (243) array_var -> . ID LCORCHE index RCORCHE
    (247) array_assignment -> . array_var EQUAL something
    (147) slice_declaration -> . VAR ID LCORCHE RCORCHE data_types
    (148) slice_declaration -> . VAR ID EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> . VAR ID EQUAL funM
    (150) slice_declaration -> . ID DEQUAL funM
    (151) slice_declaration -> . ID DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (161) slice_assignment -> . slice_var EQUAL something_s
    (248) map_declaration -> . VAR ID LCORCHE data_types RCORCHE data_types
    (253) map_assignment -> . map_var EQUAL something
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (51) values -> . STRING
    (52) values -> . INTEGER
    (53) values -> . FLOAT
    (54) values -> . TRUE
    (55) values -> . FALSE
    (65) operations -> . expression
    (66) operations -> . comparison
    (67) operations -> . logic_operation
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (114) static -> . single
    (115) static -> . multiple
    (124) dynamic -> . ID DEQUAL algo
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (249) map_var -> . ID LCORCHE key RCORCHE
    (120) single -> . VAR ID data_types
    (121) single -> . VAR ID data_types EQUAL funciones
    (122) single -> . VAR ID data_types EQUAL data_structure
    (123) single -> . VAR ID data_type_and_value
    (116) multiple -> . list_var data_types
    (117) list_var -> . VAR ID COMA more

    ID              shift and go to state 330
    PRINT           shift and go to state 62
    SCAN            shift and go to state 63
    FOR             shift and go to state 65
    CONST           shift and go to state 71
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    IF              shift and go to state 79
    ELSE            shift and go to state 80
    TYPE            shift and go to state 81
    SWITCH          shift and go to state 82
    VAR             shift and go to state 83
    FUNC            shift and go to state 32
    STRING          shift and go to state 174
    INTEGER         shift and go to state 175
    FLOAT           shift and go to state 176
    TRUE            shift and go to state 177
    FALSE           shift and go to state 178
    NOT             shift and go to state 87

    body                           shift and go to state 331
    codigo                         shift and go to state 332
    return_value                   shift and go to state 333
    rule                           shift and go to state 34
    more_rules                     shift and go to state 35
    retorno                        shift and go to state 334
    impresion                      shift and go to state 36
    scan_func                      shift and go to state 37
    expression                     shift and go to state 335
    cicloFor                       shift and go to state 39
    comparison                     shift and go to state 336
    logic_operation                shift and go to state 337
    decVar                         shift and go to state 42
    decConst                       shift and go to state 43
    var_asignation                 shift and go to state 44
    funciones                      shift and go to state 45
    SenIF                          shift and go to state 46
    SenElseIF                      shift and go to state 47
    SenElse                        shift and go to state 48
    SenStruct                      shift and go to state 49
    cStruct                        shift and go to state 50
    switch_statement               shift and go to state 51
    array_declaration              shift and go to state 52
    array_var                      shift and go to state 53
    array_assignment               shift and go to state 54
    slice_declaration              shift and go to state 55
    slice_var                      shift and go to state 56
    slice_assignment               shift and go to state 57
    map_declaration                shift and go to state 58
    map_assignment                 shift and go to state 59
    func_declaration               shift and go to state 60
    main_func                      shift and go to state 61
    values                         shift and go to state 338
    operations                     shift and go to state 339
    data_structure                 shift and go to state 340
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    static                         shift and go to state 69
    dynamic                        shift and go to state 70
    call_func                      shift and go to state 78
    map_var                        shift and go to state 84
    single                         shift and go to state 88
    multiple                       shift and go to state 89
    list_var                       shift and go to state 90

state 270

    (256) func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .

    FUNC            reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    $end            reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    PRINT           reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    SCAN            reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    FOR             reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    CONST           reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    ID              reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    APPEND          reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    LEN             reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    COPY            reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    DELETE          reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    IF              reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    ELSE            reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    TYPE            reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    SWITCH          reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    VAR             reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    INTEGER         reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    FLOAT           reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    NOT             reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    RLLAVE          reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    RETURN          reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    STRING          reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    TRUE            reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    FALSE           reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    INT32           reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    INT64           reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    FLOAT32         reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    FLOAT64         reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    BYTE            reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    WFLOAT          reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    WSTRING         reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    WINT            reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    BOOL            reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    DEFAULT         reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)
    CASE            reduce using rule 256 (func_declaration -> FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE .)


state 271

    (173) impresion -> PRINT LPAREN something RPAREN .

    COLON           reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    PRINT           reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    SCAN            reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    FOR             reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    CONST           reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    ID              reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    APPEND          reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    LEN             reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    COPY            reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    DELETE          reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    IF              reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    ELSE            reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    TYPE            reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    SWITCH          reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    VAR             reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    FUNC            reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    INTEGER         reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    FLOAT           reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    NOT             reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    RLLAVE          reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    RETURN          reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    STRING          reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    TRUE            reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    FALSE           reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    INT32           reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    INT64           reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    FLOAT32         reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    FLOAT64         reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    BYTE            reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    WFLOAT          reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    WSTRING         reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    WINT            reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    BOOL            reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    DEFAULT         reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)
    CASE            reduce using rule 173 (impresion -> PRINT LPAREN something RPAREN .)


state 272

    (174) impresion -> PRINT LPAREN error RPAREN .

    COLON           reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    PRINT           reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    SCAN            reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    FOR             reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    CONST           reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    ID              reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    APPEND          reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    LEN             reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    COPY            reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    DELETE          reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    IF              reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    ELSE            reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    TYPE            reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    SWITCH          reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    VAR             reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    FUNC            reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    INTEGER         reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    FLOAT           reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    NOT             reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    RLLAVE          reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    RETURN          reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    STRING          reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    TRUE            reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    FALSE           reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    INT32           reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    INT64           reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    FLOAT32         reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    FLOAT64         reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    BYTE            reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    WFLOAT          reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    WSTRING         reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    WINT            reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    BOOL            reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    DEFAULT         reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)
    CASE            reduce using rule 174 (impresion -> PRINT LPAREN error RPAREN .)


state 273

    (201) scan_func -> SCAN LPAREN POINTER RPAREN .

    COLON           reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    PRINT           reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    SCAN            reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    FOR             reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    CONST           reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    ID              reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    APPEND          reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    LEN             reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    COPY            reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    DELETE          reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    IF              reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    ELSE            reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    TYPE            reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    SWITCH          reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    VAR             reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    FUNC            reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    INTEGER         reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    FLOAT           reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    NOT             reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    RLLAVE          reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    RETURN          reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    STRING          reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    TRUE            reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    FALSE           reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    INT32           reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    INT64           reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    FLOAT32         reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    FLOAT64         reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    BYTE            reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    WFLOAT          reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    WSTRING         reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    WINT            reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    BOOL            reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    DEFAULT         reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)
    CASE            reduce using rule 201 (scan_func -> SCAN LPAREN POINTER RPAREN .)


state 274

    (178) adicionaEx -> op something_ex adicionaEx .

    COLON           reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    PRINT           reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    SCAN            reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    FOR             reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    CONST           reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    ID              reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    APPEND          reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    LEN             reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    COPY            reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    DELETE          reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    IF              reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    ELSE            reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    TYPE            reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    SWITCH          reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    VAR             reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    FUNC            reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    INTEGER         reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    FLOAT           reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    NOT             reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    RLLAVE          reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    GREATER         reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    SMALLER         reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    GREATER_OR_EQUAL reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    SMALLER_OR_EQUAL reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    EQUAL_COMPARE   reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    NOT_EQUAL       reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    PLUS            reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    TIMES           reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    DIVIDE          reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    MINUS           reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    MOD             reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    RETURN          reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    STRING          reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    TRUE            reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    FALSE           reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    INT32           reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    INT64           reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    FLOAT32         reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    FLOAT64         reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    BYTE            reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    WFLOAT          reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    WSTRING         reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    WINT            reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    BOOL            reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    DEFAULT         reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    CASE            reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    RPAREN          reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    AND             reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    OR              reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    LLLAVE          reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    RCORCHE         reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)
    COMA            reduce using rule 178 (adicionaEx -> op something_ex adicionaEx .)


state 275

    (166) cicloFor -> FOR comparison LLLAVE codigo . RLLAVE

    RLLAVE          shift and go to state 341


state 276

    (167) cicloFor -> FOR logic_operation LLLAVE codigo . RLLAVE

    RLLAVE          shift and go to state 342


state 277

    (168) cicloFor -> FOR decVarOne COLON comparison . COLON incre LLLAVE codigo RLLAVE

    COLON           shift and go to state 343


state 278

    (171) decVarOne -> ID DEQUAL ID .

    COLON           reduce using rule 171 (decVarOne -> ID DEQUAL ID .)


state 279

    (172) decVarOne -> ID DEQUAL INTEGER .

    COLON           reduce using rule 172 (decVarOne -> ID DEQUAL INTEGER .)


state 280

    (244) index -> ID .
    (250) key -> ID .
    (158) index_s -> ID .
    (179) something_ex -> ID .
    (139) value -> ID .
    (195) logic_value -> ID .
    (243) array_var -> ID . LCORCHE index RCORCHE
    (249) map_var -> ID . LCORCHE key RCORCHE
    (157) slice_var -> ID . LCORCHE index_s RCORCHE
    (202) call_func -> ID . LPAREN list_params RPAREN
    (203) call_func -> ID . LPAREN RPAREN

  ! reduce/reduce conflict for RCORCHE resolved using rule 244 (index -> ID .)
  ! reduce/reduce conflict for RCORCHE resolved using rule 158 (index_s -> ID .)
  ! reduce/reduce conflict for RCORCHE resolved using rule 158 (index_s -> ID .)
  ! reduce/reduce conflict for GREATER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for GREATER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for EQUAL_COMPARE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MOD resolved using rule 139 (value -> ID .)
    RCORCHE         reduce using rule 158 (index_s -> ID .)
    GREATER         reduce using rule 139 (value -> ID .)
    SMALLER         reduce using rule 139 (value -> ID .)
    GREATER_OR_EQUAL reduce using rule 139 (value -> ID .)
    SMALLER_OR_EQUAL reduce using rule 139 (value -> ID .)
    EQUAL_COMPARE   reduce using rule 139 (value -> ID .)
    NOT_EQUAL       reduce using rule 139 (value -> ID .)
    PLUS            reduce using rule 139 (value -> ID .)
    TIMES           reduce using rule 139 (value -> ID .)
    DIVIDE          reduce using rule 139 (value -> ID .)
    MINUS           reduce using rule 139 (value -> ID .)
    MOD             reduce using rule 139 (value -> ID .)
    AND             reduce using rule 195 (logic_value -> ID .)
    OR              reduce using rule 195 (logic_value -> ID .)
    LCORCHE         shift and go to state 196
    LPAREN          shift and go to state 146

  ! RCORCHE         [ reduce using rule 244 (index -> ID .) ]
  ! RCORCHE         [ reduce using rule 250 (key -> ID .) ]
  ! GREATER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! GREATER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! EQUAL_COMPARE   [ reduce using rule 179 (something_ex -> ID .) ]
  ! NOT_EQUAL       [ reduce using rule 179 (something_ex -> ID .) ]
  ! PLUS            [ reduce using rule 179 (something_ex -> ID .) ]
  ! TIMES           [ reduce using rule 179 (something_ex -> ID .) ]
  ! DIVIDE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! MINUS           [ reduce using rule 179 (something_ex -> ID .) ]
  ! MOD             [ reduce using rule 179 (something_ex -> ID .) ]
  ! RCORCHE         [ reduce using rule 179 (something_ex -> ID .) ]


state 281

    (192) logic_recu -> logic_op logic_value logic_recu .

    PRINT           reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    SCAN            reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    FOR             reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    CONST           reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    ID              reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    APPEND          reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    LEN             reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    COPY            reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    DELETE          reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    IF              reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    ELSE            reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    TYPE            reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    SWITCH          reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    VAR             reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    FUNC            reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    INTEGER         reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    FLOAT           reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    NOT             reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    RLLAVE          reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    RETURN          reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    STRING          reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    TRUE            reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    FALSE           reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    INT32           reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    INT64           reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    FLOAT32         reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    FLOAT64         reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    BYTE            reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    WFLOAT          reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    WSTRING         reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    WINT            reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    BOOL            reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    DEFAULT         reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    CASE            reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    LLLAVE          reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    COLON           reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    RPAREN          reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    RCORCHE         reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)
    COMA            reduce using rule 192 (logic_recu -> logic_op logic_value logic_recu .)


state 282

    (110) decConst -> CONST ID EQUAL ID .
    (243) array_var -> ID . LCORCHE index RCORCHE
    (249) map_var -> ID . LCORCHE key RCORCHE
    (157) slice_var -> ID . LCORCHE index_s RCORCHE

    COLON           reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    PRINT           reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    SCAN            reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    FOR             reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    CONST           reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    ID              reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    APPEND          reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    LEN             reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    COPY            reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    DELETE          reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    IF              reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    ELSE            reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    TYPE            reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    SWITCH          reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    VAR             reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    FUNC            reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    INTEGER         reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    FLOAT           reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    NOT             reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    RLLAVE          reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    RETURN          reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    STRING          reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    TRUE            reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    FALSE           reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    INT32           reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    INT64           reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    FLOAT32         reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    FLOAT64         reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    BYTE            reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    WFLOAT          reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    WSTRING         reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    WINT            reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    BOOL            reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    DEFAULT         reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    CASE            reduce using rule 110 (decConst -> CONST ID EQUAL ID .)
    LCORCHE         shift and go to state 196


state 283

    (111) decConst -> CONST ID EQUAL data_structure .

    COLON           reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    PRINT           reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    SCAN            reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    FOR             reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    CONST           reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    ID              reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    APPEND          reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    LEN             reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    COPY            reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    DELETE          reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    IF              reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    ELSE            reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    TYPE            reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    SWITCH          reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    VAR             reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    FUNC            reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    INTEGER         reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    FLOAT           reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    NOT             reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    RLLAVE          reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    RETURN          reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    STRING          reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    TRUE            reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    FALSE           reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    INT32           reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    INT64           reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    FLOAT32         reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    FLOAT64         reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    BYTE            reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    WFLOAT          reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    WSTRING         reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    WINT            reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    BOOL            reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    DEFAULT         reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)
    CASE            reduce using rule 111 (decConst -> CONST ID EQUAL data_structure .)


state 284

    (207) data_type_and_value -> WSTRING EQUAL . str_value
    (225) data_type_and_value -> WSTRING EQUAL . error
    (215) str_value -> . STRING
    (216) str_value -> . ID

    error           shift and go to state 345
    STRING          shift and go to state 346
    ID              shift and go to state 347

    str_value                      shift and go to state 344

state 285

    (208) data_type_and_value -> WINT EQUAL . int_value
    (226) data_type_and_value -> WINT EQUAL . error
    (217) int_value -> . INTEGER
    (218) int_value -> . expression
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    error           shift and go to state 349
    INTEGER         shift and go to state 350
    ID              shift and go to state 191
    FLOAT           shift and go to state 86
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    int_value                      shift and go to state 348
    expression                     shift and go to state 351
    something_ex                   shift and go to state 64
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 286

    (209) data_type_and_value -> INT32 EQUAL . int_value
    (227) data_type_and_value -> INT32 EQUAL . error
    (217) int_value -> . INTEGER
    (218) int_value -> . expression
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    error           shift and go to state 353
    INTEGER         shift and go to state 350
    ID              shift and go to state 191
    FLOAT           shift and go to state 86
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    int_value                      shift and go to state 352
    expression                     shift and go to state 351
    something_ex                   shift and go to state 64
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 287

    (210) data_type_and_value -> INT64 EQUAL . int_value
    (228) data_type_and_value -> INT64 EQUAL . error
    (217) int_value -> . INTEGER
    (218) int_value -> . expression
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    error           shift and go to state 355
    INTEGER         shift and go to state 350
    ID              shift and go to state 191
    FLOAT           shift and go to state 86
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    int_value                      shift and go to state 354
    expression                     shift and go to state 351
    something_ex                   shift and go to state 64
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 288

    (211) data_type_and_value -> WFLOAT EQUAL . float_value
    (229) data_type_and_value -> WFLOAT EQUAL . error
    (223) float_value -> . FLOAT
    (224) float_value -> . expression
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    error           shift and go to state 357
    FLOAT           shift and go to state 358
    ID              shift and go to state 191
    INTEGER         shift and go to state 85
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    float_value                    shift and go to state 356
    expression                     shift and go to state 359
    something_ex                   shift and go to state 64
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 289

    (212) data_type_and_value -> FLOAT32 EQUAL . float_value
    (230) data_type_and_value -> FLOAT32 EQUAL . error
    (223) float_value -> . FLOAT
    (224) float_value -> . expression
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    error           shift and go to state 361
    FLOAT           shift and go to state 358
    ID              shift and go to state 191
    INTEGER         shift and go to state 85
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    float_value                    shift and go to state 360
    expression                     shift and go to state 359
    something_ex                   shift and go to state 64
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 290

    (213) data_type_and_value -> FLOAT64 EQUAL . float_value
    (231) data_type_and_value -> FLOAT64 EQUAL . error
    (223) float_value -> . FLOAT
    (224) float_value -> . expression
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    error           shift and go to state 363
    FLOAT           shift and go to state 358
    ID              shift and go to state 191
    INTEGER         shift and go to state 85
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    float_value                    shift and go to state 362
    expression                     shift and go to state 359
    something_ex                   shift and go to state 64
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 291

    (214) data_type_and_value -> BOOL EQUAL . bool_value
    (232) data_type_and_value -> BOOL EQUAL . error
    (219) bool_value -> . TRUE
    (220) bool_value -> . FALSE
    (221) bool_value -> . comparison
    (222) bool_value -> . logic_operation
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    error           shift and go to state 365
    TRUE            shift and go to state 366
    FALSE           shift and go to state 367
    ID              shift and go to state 155
    NOT             shift and go to state 87
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    bool_value                     shift and go to state 364
    comparison                     shift and go to state 368
    logic_operation                shift and go to state 369
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    expression                     shift and go to state 132
    something_ex                   shift and go to state 64
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 292

    (101) cStruct -> ID DEQUAL ID LLLAVE . asignaciones RLLAVE
    (102) asignaciones -> . ID POINTS valor
    (103) asignaciones -> . ID POINTS valor COMA asignaciones

    ID              shift and go to state 370

    asignaciones                   shift and go to state 371

state 293

    (151) slice_declaration -> ID DEQUAL LCORCHE RCORCHE . data_types arr_content
    (56) data_types -> . INT32
    (57) data_types -> . INT64
    (58) data_types -> . FLOAT32
    (59) data_types -> . FLOAT64
    (60) data_types -> . BYTE
    (61) data_types -> . WFLOAT
    (62) data_types -> . WSTRING
    (63) data_types -> . WINT
    (64) data_types -> . BOOL

    INT32           shift and go to state 22
    INT64           shift and go to state 23
    FLOAT32         shift and go to state 24
    FLOAT64         shift and go to state 25
    BYTE            shift and go to state 26
    WFLOAT          shift and go to state 27
    WSTRING         shift and go to state 28
    WINT            shift and go to state 29
    BOOL            shift and go to state 30

    data_types                     shift and go to state 372

state 294

    (152) funM -> MAKE LPAREN . LCORCHE RCORCHE data_types COMA cap RPAREN
    (153) funM -> MAKE LPAREN . LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN

    LCORCHE         shift and go to state 373


state 295

    (243) array_var -> ID LCORCHE index RCORCHE .

    COLON           reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    EQUAL           reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    PRINT           reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    SCAN            reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    FOR             reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    CONST           reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    ID              reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    APPEND          reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    LEN             reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    COPY            reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    DELETE          reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    IF              reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    ELSE            reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    TYPE            reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    SWITCH          reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    VAR             reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    FUNC            reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    INTEGER         reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    FLOAT           reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    NOT             reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    RLLAVE          reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    GREATER         reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    SMALLER         reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    GREATER_OR_EQUAL reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    SMALLER_OR_EQUAL reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    EQUAL_COMPARE   reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    NOT_EQUAL       reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    PLUS            reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    TIMES           reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    DIVIDE          reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    MINUS           reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    MOD             reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    RETURN          reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    STRING          reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    TRUE            reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    FALSE           reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    INT32           reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    INT64           reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    FLOAT32         reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    FLOAT64         reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    BYTE            reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    WFLOAT          reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    WSTRING         reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    WINT            reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    BOOL            reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    DEFAULT         reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    CASE            reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    RPAREN          reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    AND             reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    OR              reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    LLLAVE          reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    RCORCHE         reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)
    COMA            reduce using rule 243 (array_var -> ID LCORCHE index RCORCHE .)


state 296

    (157) slice_var -> ID LCORCHE index_s RCORCHE .

    COLON           reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    EQUAL           reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    PRINT           reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    SCAN            reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    FOR             reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    CONST           reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    ID              reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    APPEND          reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    LEN             reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    COPY            reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    DELETE          reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    IF              reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    ELSE            reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    TYPE            reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    SWITCH          reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    VAR             reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    FUNC            reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    INTEGER         reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    FLOAT           reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    NOT             reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    RLLAVE          reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    GREATER         reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    SMALLER         reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    GREATER_OR_EQUAL reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    SMALLER_OR_EQUAL reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    EQUAL_COMPARE   reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    NOT_EQUAL       reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    PLUS            reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    TIMES           reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    DIVIDE          reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    MINUS           reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    MOD             reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    RETURN          reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    STRING          reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    TRUE            reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    FALSE           reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    INT32           reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    INT64           reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    FLOAT32         reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    FLOAT64         reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    BYTE            reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    WFLOAT          reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    WSTRING         reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    WINT            reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    BOOL            reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    DEFAULT         reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    CASE            reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    RPAREN          reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    AND             reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    OR              reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    LLLAVE          reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    RCORCHE         reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)
    COMA            reduce using rule 157 (slice_var -> ID LCORCHE index_s RCORCHE .)


state 297

    (249) map_var -> ID LCORCHE key RCORCHE .

    EQUAL           reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    GREATER         reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    SMALLER         reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    GREATER_OR_EQUAL reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    SMALLER_OR_EQUAL reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    EQUAL_COMPARE   reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    NOT_EQUAL       reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    PLUS            reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    TIMES           reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    DIVIDE          reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    MINUS           reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    MOD             reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    COLON           reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    PRINT           reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    SCAN            reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    FOR             reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    CONST           reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    ID              reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    APPEND          reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    LEN             reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    COPY            reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    DELETE          reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    IF              reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    ELSE            reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    TYPE            reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    SWITCH          reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    VAR             reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    FUNC            reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    INTEGER         reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    FLOAT           reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    NOT             reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    RLLAVE          reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    RETURN          reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    STRING          reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    TRUE            reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    FALSE           reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    INT32           reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    INT64           reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    FLOAT32         reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    FLOAT64         reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    BYTE            reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    WFLOAT          reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    WSTRING         reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    WINT            reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    BOOL            reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    DEFAULT         reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    CASE            reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    RPAREN          reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    AND             reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    OR              reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    LLLAVE          reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    RCORCHE         reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)
    COMA            reduce using rule 249 (map_var -> ID LCORCHE key RCORCHE .)


state 298

    (205) list_params -> ID COMA . more_p
    (206) more_p -> . list_params
    (204) list_params -> . ID
    (205) list_params -> . ID COMA more_p

    ID              shift and go to state 236

    more_p                         shift and go to state 374
    list_params                    shift and go to state 375

state 299

    (202) call_func -> ID LPAREN list_params RPAREN .

    COLON           reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    PRINT           reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    SCAN            reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    FOR             reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    CONST           reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    ID              reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    APPEND          reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    LEN             reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    COPY            reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    DELETE          reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    IF              reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    ELSE            reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    TYPE            reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    SWITCH          reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    VAR             reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    FUNC            reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    INTEGER         reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    FLOAT           reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    NOT             reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    RLLAVE          reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    GREATER         reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    SMALLER         reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    GREATER_OR_EQUAL reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    SMALLER_OR_EQUAL reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    EQUAL_COMPARE   reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    NOT_EQUAL       reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    PLUS            reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    TIMES           reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    DIVIDE          reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    MINUS           reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    MOD             reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    RETURN          reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    STRING          reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    TRUE            reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    FALSE           reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    INT32           reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    INT64           reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    FLOAT32         reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    FLOAT64         reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    BYTE            reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    WFLOAT          reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    WSTRING         reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    WINT            reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    BOOL            reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    DEFAULT         reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    CASE            reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    RPAREN          reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    AND             reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    OR              reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    LLLAVE          reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    RCORCHE         reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)
    COMA            reduce using rule 202 (call_func -> ID LPAREN list_params RPAREN .)


state 300

    (130) funciones -> APPEND LPAREN ID COMA . values RPAREN
    (131) funciones -> APPEND LPAREN ID COMA . ID RPAREN
    (51) values -> . STRING
    (52) values -> . INTEGER
    (53) values -> . FLOAT
    (54) values -> . TRUE
    (55) values -> . FALSE

    ID              shift and go to state 376
    STRING          shift and go to state 174
    INTEGER         shift and go to state 378
    FLOAT           shift and go to state 379
    TRUE            shift and go to state 177
    FALSE           shift and go to state 178

    values                         shift and go to state 377

state 301

    (132) funciones -> LEN LPAREN ID RPAREN .

    COLON           reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    PRINT           reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    SCAN            reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    FOR             reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    CONST           reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    ID              reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    APPEND          reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    LEN             reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    COPY            reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    DELETE          reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    IF              reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    ELSE            reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    TYPE            reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    SWITCH          reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    VAR             reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    FUNC            reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    INTEGER         reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    FLOAT           reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    NOT             reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    RLLAVE          reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    GREATER         reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    SMALLER         reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    GREATER_OR_EQUAL reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    SMALLER_OR_EQUAL reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    EQUAL_COMPARE   reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    NOT_EQUAL       reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    PLUS            reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    TIMES           reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    DIVIDE          reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    MINUS           reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    MOD             reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    RETURN          reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    STRING          reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    TRUE            reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    FALSE           reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    INT32           reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    INT64           reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    FLOAT32         reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    FLOAT64         reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    BYTE            reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    WFLOAT          reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    WSTRING         reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    WINT            reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    BOOL            reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    DEFAULT         reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    CASE            reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    RPAREN          reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    AND             reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    OR              reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    LLLAVE          reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    RCORCHE         reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)
    COMA            reduce using rule 132 (funciones -> LEN LPAREN ID RPAREN .)


state 302

    (133) funciones -> COPY LPAREN ID COMA . ID RPAREN

    ID              shift and go to state 380


state 303

    (134) funciones -> DELETE LPAREN ID COMA . clave RPAREN
    (136) clave -> . ID
    (137) clave -> . values
    (51) values -> . STRING
    (52) values -> . INTEGER
    (53) values -> . FLOAT
    (54) values -> . TRUE
    (55) values -> . FALSE

    ID              shift and go to state 381
    STRING          shift and go to state 174
    INTEGER         shift and go to state 378
    FLOAT           shift and go to state 379
    TRUE            shift and go to state 177
    FALSE           shift and go to state 178

    clave                          shift and go to state 382
    values                         shift and go to state 383

state 304

    (88) SenIF -> IF comparison LLLAVE codigo . RLLAVE

    RLLAVE          shift and go to state 384


state 305

    (89) SenIF -> IF logic_operation LLLAVE codigo . RLLAVE

    RLLAVE          shift and go to state 385


state 306

    (90) SenIF -> IF TRUE LLLAVE codigo . RLLAVE

    RLLAVE          shift and go to state 386


state 307

    (91) SenIF -> IF FALSE LLLAVE codigo . RLLAVE

    RLLAVE          shift and go to state 387


state 308

    (92) SenElseIF -> ELSE IF comparison LLLAVE . codigo RLLAVE
    (7) codigo -> . rule
    (8) codigo -> . more_rules
    (10) rule -> . impresion COLON
    (11) rule -> . impresion
    (12) rule -> . scan_func COLON
    (13) rule -> . scan_func
    (14) rule -> . expression COLON
    (15) rule -> . expression
    (16) rule -> . cicloFor
    (17) rule -> . comparison
    (18) rule -> . logic_operation
    (19) rule -> . decVar COLON
    (20) rule -> . decVar
    (21) rule -> . decConst COLON
    (22) rule -> . decConst
    (23) rule -> . var_asignation
    (24) rule -> . var_asignation COLON
    (25) rule -> . funciones
    (26) rule -> . funciones COLON
    (27) rule -> . SenIF
    (28) rule -> . SenElseIF
    (29) rule -> . SenElse
    (30) rule -> . SenStruct
    (31) rule -> . cStruct
    (32) rule -> . switch_statement
    (33) rule -> . array_declaration COLON
    (34) rule -> . array_declaration
    (35) rule -> . array_var COLON
    (36) rule -> . array_var
    (37) rule -> . array_assignment COLON
    (38) rule -> . array_assignment
    (39) rule -> . slice_declaration COLON
    (40) rule -> . slice_declaration
    (41) rule -> . slice_var COLON
    (42) rule -> . slice_var
    (43) rule -> . slice_assignment COLON
    (44) rule -> . slice_assignment
    (45) rule -> . map_declaration COLON
    (46) rule -> . map_declaration
    (47) rule -> . map_assignment COLON
    (48) rule -> . map_assignment
    (49) rule -> . func_declaration
    (50) rule -> . main_func
    (9) more_rules -> . rule codigo
    (173) impresion -> . PRINT LPAREN something RPAREN
    (174) impresion -> . PRINT LPAREN error RPAREN
    (201) scan_func -> . SCAN LPAREN POINTER RPAREN
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (166) cicloFor -> . FOR comparison LLLAVE codigo RLLAVE
    (167) cicloFor -> . FOR logic_operation LLLAVE codigo RLLAVE
    (168) cicloFor -> . FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (112) decVar -> . static
    (113) decVar -> . dynamic
    (109) decConst -> . CONST ID data_type_and_value
    (110) decConst -> . CONST ID EQUAL ID
    (111) decConst -> . CONST ID EQUAL data_structure
    (77) var_asignation -> . ID EQUAL any
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (88) SenIF -> . IF comparison LLLAVE codigo RLLAVE
    (89) SenIF -> . IF logic_operation LLLAVE codigo RLLAVE
    (90) SenIF -> . IF TRUE LLLAVE codigo RLLAVE
    (91) SenIF -> . IF FALSE LLLAVE codigo RLLAVE
    (92) SenElseIF -> . ELSE IF comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> . ELSE IF logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> . ELSE IF TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> . ELSE IF FALSE LLLAVE codigo RLLAVE
    (96) SenElse -> . ELSE LLLAVE codigo RLLAVE
    (97) SenStruct -> . TYPE ID STRUCT LLLAVE declaration RLLAVE
    (101) cStruct -> . ID DEQUAL ID LLLAVE asignaciones RLLAVE
    (233) switch_statement -> . SWITCH ID LLLAVE cases RLLAVE
    (238) array_declaration -> . VAR ID LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> . VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (243) array_var -> . ID LCORCHE index RCORCHE
    (247) array_assignment -> . array_var EQUAL something
    (147) slice_declaration -> . VAR ID LCORCHE RCORCHE data_types
    (148) slice_declaration -> . VAR ID EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> . VAR ID EQUAL funM
    (150) slice_declaration -> . ID DEQUAL funM
    (151) slice_declaration -> . ID DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (161) slice_assignment -> . slice_var EQUAL something_s
    (248) map_declaration -> . VAR ID LCORCHE data_types RCORCHE data_types
    (253) map_assignment -> . map_var EQUAL something
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (114) static -> . single
    (115) static -> . multiple
    (124) dynamic -> . ID DEQUAL algo
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (249) map_var -> . ID LCORCHE key RCORCHE
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (120) single -> . VAR ID data_types
    (121) single -> . VAR ID data_types EQUAL funciones
    (122) single -> . VAR ID data_types EQUAL data_structure
    (123) single -> . VAR ID data_type_and_value
    (116) multiple -> . list_var data_types
    (117) list_var -> . VAR ID COMA more

    PRINT           shift and go to state 62
    SCAN            shift and go to state 63
    FOR             shift and go to state 65
    CONST           shift and go to state 71
    ID              shift and go to state 72
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    IF              shift and go to state 79
    ELSE            shift and go to state 80
    TYPE            shift and go to state 81
    SWITCH          shift and go to state 82
    VAR             shift and go to state 83
    FUNC            shift and go to state 32
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    NOT             shift and go to state 87

    comparison                     shift and go to state 40
    codigo                         shift and go to state 388
    rule                           shift and go to state 34
    more_rules                     shift and go to state 35
    impresion                      shift and go to state 36
    scan_func                      shift and go to state 37
    expression                     shift and go to state 38
    cicloFor                       shift and go to state 39
    logic_operation                shift and go to state 41
    decVar                         shift and go to state 42
    decConst                       shift and go to state 43
    var_asignation                 shift and go to state 44
    funciones                      shift and go to state 45
    SenIF                          shift and go to state 46
    SenElseIF                      shift and go to state 47
    SenElse                        shift and go to state 48
    SenStruct                      shift and go to state 49
    cStruct                        shift and go to state 50
    switch_statement               shift and go to state 51
    array_declaration              shift and go to state 52
    array_var                      shift and go to state 53
    array_assignment               shift and go to state 54
    slice_declaration              shift and go to state 55
    slice_var                      shift and go to state 56
    slice_assignment               shift and go to state 57
    map_declaration                shift and go to state 58
    map_assignment                 shift and go to state 59
    func_declaration               shift and go to state 60
    main_func                      shift and go to state 61
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    static                         shift and go to state 69
    dynamic                        shift and go to state 70
    data_structure                 shift and go to state 73
    call_func                      shift and go to state 78
    map_var                        shift and go to state 84
    single                         shift and go to state 88
    multiple                       shift and go to state 89
    list_var                       shift and go to state 90

state 309

    (93) SenElseIF -> ELSE IF logic_operation LLLAVE . codigo RLLAVE
    (7) codigo -> . rule
    (8) codigo -> . more_rules
    (10) rule -> . impresion COLON
    (11) rule -> . impresion
    (12) rule -> . scan_func COLON
    (13) rule -> . scan_func
    (14) rule -> . expression COLON
    (15) rule -> . expression
    (16) rule -> . cicloFor
    (17) rule -> . comparison
    (18) rule -> . logic_operation
    (19) rule -> . decVar COLON
    (20) rule -> . decVar
    (21) rule -> . decConst COLON
    (22) rule -> . decConst
    (23) rule -> . var_asignation
    (24) rule -> . var_asignation COLON
    (25) rule -> . funciones
    (26) rule -> . funciones COLON
    (27) rule -> . SenIF
    (28) rule -> . SenElseIF
    (29) rule -> . SenElse
    (30) rule -> . SenStruct
    (31) rule -> . cStruct
    (32) rule -> . switch_statement
    (33) rule -> . array_declaration COLON
    (34) rule -> . array_declaration
    (35) rule -> . array_var COLON
    (36) rule -> . array_var
    (37) rule -> . array_assignment COLON
    (38) rule -> . array_assignment
    (39) rule -> . slice_declaration COLON
    (40) rule -> . slice_declaration
    (41) rule -> . slice_var COLON
    (42) rule -> . slice_var
    (43) rule -> . slice_assignment COLON
    (44) rule -> . slice_assignment
    (45) rule -> . map_declaration COLON
    (46) rule -> . map_declaration
    (47) rule -> . map_assignment COLON
    (48) rule -> . map_assignment
    (49) rule -> . func_declaration
    (50) rule -> . main_func
    (9) more_rules -> . rule codigo
    (173) impresion -> . PRINT LPAREN something RPAREN
    (174) impresion -> . PRINT LPAREN error RPAREN
    (201) scan_func -> . SCAN LPAREN POINTER RPAREN
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (166) cicloFor -> . FOR comparison LLLAVE codigo RLLAVE
    (167) cicloFor -> . FOR logic_operation LLLAVE codigo RLLAVE
    (168) cicloFor -> . FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (112) decVar -> . static
    (113) decVar -> . dynamic
    (109) decConst -> . CONST ID data_type_and_value
    (110) decConst -> . CONST ID EQUAL ID
    (111) decConst -> . CONST ID EQUAL data_structure
    (77) var_asignation -> . ID EQUAL any
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (88) SenIF -> . IF comparison LLLAVE codigo RLLAVE
    (89) SenIF -> . IF logic_operation LLLAVE codigo RLLAVE
    (90) SenIF -> . IF TRUE LLLAVE codigo RLLAVE
    (91) SenIF -> . IF FALSE LLLAVE codigo RLLAVE
    (92) SenElseIF -> . ELSE IF comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> . ELSE IF logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> . ELSE IF TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> . ELSE IF FALSE LLLAVE codigo RLLAVE
    (96) SenElse -> . ELSE LLLAVE codigo RLLAVE
    (97) SenStruct -> . TYPE ID STRUCT LLLAVE declaration RLLAVE
    (101) cStruct -> . ID DEQUAL ID LLLAVE asignaciones RLLAVE
    (233) switch_statement -> . SWITCH ID LLLAVE cases RLLAVE
    (238) array_declaration -> . VAR ID LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> . VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (243) array_var -> . ID LCORCHE index RCORCHE
    (247) array_assignment -> . array_var EQUAL something
    (147) slice_declaration -> . VAR ID LCORCHE RCORCHE data_types
    (148) slice_declaration -> . VAR ID EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> . VAR ID EQUAL funM
    (150) slice_declaration -> . ID DEQUAL funM
    (151) slice_declaration -> . ID DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (161) slice_assignment -> . slice_var EQUAL something_s
    (248) map_declaration -> . VAR ID LCORCHE data_types RCORCHE data_types
    (253) map_assignment -> . map_var EQUAL something
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (114) static -> . single
    (115) static -> . multiple
    (124) dynamic -> . ID DEQUAL algo
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (249) map_var -> . ID LCORCHE key RCORCHE
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (120) single -> . VAR ID data_types
    (121) single -> . VAR ID data_types EQUAL funciones
    (122) single -> . VAR ID data_types EQUAL data_structure
    (123) single -> . VAR ID data_type_and_value
    (116) multiple -> . list_var data_types
    (117) list_var -> . VAR ID COMA more

    PRINT           shift and go to state 62
    SCAN            shift and go to state 63
    FOR             shift and go to state 65
    CONST           shift and go to state 71
    ID              shift and go to state 72
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    IF              shift and go to state 79
    ELSE            shift and go to state 80
    TYPE            shift and go to state 81
    SWITCH          shift and go to state 82
    VAR             shift and go to state 83
    FUNC            shift and go to state 32
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    NOT             shift and go to state 87

    logic_operation                shift and go to state 41
    codigo                         shift and go to state 389
    rule                           shift and go to state 34
    more_rules                     shift and go to state 35
    impresion                      shift and go to state 36
    scan_func                      shift and go to state 37
    expression                     shift and go to state 38
    cicloFor                       shift and go to state 39
    comparison                     shift and go to state 40
    decVar                         shift and go to state 42
    decConst                       shift and go to state 43
    var_asignation                 shift and go to state 44
    funciones                      shift and go to state 45
    SenIF                          shift and go to state 46
    SenElseIF                      shift and go to state 47
    SenElse                        shift and go to state 48
    SenStruct                      shift and go to state 49
    cStruct                        shift and go to state 50
    switch_statement               shift and go to state 51
    array_declaration              shift and go to state 52
    array_var                      shift and go to state 53
    array_assignment               shift and go to state 54
    slice_declaration              shift and go to state 55
    slice_var                      shift and go to state 56
    slice_assignment               shift and go to state 57
    map_declaration                shift and go to state 58
    map_assignment                 shift and go to state 59
    func_declaration               shift and go to state 60
    main_func                      shift and go to state 61
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    static                         shift and go to state 69
    dynamic                        shift and go to state 70
    data_structure                 shift and go to state 73
    call_func                      shift and go to state 78
    map_var                        shift and go to state 84
    single                         shift and go to state 88
    multiple                       shift and go to state 89
    list_var                       shift and go to state 90

state 310

    (94) SenElseIF -> ELSE IF TRUE LLLAVE . codigo RLLAVE
    (7) codigo -> . rule
    (8) codigo -> . more_rules
    (10) rule -> . impresion COLON
    (11) rule -> . impresion
    (12) rule -> . scan_func COLON
    (13) rule -> . scan_func
    (14) rule -> . expression COLON
    (15) rule -> . expression
    (16) rule -> . cicloFor
    (17) rule -> . comparison
    (18) rule -> . logic_operation
    (19) rule -> . decVar COLON
    (20) rule -> . decVar
    (21) rule -> . decConst COLON
    (22) rule -> . decConst
    (23) rule -> . var_asignation
    (24) rule -> . var_asignation COLON
    (25) rule -> . funciones
    (26) rule -> . funciones COLON
    (27) rule -> . SenIF
    (28) rule -> . SenElseIF
    (29) rule -> . SenElse
    (30) rule -> . SenStruct
    (31) rule -> . cStruct
    (32) rule -> . switch_statement
    (33) rule -> . array_declaration COLON
    (34) rule -> . array_declaration
    (35) rule -> . array_var COLON
    (36) rule -> . array_var
    (37) rule -> . array_assignment COLON
    (38) rule -> . array_assignment
    (39) rule -> . slice_declaration COLON
    (40) rule -> . slice_declaration
    (41) rule -> . slice_var COLON
    (42) rule -> . slice_var
    (43) rule -> . slice_assignment COLON
    (44) rule -> . slice_assignment
    (45) rule -> . map_declaration COLON
    (46) rule -> . map_declaration
    (47) rule -> . map_assignment COLON
    (48) rule -> . map_assignment
    (49) rule -> . func_declaration
    (50) rule -> . main_func
    (9) more_rules -> . rule codigo
    (173) impresion -> . PRINT LPAREN something RPAREN
    (174) impresion -> . PRINT LPAREN error RPAREN
    (201) scan_func -> . SCAN LPAREN POINTER RPAREN
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (166) cicloFor -> . FOR comparison LLLAVE codigo RLLAVE
    (167) cicloFor -> . FOR logic_operation LLLAVE codigo RLLAVE
    (168) cicloFor -> . FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (112) decVar -> . static
    (113) decVar -> . dynamic
    (109) decConst -> . CONST ID data_type_and_value
    (110) decConst -> . CONST ID EQUAL ID
    (111) decConst -> . CONST ID EQUAL data_structure
    (77) var_asignation -> . ID EQUAL any
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (88) SenIF -> . IF comparison LLLAVE codigo RLLAVE
    (89) SenIF -> . IF logic_operation LLLAVE codigo RLLAVE
    (90) SenIF -> . IF TRUE LLLAVE codigo RLLAVE
    (91) SenIF -> . IF FALSE LLLAVE codigo RLLAVE
    (92) SenElseIF -> . ELSE IF comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> . ELSE IF logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> . ELSE IF TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> . ELSE IF FALSE LLLAVE codigo RLLAVE
    (96) SenElse -> . ELSE LLLAVE codigo RLLAVE
    (97) SenStruct -> . TYPE ID STRUCT LLLAVE declaration RLLAVE
    (101) cStruct -> . ID DEQUAL ID LLLAVE asignaciones RLLAVE
    (233) switch_statement -> . SWITCH ID LLLAVE cases RLLAVE
    (238) array_declaration -> . VAR ID LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> . VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (243) array_var -> . ID LCORCHE index RCORCHE
    (247) array_assignment -> . array_var EQUAL something
    (147) slice_declaration -> . VAR ID LCORCHE RCORCHE data_types
    (148) slice_declaration -> . VAR ID EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> . VAR ID EQUAL funM
    (150) slice_declaration -> . ID DEQUAL funM
    (151) slice_declaration -> . ID DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (161) slice_assignment -> . slice_var EQUAL something_s
    (248) map_declaration -> . VAR ID LCORCHE data_types RCORCHE data_types
    (253) map_assignment -> . map_var EQUAL something
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (114) static -> . single
    (115) static -> . multiple
    (124) dynamic -> . ID DEQUAL algo
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (249) map_var -> . ID LCORCHE key RCORCHE
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (120) single -> . VAR ID data_types
    (121) single -> . VAR ID data_types EQUAL funciones
    (122) single -> . VAR ID data_types EQUAL data_structure
    (123) single -> . VAR ID data_type_and_value
    (116) multiple -> . list_var data_types
    (117) list_var -> . VAR ID COMA more

    PRINT           shift and go to state 62
    SCAN            shift and go to state 63
    FOR             shift and go to state 65
    CONST           shift and go to state 71
    ID              shift and go to state 72
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    IF              shift and go to state 79
    ELSE            shift and go to state 80
    TYPE            shift and go to state 81
    SWITCH          shift and go to state 82
    VAR             shift and go to state 83
    FUNC            shift and go to state 32
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    NOT             shift and go to state 87

    codigo                         shift and go to state 390
    rule                           shift and go to state 34
    more_rules                     shift and go to state 35
    impresion                      shift and go to state 36
    scan_func                      shift and go to state 37
    expression                     shift and go to state 38
    cicloFor                       shift and go to state 39
    comparison                     shift and go to state 40
    logic_operation                shift and go to state 41
    decVar                         shift and go to state 42
    decConst                       shift and go to state 43
    var_asignation                 shift and go to state 44
    funciones                      shift and go to state 45
    SenIF                          shift and go to state 46
    SenElseIF                      shift and go to state 47
    SenElse                        shift and go to state 48
    SenStruct                      shift and go to state 49
    cStruct                        shift and go to state 50
    switch_statement               shift and go to state 51
    array_declaration              shift and go to state 52
    array_var                      shift and go to state 53
    array_assignment               shift and go to state 54
    slice_declaration              shift and go to state 55
    slice_var                      shift and go to state 56
    slice_assignment               shift and go to state 57
    map_declaration                shift and go to state 58
    map_assignment                 shift and go to state 59
    func_declaration               shift and go to state 60
    main_func                      shift and go to state 61
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    static                         shift and go to state 69
    dynamic                        shift and go to state 70
    data_structure                 shift and go to state 73
    call_func                      shift and go to state 78
    map_var                        shift and go to state 84
    single                         shift and go to state 88
    multiple                       shift and go to state 89
    list_var                       shift and go to state 90

state 311

    (95) SenElseIF -> ELSE IF FALSE LLLAVE . codigo RLLAVE
    (7) codigo -> . rule
    (8) codigo -> . more_rules
    (10) rule -> . impresion COLON
    (11) rule -> . impresion
    (12) rule -> . scan_func COLON
    (13) rule -> . scan_func
    (14) rule -> . expression COLON
    (15) rule -> . expression
    (16) rule -> . cicloFor
    (17) rule -> . comparison
    (18) rule -> . logic_operation
    (19) rule -> . decVar COLON
    (20) rule -> . decVar
    (21) rule -> . decConst COLON
    (22) rule -> . decConst
    (23) rule -> . var_asignation
    (24) rule -> . var_asignation COLON
    (25) rule -> . funciones
    (26) rule -> . funciones COLON
    (27) rule -> . SenIF
    (28) rule -> . SenElseIF
    (29) rule -> . SenElse
    (30) rule -> . SenStruct
    (31) rule -> . cStruct
    (32) rule -> . switch_statement
    (33) rule -> . array_declaration COLON
    (34) rule -> . array_declaration
    (35) rule -> . array_var COLON
    (36) rule -> . array_var
    (37) rule -> . array_assignment COLON
    (38) rule -> . array_assignment
    (39) rule -> . slice_declaration COLON
    (40) rule -> . slice_declaration
    (41) rule -> . slice_var COLON
    (42) rule -> . slice_var
    (43) rule -> . slice_assignment COLON
    (44) rule -> . slice_assignment
    (45) rule -> . map_declaration COLON
    (46) rule -> . map_declaration
    (47) rule -> . map_assignment COLON
    (48) rule -> . map_assignment
    (49) rule -> . func_declaration
    (50) rule -> . main_func
    (9) more_rules -> . rule codigo
    (173) impresion -> . PRINT LPAREN something RPAREN
    (174) impresion -> . PRINT LPAREN error RPAREN
    (201) scan_func -> . SCAN LPAREN POINTER RPAREN
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (166) cicloFor -> . FOR comparison LLLAVE codigo RLLAVE
    (167) cicloFor -> . FOR logic_operation LLLAVE codigo RLLAVE
    (168) cicloFor -> . FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (112) decVar -> . static
    (113) decVar -> . dynamic
    (109) decConst -> . CONST ID data_type_and_value
    (110) decConst -> . CONST ID EQUAL ID
    (111) decConst -> . CONST ID EQUAL data_structure
    (77) var_asignation -> . ID EQUAL any
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (88) SenIF -> . IF comparison LLLAVE codigo RLLAVE
    (89) SenIF -> . IF logic_operation LLLAVE codigo RLLAVE
    (90) SenIF -> . IF TRUE LLLAVE codigo RLLAVE
    (91) SenIF -> . IF FALSE LLLAVE codigo RLLAVE
    (92) SenElseIF -> . ELSE IF comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> . ELSE IF logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> . ELSE IF TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> . ELSE IF FALSE LLLAVE codigo RLLAVE
    (96) SenElse -> . ELSE LLLAVE codigo RLLAVE
    (97) SenStruct -> . TYPE ID STRUCT LLLAVE declaration RLLAVE
    (101) cStruct -> . ID DEQUAL ID LLLAVE asignaciones RLLAVE
    (233) switch_statement -> . SWITCH ID LLLAVE cases RLLAVE
    (238) array_declaration -> . VAR ID LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> . VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (243) array_var -> . ID LCORCHE index RCORCHE
    (247) array_assignment -> . array_var EQUAL something
    (147) slice_declaration -> . VAR ID LCORCHE RCORCHE data_types
    (148) slice_declaration -> . VAR ID EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> . VAR ID EQUAL funM
    (150) slice_declaration -> . ID DEQUAL funM
    (151) slice_declaration -> . ID DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (161) slice_assignment -> . slice_var EQUAL something_s
    (248) map_declaration -> . VAR ID LCORCHE data_types RCORCHE data_types
    (253) map_assignment -> . map_var EQUAL something
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (114) static -> . single
    (115) static -> . multiple
    (124) dynamic -> . ID DEQUAL algo
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (249) map_var -> . ID LCORCHE key RCORCHE
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (120) single -> . VAR ID data_types
    (121) single -> . VAR ID data_types EQUAL funciones
    (122) single -> . VAR ID data_types EQUAL data_structure
    (123) single -> . VAR ID data_type_and_value
    (116) multiple -> . list_var data_types
    (117) list_var -> . VAR ID COMA more

    PRINT           shift and go to state 62
    SCAN            shift and go to state 63
    FOR             shift and go to state 65
    CONST           shift and go to state 71
    ID              shift and go to state 72
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    IF              shift and go to state 79
    ELSE            shift and go to state 80
    TYPE            shift and go to state 81
    SWITCH          shift and go to state 82
    VAR             shift and go to state 83
    FUNC            shift and go to state 32
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    NOT             shift and go to state 87

    codigo                         shift and go to state 391
    rule                           shift and go to state 34
    more_rules                     shift and go to state 35
    impresion                      shift and go to state 36
    scan_func                      shift and go to state 37
    expression                     shift and go to state 38
    cicloFor                       shift and go to state 39
    comparison                     shift and go to state 40
    logic_operation                shift and go to state 41
    decVar                         shift and go to state 42
    decConst                       shift and go to state 43
    var_asignation                 shift and go to state 44
    funciones                      shift and go to state 45
    SenIF                          shift and go to state 46
    SenElseIF                      shift and go to state 47
    SenElse                        shift and go to state 48
    SenStruct                      shift and go to state 49
    cStruct                        shift and go to state 50
    switch_statement               shift and go to state 51
    array_declaration              shift and go to state 52
    array_var                      shift and go to state 53
    array_assignment               shift and go to state 54
    slice_declaration              shift and go to state 55
    slice_var                      shift and go to state 56
    slice_assignment               shift and go to state 57
    map_declaration                shift and go to state 58
    map_assignment                 shift and go to state 59
    func_declaration               shift and go to state 60
    main_func                      shift and go to state 61
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    static                         shift and go to state 69
    dynamic                        shift and go to state 70
    data_structure                 shift and go to state 73
    call_func                      shift and go to state 78
    map_var                        shift and go to state 84
    single                         shift and go to state 88
    multiple                       shift and go to state 89
    list_var                       shift and go to state 90

state 312

    (96) SenElse -> ELSE LLLAVE codigo RLLAVE .

    PRINT           reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    SCAN            reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    FOR             reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    CONST           reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    ID              reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    APPEND          reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    LEN             reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    COPY            reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    DELETE          reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    IF              reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    ELSE            reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    TYPE            reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    SWITCH          reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    VAR             reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    FUNC            reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    INTEGER         reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    FLOAT           reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    NOT             reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    RLLAVE          reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    RETURN          reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    STRING          reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    TRUE            reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    FALSE           reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    INT32           reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    INT64           reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    FLOAT32         reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    FLOAT64         reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    BYTE            reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    WFLOAT          reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    WSTRING         reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    WINT            reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    BOOL            reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    DEFAULT         reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)
    CASE            reduce using rule 96 (SenElse -> ELSE LLLAVE codigo RLLAVE .)


state 313

    (97) SenStruct -> TYPE ID STRUCT LLLAVE . declaration RLLAVE
    (98) declaration -> . variable data_types
    (99) declaration -> . declaration variable data_types
    (100) variable -> . ID

    ID              shift and go to state 392

    declaration                    shift and go to state 393
    variable                       shift and go to state 394

state 314

    (233) switch_statement -> SWITCH ID LLLAVE cases . RLLAVE

    RLLAVE          shift and go to state 395


state 315

    (234) cases -> CASE . values POINTS codigo
    (235) cases -> CASE . values POINTS codigo more
    (51) values -> . STRING
    (52) values -> . INTEGER
    (53) values -> . FLOAT
    (54) values -> . TRUE
    (55) values -> . FALSE

    STRING          shift and go to state 174
    INTEGER         shift and go to state 378
    FLOAT           shift and go to state 379
    TRUE            shift and go to state 177
    FALSE           shift and go to state 178

    values                         shift and go to state 396

state 316

    (241) capacity -> ID .
    (179) something_ex -> ID .
    (243) array_var -> ID . LCORCHE index RCORCHE
    (249) map_var -> ID . LCORCHE key RCORCHE
    (157) slice_var -> ID . LCORCHE index_s RCORCHE
    (202) call_func -> ID . LPAREN list_params RPAREN
    (203) call_func -> ID . LPAREN RPAREN

  ! reduce/reduce conflict for RCORCHE resolved using rule 179 (something_ex -> ID .)
    GREATER         reduce using rule 179 (something_ex -> ID .)
    SMALLER         reduce using rule 179 (something_ex -> ID .)
    GREATER_OR_EQUAL reduce using rule 179 (something_ex -> ID .)
    SMALLER_OR_EQUAL reduce using rule 179 (something_ex -> ID .)
    EQUAL_COMPARE   reduce using rule 179 (something_ex -> ID .)
    NOT_EQUAL       reduce using rule 179 (something_ex -> ID .)
    PLUS            reduce using rule 179 (something_ex -> ID .)
    TIMES           reduce using rule 179 (something_ex -> ID .)
    DIVIDE          reduce using rule 179 (something_ex -> ID .)
    MINUS           reduce using rule 179 (something_ex -> ID .)
    MOD             reduce using rule 179 (something_ex -> ID .)
    RCORCHE         reduce using rule 179 (something_ex -> ID .)
    LCORCHE         shift and go to state 196
    LPAREN          shift and go to state 146

  ! RCORCHE         [ reduce using rule 241 (capacity -> ID .) ]


state 317

    (238) array_declaration -> VAR ID LCORCHE capacity . RCORCHE data_types

    RCORCHE         shift and go to state 397


state 318

    (147) slice_declaration -> VAR ID LCORCHE RCORCHE . data_types
    (56) data_types -> . INT32
    (57) data_types -> . INT64
    (58) data_types -> . FLOAT32
    (59) data_types -> . FLOAT64
    (60) data_types -> . BYTE
    (61) data_types -> . WFLOAT
    (62) data_types -> . WSTRING
    (63) data_types -> . WINT
    (64) data_types -> . BOOL

    INT32           shift and go to state 22
    INT64           shift and go to state 23
    FLOAT32         shift and go to state 24
    FLOAT64         shift and go to state 25
    BYTE            shift and go to state 26
    WFLOAT          shift and go to state 27
    WSTRING         shift and go to state 28
    WINT            shift and go to state 29
    BOOL            shift and go to state 30

    data_types                     shift and go to state 398

state 319

    (248) map_declaration -> VAR ID LCORCHE data_types . RCORCHE data_types

    RCORCHE         shift and go to state 399


state 320

    (240) capacity -> INTEGER .
    (180) something_ex -> INTEGER .

  ! reduce/reduce conflict for RCORCHE resolved using rule 180 (something_ex -> INTEGER .)
    GREATER         reduce using rule 180 (something_ex -> INTEGER .)
    SMALLER         reduce using rule 180 (something_ex -> INTEGER .)
    GREATER_OR_EQUAL reduce using rule 180 (something_ex -> INTEGER .)
    SMALLER_OR_EQUAL reduce using rule 180 (something_ex -> INTEGER .)
    EQUAL_COMPARE   reduce using rule 180 (something_ex -> INTEGER .)
    NOT_EQUAL       reduce using rule 180 (something_ex -> INTEGER .)
    PLUS            reduce using rule 180 (something_ex -> INTEGER .)
    TIMES           reduce using rule 180 (something_ex -> INTEGER .)
    DIVIDE          reduce using rule 180 (something_ex -> INTEGER .)
    MINUS           reduce using rule 180 (something_ex -> INTEGER .)
    MOD             reduce using rule 180 (something_ex -> INTEGER .)
    RCORCHE         reduce using rule 180 (something_ex -> INTEGER .)

  ! RCORCHE         [ reduce using rule 240 (capacity -> INTEGER .) ]


state 321

    (242) capacity -> expression .

    RCORCHE         reduce using rule 242 (capacity -> expression .)


state 322

    (121) single -> VAR ID data_types EQUAL . funciones
    (122) single -> VAR ID data_types EQUAL . data_structure
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE

    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    ID              shift and go to state 400

    funciones                      shift and go to state 401
    data_structure                 shift and go to state 402
    call_func                      shift and go to state 78
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136

state 323

    (239) array_declaration -> VAR ID EQUAL LCORCHE . capacity RCORCHE data_types arr_content
    (148) slice_declaration -> VAR ID EQUAL LCORCHE . RCORCHE data_types arr_content
    (240) capacity -> . INTEGER
    (241) capacity -> . ID
    (242) capacity -> . expression
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    RCORCHE         shift and go to state 404
    INTEGER         shift and go to state 320
    ID              shift and go to state 316
    FLOAT           shift and go to state 86
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    capacity                       shift and go to state 403
    expression                     shift and go to state 321
    something_ex                   shift and go to state 64
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 324

    (149) slice_declaration -> VAR ID EQUAL funM .

    COLON           reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    PRINT           reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    SCAN            reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    FOR             reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    CONST           reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    ID              reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    APPEND          reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    LEN             reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    COPY            reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    DELETE          reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    IF              reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    ELSE            reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    TYPE            reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    SWITCH          reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    VAR             reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    FUNC            reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    INTEGER         reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    FLOAT           reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    NOT             reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    RLLAVE          reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    RETURN          reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    STRING          reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    TRUE            reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    FALSE           reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    INT32           reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    INT64           reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    FLOAT32         reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    FLOAT64         reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    BYTE            reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    WFLOAT          reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    WSTRING         reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    WINT            reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    BOOL            reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    DEFAULT         reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)
    CASE            reduce using rule 149 (slice_declaration -> VAR ID EQUAL funM .)


state 325

    (118) more -> ID .
    (119) more -> ID . COMA more

    INT32           reduce using rule 118 (more -> ID .)
    INT64           reduce using rule 118 (more -> ID .)
    FLOAT32         reduce using rule 118 (more -> ID .)
    FLOAT64         reduce using rule 118 (more -> ID .)
    BYTE            reduce using rule 118 (more -> ID .)
    WFLOAT          reduce using rule 118 (more -> ID .)
    WSTRING         reduce using rule 118 (more -> ID .)
    WINT            reduce using rule 118 (more -> ID .)
    BOOL            reduce using rule 118 (more -> ID .)
    RLLAVE          reduce using rule 118 (more -> ID .)
    COMA            shift and go to state 405


state 326

    (117) list_var -> VAR ID COMA more .

    INT32           reduce using rule 117 (list_var -> VAR ID COMA more .)
    INT64           reduce using rule 117 (list_var -> VAR ID COMA more .)
    FLOAT32         reduce using rule 117 (list_var -> VAR ID COMA more .)
    FLOAT64         reduce using rule 117 (list_var -> VAR ID COMA more .)
    BYTE            reduce using rule 117 (list_var -> VAR ID COMA more .)
    WFLOAT          reduce using rule 117 (list_var -> VAR ID COMA more .)
    WSTRING         reduce using rule 117 (list_var -> VAR ID COMA more .)
    WINT            reduce using rule 117 (list_var -> VAR ID COMA more .)
    BOOL            reduce using rule 117 (list_var -> VAR ID COMA more .)


state 327

    (236) more -> cases .

    INT32           reduce using rule 236 (more -> cases .)
    INT64           reduce using rule 236 (more -> cases .)
    FLOAT32         reduce using rule 236 (more -> cases .)
    FLOAT64         reduce using rule 236 (more -> cases .)
    BYTE            reduce using rule 236 (more -> cases .)
    WFLOAT          reduce using rule 236 (more -> cases .)
    WSTRING         reduce using rule 236 (more -> cases .)
    WINT            reduce using rule 236 (more -> cases .)
    BOOL            reduce using rule 236 (more -> cases .)
    RLLAVE          reduce using rule 236 (more -> cases .)


state 328

    (237) more -> DEFAULT . POINTS codigo

    POINTS          shift and go to state 406


state 329

    (254) func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN . retorno RLLAVE
    (261) retorno -> . ID
    (262) retorno -> . values
    (263) retorno -> . operations
    (264) retorno -> . data_structure
    (51) values -> . STRING
    (52) values -> . INTEGER
    (53) values -> . FLOAT
    (54) values -> . TRUE
    (55) values -> . FALSE
    (65) operations -> . expression
    (66) operations -> . comparison
    (67) operations -> . logic_operation
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    ID              shift and go to state 407
    STRING          shift and go to state 174
    INTEGER         shift and go to state 175
    FLOAT           shift and go to state 176
    TRUE            shift and go to state 177
    FALSE           shift and go to state 178
    NOT             shift and go to state 87
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    retorno                        shift and go to state 408
    values                         shift and go to state 338
    operations                     shift and go to state 339
    data_structure                 shift and go to state 340
    expression                     shift and go to state 179
    comparison                     shift and go to state 180
    logic_operation                shift and go to state 181
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    funciones                      shift and go to state 133
    call_func                      shift and go to state 78

state 330

    (261) retorno -> ID .
    (77) var_asignation -> ID . EQUAL any
    (101) cStruct -> ID . DEQUAL ID LLLAVE asignaciones RLLAVE
    (243) array_var -> ID . LCORCHE index RCORCHE
    (150) slice_declaration -> ID . DEQUAL funM
    (151) slice_declaration -> ID . DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> ID . LCORCHE index_s RCORCHE
    (179) something_ex -> ID .
    (139) value -> ID .
    (195) logic_value -> ID .
    (124) dynamic -> ID . DEQUAL algo
    (202) call_func -> ID . LPAREN list_params RPAREN
    (203) call_func -> ID . LPAREN RPAREN
    (249) map_var -> ID . LCORCHE key RCORCHE

  ! reduce/reduce conflict for COLON resolved using rule 179 (something_ex -> ID .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 179 (something_ex -> ID .)
  ! reduce/reduce conflict for GREATER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for GREATER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for EQUAL_COMPARE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MOD resolved using rule 139 (value -> ID .)
    EQUAL           shift and go to state 143
    DEQUAL          shift and go to state 144
    LCORCHE         shift and go to state 145
    COLON           reduce using rule 179 (something_ex -> ID .)
    PRINT           reduce using rule 179 (something_ex -> ID .)
    SCAN            reduce using rule 179 (something_ex -> ID .)
    FOR             reduce using rule 179 (something_ex -> ID .)
    CONST           reduce using rule 179 (something_ex -> ID .)
    ID              reduce using rule 179 (something_ex -> ID .)
    APPEND          reduce using rule 179 (something_ex -> ID .)
    LEN             reduce using rule 179 (something_ex -> ID .)
    COPY            reduce using rule 179 (something_ex -> ID .)
    DELETE          reduce using rule 179 (something_ex -> ID .)
    IF              reduce using rule 179 (something_ex -> ID .)
    ELSE            reduce using rule 179 (something_ex -> ID .)
    TYPE            reduce using rule 179 (something_ex -> ID .)
    SWITCH          reduce using rule 179 (something_ex -> ID .)
    VAR             reduce using rule 179 (something_ex -> ID .)
    FUNC            reduce using rule 179 (something_ex -> ID .)
    INTEGER         reduce using rule 179 (something_ex -> ID .)
    FLOAT           reduce using rule 179 (something_ex -> ID .)
    NOT             reduce using rule 179 (something_ex -> ID .)
    STRING          reduce using rule 179 (something_ex -> ID .)
    TRUE            reduce using rule 179 (something_ex -> ID .)
    FALSE           reduce using rule 179 (something_ex -> ID .)
    RLLAVE          reduce using rule 179 (something_ex -> ID .)
    GREATER         reduce using rule 139 (value -> ID .)
    SMALLER         reduce using rule 139 (value -> ID .)
    GREATER_OR_EQUAL reduce using rule 139 (value -> ID .)
    SMALLER_OR_EQUAL reduce using rule 139 (value -> ID .)
    EQUAL_COMPARE   reduce using rule 139 (value -> ID .)
    NOT_EQUAL       reduce using rule 139 (value -> ID .)
    PLUS            reduce using rule 139 (value -> ID .)
    TIMES           reduce using rule 139 (value -> ID .)
    DIVIDE          reduce using rule 139 (value -> ID .)
    MINUS           reduce using rule 139 (value -> ID .)
    MOD             reduce using rule 139 (value -> ID .)
    AND             reduce using rule 195 (logic_value -> ID .)
    OR              reduce using rule 195 (logic_value -> ID .)
    LPAREN          shift and go to state 146

  ! COLON           [ reduce using rule 261 (retorno -> ID .) ]
  ! RLLAVE          [ reduce using rule 261 (retorno -> ID .) ]
  ! GREATER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! GREATER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! EQUAL_COMPARE   [ reduce using rule 179 (something_ex -> ID .) ]
  ! NOT_EQUAL       [ reduce using rule 179 (something_ex -> ID .) ]
  ! PLUS            [ reduce using rule 179 (something_ex -> ID .) ]
  ! TIMES           [ reduce using rule 179 (something_ex -> ID .) ]
  ! DIVIDE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! MINUS           [ reduce using rule 179 (something_ex -> ID .) ]
  ! MOD             [ reduce using rule 179 (something_ex -> ID .) ]


state 331

    (255) func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body . RLLAVE

    RLLAVE          shift and go to state 409


state 332

    (257) body -> codigo . return_value
    (259) return_value -> . retorno COLON
    (260) return_value -> . retorno
    (261) retorno -> . ID
    (262) retorno -> . values
    (263) retorno -> . operations
    (264) retorno -> . data_structure
    (51) values -> . STRING
    (52) values -> . INTEGER
    (53) values -> . FLOAT
    (54) values -> . TRUE
    (55) values -> . FALSE
    (65) operations -> . expression
    (66) operations -> . comparison
    (67) operations -> . logic_operation
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    ID              shift and go to state 407
    STRING          shift and go to state 174
    INTEGER         shift and go to state 175
    FLOAT           shift and go to state 176
    TRUE            shift and go to state 177
    FALSE           shift and go to state 178
    NOT             shift and go to state 87
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    return_value                   shift and go to state 410
    retorno                        shift and go to state 334
    values                         shift and go to state 338
    operations                     shift and go to state 339
    data_structure                 shift and go to state 340
    expression                     shift and go to state 179
    comparison                     shift and go to state 180
    logic_operation                shift and go to state 181
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    funciones                      shift and go to state 133
    call_func                      shift and go to state 78

state 333

    (258) body -> return_value .

    RLLAVE          reduce using rule 258 (body -> return_value .)


state 334

    (259) return_value -> retorno . COLON
    (260) return_value -> retorno .

    COLON           shift and go to state 411
    RLLAVE          reduce using rule 260 (return_value -> retorno .)


state 335

    (14) rule -> expression . COLON
    (15) rule -> expression .
    (65) operations -> expression .
    (140) value -> expression .

  ! shift/reduce conflict for COLON resolved as shift
    COLON           shift and go to state 98
    PRINT           reduce using rule 15 (rule -> expression .)
    SCAN            reduce using rule 15 (rule -> expression .)
    FOR             reduce using rule 15 (rule -> expression .)
    CONST           reduce using rule 15 (rule -> expression .)
    ID              reduce using rule 15 (rule -> expression .)
    APPEND          reduce using rule 15 (rule -> expression .)
    LEN             reduce using rule 15 (rule -> expression .)
    COPY            reduce using rule 15 (rule -> expression .)
    DELETE          reduce using rule 15 (rule -> expression .)
    IF              reduce using rule 15 (rule -> expression .)
    ELSE            reduce using rule 15 (rule -> expression .)
    TYPE            reduce using rule 15 (rule -> expression .)
    SWITCH          reduce using rule 15 (rule -> expression .)
    VAR             reduce using rule 15 (rule -> expression .)
    FUNC            reduce using rule 15 (rule -> expression .)
    INTEGER         reduce using rule 15 (rule -> expression .)
    FLOAT           reduce using rule 15 (rule -> expression .)
    NOT             reduce using rule 15 (rule -> expression .)
    STRING          reduce using rule 15 (rule -> expression .)
    TRUE            reduce using rule 15 (rule -> expression .)
    FALSE           reduce using rule 15 (rule -> expression .)
    RLLAVE          reduce using rule 65 (operations -> expression .)
    GREATER         reduce using rule 140 (value -> expression .)
    SMALLER         reduce using rule 140 (value -> expression .)
    GREATER_OR_EQUAL reduce using rule 140 (value -> expression .)
    SMALLER_OR_EQUAL reduce using rule 140 (value -> expression .)
    EQUAL_COMPARE   reduce using rule 140 (value -> expression .)
    NOT_EQUAL       reduce using rule 140 (value -> expression .)
    PLUS            reduce using rule 140 (value -> expression .)
    TIMES           reduce using rule 140 (value -> expression .)
    DIVIDE          reduce using rule 140 (value -> expression .)
    MINUS           reduce using rule 140 (value -> expression .)
    MOD             reduce using rule 140 (value -> expression .)

  ! COLON           [ reduce using rule 65 (operations -> expression .) ]


state 336

    (17) rule -> comparison .
    (66) operations -> comparison .
    (194) logic_value -> comparison .

    PRINT           reduce using rule 17 (rule -> comparison .)
    SCAN            reduce using rule 17 (rule -> comparison .)
    FOR             reduce using rule 17 (rule -> comparison .)
    CONST           reduce using rule 17 (rule -> comparison .)
    ID              reduce using rule 17 (rule -> comparison .)
    APPEND          reduce using rule 17 (rule -> comparison .)
    LEN             reduce using rule 17 (rule -> comparison .)
    COPY            reduce using rule 17 (rule -> comparison .)
    DELETE          reduce using rule 17 (rule -> comparison .)
    IF              reduce using rule 17 (rule -> comparison .)
    ELSE            reduce using rule 17 (rule -> comparison .)
    TYPE            reduce using rule 17 (rule -> comparison .)
    SWITCH          reduce using rule 17 (rule -> comparison .)
    VAR             reduce using rule 17 (rule -> comparison .)
    FUNC            reduce using rule 17 (rule -> comparison .)
    INTEGER         reduce using rule 17 (rule -> comparison .)
    FLOAT           reduce using rule 17 (rule -> comparison .)
    NOT             reduce using rule 17 (rule -> comparison .)
    STRING          reduce using rule 17 (rule -> comparison .)
    TRUE            reduce using rule 17 (rule -> comparison .)
    FALSE           reduce using rule 17 (rule -> comparison .)
    COLON           reduce using rule 66 (operations -> comparison .)
    RLLAVE          reduce using rule 66 (operations -> comparison .)
    AND             reduce using rule 194 (logic_value -> comparison .)
    OR              reduce using rule 194 (logic_value -> comparison .)


state 337

    (18) rule -> logic_operation .
    (67) operations -> logic_operation .

    PRINT           reduce using rule 18 (rule -> logic_operation .)
    SCAN            reduce using rule 18 (rule -> logic_operation .)
    FOR             reduce using rule 18 (rule -> logic_operation .)
    CONST           reduce using rule 18 (rule -> logic_operation .)
    ID              reduce using rule 18 (rule -> logic_operation .)
    APPEND          reduce using rule 18 (rule -> logic_operation .)
    LEN             reduce using rule 18 (rule -> logic_operation .)
    COPY            reduce using rule 18 (rule -> logic_operation .)
    DELETE          reduce using rule 18 (rule -> logic_operation .)
    IF              reduce using rule 18 (rule -> logic_operation .)
    ELSE            reduce using rule 18 (rule -> logic_operation .)
    TYPE            reduce using rule 18 (rule -> logic_operation .)
    SWITCH          reduce using rule 18 (rule -> logic_operation .)
    VAR             reduce using rule 18 (rule -> logic_operation .)
    FUNC            reduce using rule 18 (rule -> logic_operation .)
    INTEGER         reduce using rule 18 (rule -> logic_operation .)
    FLOAT           reduce using rule 18 (rule -> logic_operation .)
    NOT             reduce using rule 18 (rule -> logic_operation .)
    STRING          reduce using rule 18 (rule -> logic_operation .)
    TRUE            reduce using rule 18 (rule -> logic_operation .)
    FALSE           reduce using rule 18 (rule -> logic_operation .)
    COLON           reduce using rule 67 (operations -> logic_operation .)
    RLLAVE          reduce using rule 67 (operations -> logic_operation .)


state 338

    (262) retorno -> values .

    COLON           reduce using rule 262 (retorno -> values .)
    RLLAVE          reduce using rule 262 (retorno -> values .)


state 339

    (263) retorno -> operations .

    COLON           reduce using rule 263 (retorno -> operations .)
    RLLAVE          reduce using rule 263 (retorno -> operations .)


state 340

    (264) retorno -> data_structure .
    (182) something_ex -> data_structure .

  ! reduce/reduce conflict for COLON resolved using rule 182 (something_ex -> data_structure .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 182 (something_ex -> data_structure .)
    GREATER         reduce using rule 182 (something_ex -> data_structure .)
    SMALLER         reduce using rule 182 (something_ex -> data_structure .)
    GREATER_OR_EQUAL reduce using rule 182 (something_ex -> data_structure .)
    SMALLER_OR_EQUAL reduce using rule 182 (something_ex -> data_structure .)
    EQUAL_COMPARE   reduce using rule 182 (something_ex -> data_structure .)
    NOT_EQUAL       reduce using rule 182 (something_ex -> data_structure .)
    PLUS            reduce using rule 182 (something_ex -> data_structure .)
    TIMES           reduce using rule 182 (something_ex -> data_structure .)
    DIVIDE          reduce using rule 182 (something_ex -> data_structure .)
    MINUS           reduce using rule 182 (something_ex -> data_structure .)
    MOD             reduce using rule 182 (something_ex -> data_structure .)
    COLON           reduce using rule 182 (something_ex -> data_structure .)
    PRINT           reduce using rule 182 (something_ex -> data_structure .)
    SCAN            reduce using rule 182 (something_ex -> data_structure .)
    FOR             reduce using rule 182 (something_ex -> data_structure .)
    CONST           reduce using rule 182 (something_ex -> data_structure .)
    ID              reduce using rule 182 (something_ex -> data_structure .)
    APPEND          reduce using rule 182 (something_ex -> data_structure .)
    LEN             reduce using rule 182 (something_ex -> data_structure .)
    COPY            reduce using rule 182 (something_ex -> data_structure .)
    DELETE          reduce using rule 182 (something_ex -> data_structure .)
    IF              reduce using rule 182 (something_ex -> data_structure .)
    ELSE            reduce using rule 182 (something_ex -> data_structure .)
    TYPE            reduce using rule 182 (something_ex -> data_structure .)
    SWITCH          reduce using rule 182 (something_ex -> data_structure .)
    VAR             reduce using rule 182 (something_ex -> data_structure .)
    FUNC            reduce using rule 182 (something_ex -> data_structure .)
    INTEGER         reduce using rule 182 (something_ex -> data_structure .)
    FLOAT           reduce using rule 182 (something_ex -> data_structure .)
    NOT             reduce using rule 182 (something_ex -> data_structure .)
    STRING          reduce using rule 182 (something_ex -> data_structure .)
    TRUE            reduce using rule 182 (something_ex -> data_structure .)
    FALSE           reduce using rule 182 (something_ex -> data_structure .)
    RLLAVE          reduce using rule 182 (something_ex -> data_structure .)

  ! COLON           [ reduce using rule 264 (retorno -> data_structure .) ]
  ! RLLAVE          [ reduce using rule 264 (retorno -> data_structure .) ]


state 341

    (166) cicloFor -> FOR comparison LLLAVE codigo RLLAVE .

    PRINT           reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    SCAN            reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    FOR             reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    CONST           reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    ID              reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    APPEND          reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    LEN             reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    COPY            reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    DELETE          reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    IF              reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    ELSE            reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    TYPE            reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    SWITCH          reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    VAR             reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    FUNC            reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    INTEGER         reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    FLOAT           reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    NOT             reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    RLLAVE          reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    RETURN          reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    STRING          reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    TRUE            reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    FALSE           reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    INT32           reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    INT64           reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    FLOAT32         reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    FLOAT64         reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    BYTE            reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    WFLOAT          reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    WSTRING         reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    WINT            reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    BOOL            reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    DEFAULT         reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)
    CASE            reduce using rule 166 (cicloFor -> FOR comparison LLLAVE codigo RLLAVE .)


state 342

    (167) cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .

    PRINT           reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    SCAN            reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    FOR             reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    CONST           reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    ID              reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    APPEND          reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    LEN             reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    COPY            reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    DELETE          reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    IF              reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    ELSE            reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    TYPE            reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    SWITCH          reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    VAR             reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    FUNC            reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    INTEGER         reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    FLOAT           reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    NOT             reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    RLLAVE          reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    RETURN          reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    STRING          reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    TRUE            reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    FALSE           reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    INT32           reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    INT64           reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    FLOAT32         reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    FLOAT64         reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    BYTE            reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    WFLOAT          reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    WSTRING         reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    WINT            reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    BOOL            reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    DEFAULT         reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)
    CASE            reduce using rule 167 (cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE .)


state 343

    (168) cicloFor -> FOR decVarOne COLON comparison COLON . incre LLLAVE codigo RLLAVE
    (169) incre -> . ID INCREASE
    (170) incre -> . ID DECREASE

    ID              shift and go to state 413

    incre                          shift and go to state 412

state 344

    (207) data_type_and_value -> WSTRING EQUAL str_value .

    COLON           reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    PRINT           reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    SCAN            reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    FOR             reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    CONST           reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    ID              reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    APPEND          reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    LEN             reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    COPY            reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    DELETE          reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    IF              reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    ELSE            reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    TYPE            reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    SWITCH          reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    VAR             reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    FUNC            reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    INTEGER         reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    FLOAT           reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    NOT             reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    RLLAVE          reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    RETURN          reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    STRING          reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    TRUE            reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    FALSE           reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    INT32           reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    INT64           reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    FLOAT32         reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    FLOAT64         reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    BYTE            reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    WFLOAT          reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    WSTRING         reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    WINT            reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    BOOL            reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    DEFAULT         reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)
    CASE            reduce using rule 207 (data_type_and_value -> WSTRING EQUAL str_value .)


state 345

    (225) data_type_and_value -> WSTRING EQUAL error .

    COLON           reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    PRINT           reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    SCAN            reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    FOR             reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    CONST           reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    ID              reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    APPEND          reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    LEN             reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    COPY            reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    DELETE          reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    IF              reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    ELSE            reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    TYPE            reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    SWITCH          reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    VAR             reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    FUNC            reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    INTEGER         reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    FLOAT           reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    NOT             reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    RLLAVE          reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    RETURN          reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    STRING          reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    TRUE            reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    FALSE           reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    INT32           reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    INT64           reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    FLOAT32         reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    FLOAT64         reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    BYTE            reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    WFLOAT          reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    WSTRING         reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    WINT            reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    BOOL            reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    DEFAULT         reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)
    CASE            reduce using rule 225 (data_type_and_value -> WSTRING EQUAL error .)


state 346

    (215) str_value -> STRING .

    COLON           reduce using rule 215 (str_value -> STRING .)
    PRINT           reduce using rule 215 (str_value -> STRING .)
    SCAN            reduce using rule 215 (str_value -> STRING .)
    FOR             reduce using rule 215 (str_value -> STRING .)
    CONST           reduce using rule 215 (str_value -> STRING .)
    ID              reduce using rule 215 (str_value -> STRING .)
    APPEND          reduce using rule 215 (str_value -> STRING .)
    LEN             reduce using rule 215 (str_value -> STRING .)
    COPY            reduce using rule 215 (str_value -> STRING .)
    DELETE          reduce using rule 215 (str_value -> STRING .)
    IF              reduce using rule 215 (str_value -> STRING .)
    ELSE            reduce using rule 215 (str_value -> STRING .)
    TYPE            reduce using rule 215 (str_value -> STRING .)
    SWITCH          reduce using rule 215 (str_value -> STRING .)
    VAR             reduce using rule 215 (str_value -> STRING .)
    FUNC            reduce using rule 215 (str_value -> STRING .)
    INTEGER         reduce using rule 215 (str_value -> STRING .)
    FLOAT           reduce using rule 215 (str_value -> STRING .)
    NOT             reduce using rule 215 (str_value -> STRING .)
    RLLAVE          reduce using rule 215 (str_value -> STRING .)
    RETURN          reduce using rule 215 (str_value -> STRING .)
    STRING          reduce using rule 215 (str_value -> STRING .)
    TRUE            reduce using rule 215 (str_value -> STRING .)
    FALSE           reduce using rule 215 (str_value -> STRING .)
    INT32           reduce using rule 215 (str_value -> STRING .)
    INT64           reduce using rule 215 (str_value -> STRING .)
    FLOAT32         reduce using rule 215 (str_value -> STRING .)
    FLOAT64         reduce using rule 215 (str_value -> STRING .)
    BYTE            reduce using rule 215 (str_value -> STRING .)
    WFLOAT          reduce using rule 215 (str_value -> STRING .)
    WSTRING         reduce using rule 215 (str_value -> STRING .)
    WINT            reduce using rule 215 (str_value -> STRING .)
    BOOL            reduce using rule 215 (str_value -> STRING .)
    DEFAULT         reduce using rule 215 (str_value -> STRING .)
    CASE            reduce using rule 215 (str_value -> STRING .)


state 347

    (216) str_value -> ID .

    COLON           reduce using rule 216 (str_value -> ID .)
    PRINT           reduce using rule 216 (str_value -> ID .)
    SCAN            reduce using rule 216 (str_value -> ID .)
    FOR             reduce using rule 216 (str_value -> ID .)
    CONST           reduce using rule 216 (str_value -> ID .)
    ID              reduce using rule 216 (str_value -> ID .)
    APPEND          reduce using rule 216 (str_value -> ID .)
    LEN             reduce using rule 216 (str_value -> ID .)
    COPY            reduce using rule 216 (str_value -> ID .)
    DELETE          reduce using rule 216 (str_value -> ID .)
    IF              reduce using rule 216 (str_value -> ID .)
    ELSE            reduce using rule 216 (str_value -> ID .)
    TYPE            reduce using rule 216 (str_value -> ID .)
    SWITCH          reduce using rule 216 (str_value -> ID .)
    VAR             reduce using rule 216 (str_value -> ID .)
    FUNC            reduce using rule 216 (str_value -> ID .)
    INTEGER         reduce using rule 216 (str_value -> ID .)
    FLOAT           reduce using rule 216 (str_value -> ID .)
    NOT             reduce using rule 216 (str_value -> ID .)
    RLLAVE          reduce using rule 216 (str_value -> ID .)
    RETURN          reduce using rule 216 (str_value -> ID .)
    STRING          reduce using rule 216 (str_value -> ID .)
    TRUE            reduce using rule 216 (str_value -> ID .)
    FALSE           reduce using rule 216 (str_value -> ID .)
    INT32           reduce using rule 216 (str_value -> ID .)
    INT64           reduce using rule 216 (str_value -> ID .)
    FLOAT32         reduce using rule 216 (str_value -> ID .)
    FLOAT64         reduce using rule 216 (str_value -> ID .)
    BYTE            reduce using rule 216 (str_value -> ID .)
    WFLOAT          reduce using rule 216 (str_value -> ID .)
    WSTRING         reduce using rule 216 (str_value -> ID .)
    WINT            reduce using rule 216 (str_value -> ID .)
    BOOL            reduce using rule 216 (str_value -> ID .)
    DEFAULT         reduce using rule 216 (str_value -> ID .)
    CASE            reduce using rule 216 (str_value -> ID .)


state 348

    (208) data_type_and_value -> WINT EQUAL int_value .

    COLON           reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    PRINT           reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    SCAN            reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    FOR             reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    CONST           reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    ID              reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    APPEND          reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    LEN             reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    COPY            reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    DELETE          reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    IF              reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    ELSE            reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    TYPE            reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    SWITCH          reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    VAR             reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    FUNC            reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    INTEGER         reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    FLOAT           reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    NOT             reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    RLLAVE          reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    RETURN          reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    STRING          reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    TRUE            reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    FALSE           reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    INT32           reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    INT64           reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    FLOAT32         reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    FLOAT64         reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    BYTE            reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    WFLOAT          reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    WSTRING         reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    WINT            reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    BOOL            reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    DEFAULT         reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)
    CASE            reduce using rule 208 (data_type_and_value -> WINT EQUAL int_value .)


state 349

    (226) data_type_and_value -> WINT EQUAL error .

    COLON           reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    PRINT           reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    SCAN            reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    FOR             reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    CONST           reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    ID              reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    APPEND          reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    LEN             reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    COPY            reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    DELETE          reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    IF              reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    ELSE            reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    TYPE            reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    SWITCH          reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    VAR             reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    FUNC            reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    INTEGER         reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    FLOAT           reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    NOT             reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    RLLAVE          reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    RETURN          reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    STRING          reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    TRUE            reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    FALSE           reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    INT32           reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    INT64           reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    FLOAT32         reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    FLOAT64         reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    BYTE            reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    WFLOAT          reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    WSTRING         reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    WINT            reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    BOOL            reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    DEFAULT         reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)
    CASE            reduce using rule 226 (data_type_and_value -> WINT EQUAL error .)


state 350

    (217) int_value -> INTEGER .
    (180) something_ex -> INTEGER .

  ! reduce/reduce conflict for COLON resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for PRINT resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for SCAN resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for FOR resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for CONST resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for ID resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for APPEND resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for LEN resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for COPY resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for DELETE resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for IF resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for ELSE resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for TYPE resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for SWITCH resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for VAR resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for FUNC resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for INTEGER resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for NOT resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for RETURN resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for STRING resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for TRUE resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for FALSE resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for INT32 resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for INT64 resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for FLOAT32 resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for FLOAT64 resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for BYTE resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for WFLOAT resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for WSTRING resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for WINT resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for BOOL resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 180 (something_ex -> INTEGER .)
  ! reduce/reduce conflict for CASE resolved using rule 180 (something_ex -> INTEGER .)
    GREATER         reduce using rule 180 (something_ex -> INTEGER .)
    SMALLER         reduce using rule 180 (something_ex -> INTEGER .)
    GREATER_OR_EQUAL reduce using rule 180 (something_ex -> INTEGER .)
    SMALLER_OR_EQUAL reduce using rule 180 (something_ex -> INTEGER .)
    EQUAL_COMPARE   reduce using rule 180 (something_ex -> INTEGER .)
    NOT_EQUAL       reduce using rule 180 (something_ex -> INTEGER .)
    PLUS            reduce using rule 180 (something_ex -> INTEGER .)
    TIMES           reduce using rule 180 (something_ex -> INTEGER .)
    DIVIDE          reduce using rule 180 (something_ex -> INTEGER .)
    MINUS           reduce using rule 180 (something_ex -> INTEGER .)
    MOD             reduce using rule 180 (something_ex -> INTEGER .)
    COLON           reduce using rule 180 (something_ex -> INTEGER .)
    PRINT           reduce using rule 180 (something_ex -> INTEGER .)
    SCAN            reduce using rule 180 (something_ex -> INTEGER .)
    FOR             reduce using rule 180 (something_ex -> INTEGER .)
    CONST           reduce using rule 180 (something_ex -> INTEGER .)
    ID              reduce using rule 180 (something_ex -> INTEGER .)
    APPEND          reduce using rule 180 (something_ex -> INTEGER .)
    LEN             reduce using rule 180 (something_ex -> INTEGER .)
    COPY            reduce using rule 180 (something_ex -> INTEGER .)
    DELETE          reduce using rule 180 (something_ex -> INTEGER .)
    IF              reduce using rule 180 (something_ex -> INTEGER .)
    ELSE            reduce using rule 180 (something_ex -> INTEGER .)
    TYPE            reduce using rule 180 (something_ex -> INTEGER .)
    SWITCH          reduce using rule 180 (something_ex -> INTEGER .)
    VAR             reduce using rule 180 (something_ex -> INTEGER .)
    FUNC            reduce using rule 180 (something_ex -> INTEGER .)
    INTEGER         reduce using rule 180 (something_ex -> INTEGER .)
    FLOAT           reduce using rule 180 (something_ex -> INTEGER .)
    NOT             reduce using rule 180 (something_ex -> INTEGER .)
    RLLAVE          reduce using rule 180 (something_ex -> INTEGER .)
    RETURN          reduce using rule 180 (something_ex -> INTEGER .)
    STRING          reduce using rule 180 (something_ex -> INTEGER .)
    TRUE            reduce using rule 180 (something_ex -> INTEGER .)
    FALSE           reduce using rule 180 (something_ex -> INTEGER .)
    INT32           reduce using rule 180 (something_ex -> INTEGER .)
    INT64           reduce using rule 180 (something_ex -> INTEGER .)
    FLOAT32         reduce using rule 180 (something_ex -> INTEGER .)
    FLOAT64         reduce using rule 180 (something_ex -> INTEGER .)
    BYTE            reduce using rule 180 (something_ex -> INTEGER .)
    WFLOAT          reduce using rule 180 (something_ex -> INTEGER .)
    WSTRING         reduce using rule 180 (something_ex -> INTEGER .)
    WINT            reduce using rule 180 (something_ex -> INTEGER .)
    BOOL            reduce using rule 180 (something_ex -> INTEGER .)
    DEFAULT         reduce using rule 180 (something_ex -> INTEGER .)
    CASE            reduce using rule 180 (something_ex -> INTEGER .)

  ! COLON           [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! PRINT           [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! SCAN            [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! FOR             [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! CONST           [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! ID              [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! APPEND          [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! LEN             [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! COPY            [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! DELETE          [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! IF              [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! ELSE            [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! TYPE            [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! SWITCH          [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! VAR             [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! FUNC            [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! INTEGER         [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! FLOAT           [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! NOT             [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! RLLAVE          [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! RETURN          [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! STRING          [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! TRUE            [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! FALSE           [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! INT32           [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! INT64           [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! FLOAT32         [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! FLOAT64         [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! BYTE            [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! WFLOAT          [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! WSTRING         [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! WINT            [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! BOOL            [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! DEFAULT         [ reduce using rule 217 (int_value -> INTEGER .) ]
  ! CASE            [ reduce using rule 217 (int_value -> INTEGER .) ]


state 351

    (218) int_value -> expression .

    COLON           reduce using rule 218 (int_value -> expression .)
    PRINT           reduce using rule 218 (int_value -> expression .)
    SCAN            reduce using rule 218 (int_value -> expression .)
    FOR             reduce using rule 218 (int_value -> expression .)
    CONST           reduce using rule 218 (int_value -> expression .)
    ID              reduce using rule 218 (int_value -> expression .)
    APPEND          reduce using rule 218 (int_value -> expression .)
    LEN             reduce using rule 218 (int_value -> expression .)
    COPY            reduce using rule 218 (int_value -> expression .)
    DELETE          reduce using rule 218 (int_value -> expression .)
    IF              reduce using rule 218 (int_value -> expression .)
    ELSE            reduce using rule 218 (int_value -> expression .)
    TYPE            reduce using rule 218 (int_value -> expression .)
    SWITCH          reduce using rule 218 (int_value -> expression .)
    VAR             reduce using rule 218 (int_value -> expression .)
    FUNC            reduce using rule 218 (int_value -> expression .)
    INTEGER         reduce using rule 218 (int_value -> expression .)
    FLOAT           reduce using rule 218 (int_value -> expression .)
    NOT             reduce using rule 218 (int_value -> expression .)
    RLLAVE          reduce using rule 218 (int_value -> expression .)
    RETURN          reduce using rule 218 (int_value -> expression .)
    STRING          reduce using rule 218 (int_value -> expression .)
    TRUE            reduce using rule 218 (int_value -> expression .)
    FALSE           reduce using rule 218 (int_value -> expression .)
    INT32           reduce using rule 218 (int_value -> expression .)
    INT64           reduce using rule 218 (int_value -> expression .)
    FLOAT32         reduce using rule 218 (int_value -> expression .)
    FLOAT64         reduce using rule 218 (int_value -> expression .)
    BYTE            reduce using rule 218 (int_value -> expression .)
    WFLOAT          reduce using rule 218 (int_value -> expression .)
    WSTRING         reduce using rule 218 (int_value -> expression .)
    WINT            reduce using rule 218 (int_value -> expression .)
    BOOL            reduce using rule 218 (int_value -> expression .)
    DEFAULT         reduce using rule 218 (int_value -> expression .)
    CASE            reduce using rule 218 (int_value -> expression .)


state 352

    (209) data_type_and_value -> INT32 EQUAL int_value .

    COLON           reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    PRINT           reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    SCAN            reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    FOR             reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    CONST           reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    ID              reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    APPEND          reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    LEN             reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    COPY            reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    DELETE          reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    IF              reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    ELSE            reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    TYPE            reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    SWITCH          reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    VAR             reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    FUNC            reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    INTEGER         reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    FLOAT           reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    NOT             reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    RLLAVE          reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    RETURN          reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    STRING          reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    TRUE            reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    FALSE           reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    INT32           reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    INT64           reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    FLOAT32         reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    FLOAT64         reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    BYTE            reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    WFLOAT          reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    WSTRING         reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    WINT            reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    BOOL            reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    DEFAULT         reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)
    CASE            reduce using rule 209 (data_type_and_value -> INT32 EQUAL int_value .)


state 353

    (227) data_type_and_value -> INT32 EQUAL error .

    COLON           reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    PRINT           reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    SCAN            reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    FOR             reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    CONST           reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    ID              reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    APPEND          reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    LEN             reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    COPY            reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    DELETE          reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    IF              reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    ELSE            reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    TYPE            reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    SWITCH          reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    VAR             reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    FUNC            reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    INTEGER         reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    FLOAT           reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    NOT             reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    RLLAVE          reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    RETURN          reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    STRING          reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    TRUE            reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    FALSE           reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    INT32           reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    INT64           reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    FLOAT32         reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    FLOAT64         reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    BYTE            reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    WFLOAT          reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    WSTRING         reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    WINT            reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    BOOL            reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    DEFAULT         reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)
    CASE            reduce using rule 227 (data_type_and_value -> INT32 EQUAL error .)


state 354

    (210) data_type_and_value -> INT64 EQUAL int_value .

    COLON           reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    PRINT           reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    SCAN            reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    FOR             reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    CONST           reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    ID              reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    APPEND          reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    LEN             reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    COPY            reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    DELETE          reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    IF              reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    ELSE            reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    TYPE            reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    SWITCH          reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    VAR             reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    FUNC            reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    INTEGER         reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    FLOAT           reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    NOT             reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    RLLAVE          reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    RETURN          reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    STRING          reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    TRUE            reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    FALSE           reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    INT32           reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    INT64           reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    FLOAT32         reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    FLOAT64         reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    BYTE            reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    WFLOAT          reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    WSTRING         reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    WINT            reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    BOOL            reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    DEFAULT         reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)
    CASE            reduce using rule 210 (data_type_and_value -> INT64 EQUAL int_value .)


state 355

    (228) data_type_and_value -> INT64 EQUAL error .

    COLON           reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    PRINT           reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    SCAN            reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    FOR             reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    CONST           reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    ID              reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    APPEND          reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    LEN             reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    COPY            reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    DELETE          reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    IF              reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    ELSE            reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    TYPE            reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    SWITCH          reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    VAR             reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    FUNC            reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    INTEGER         reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    FLOAT           reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    NOT             reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    RLLAVE          reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    RETURN          reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    STRING          reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    TRUE            reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    FALSE           reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    INT32           reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    INT64           reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    FLOAT32         reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    FLOAT64         reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    BYTE            reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    WFLOAT          reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    WSTRING         reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    WINT            reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    BOOL            reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    DEFAULT         reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)
    CASE            reduce using rule 228 (data_type_and_value -> INT64 EQUAL error .)


state 356

    (211) data_type_and_value -> WFLOAT EQUAL float_value .

    COLON           reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    PRINT           reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    SCAN            reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    FOR             reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    CONST           reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    ID              reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    APPEND          reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    LEN             reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    COPY            reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    DELETE          reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    IF              reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    ELSE            reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    TYPE            reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    SWITCH          reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    VAR             reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    FUNC            reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    INTEGER         reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    FLOAT           reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    NOT             reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    RLLAVE          reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    RETURN          reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    STRING          reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    TRUE            reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    FALSE           reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    INT32           reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    INT64           reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    FLOAT32         reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    FLOAT64         reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    BYTE            reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    WFLOAT          reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    WSTRING         reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    WINT            reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    BOOL            reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    DEFAULT         reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)
    CASE            reduce using rule 211 (data_type_and_value -> WFLOAT EQUAL float_value .)


state 357

    (229) data_type_and_value -> WFLOAT EQUAL error .

    COLON           reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    PRINT           reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    SCAN            reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    FOR             reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    CONST           reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    ID              reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    APPEND          reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    LEN             reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    COPY            reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    DELETE          reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    IF              reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    ELSE            reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    TYPE            reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    SWITCH          reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    VAR             reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    FUNC            reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    INTEGER         reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    FLOAT           reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    NOT             reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    RLLAVE          reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    RETURN          reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    STRING          reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    TRUE            reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    FALSE           reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    INT32           reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    INT64           reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    FLOAT32         reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    FLOAT64         reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    BYTE            reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    WFLOAT          reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    WSTRING         reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    WINT            reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    BOOL            reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    DEFAULT         reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)
    CASE            reduce using rule 229 (data_type_and_value -> WFLOAT EQUAL error .)


state 358

    (223) float_value -> FLOAT .
    (181) something_ex -> FLOAT .

  ! reduce/reduce conflict for COLON resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for PRINT resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for SCAN resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for FOR resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for CONST resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for ID resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for APPEND resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for LEN resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for COPY resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for DELETE resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for IF resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for ELSE resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for TYPE resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for SWITCH resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for VAR resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for FUNC resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for INTEGER resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for FLOAT resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for NOT resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for RLLAVE resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for RETURN resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for STRING resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for TRUE resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for FALSE resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for INT32 resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for INT64 resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for FLOAT32 resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for FLOAT64 resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for BYTE resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for WFLOAT resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for WSTRING resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for WINT resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for BOOL resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 181 (something_ex -> FLOAT .)
  ! reduce/reduce conflict for CASE resolved using rule 181 (something_ex -> FLOAT .)
    GREATER         reduce using rule 181 (something_ex -> FLOAT .)
    SMALLER         reduce using rule 181 (something_ex -> FLOAT .)
    GREATER_OR_EQUAL reduce using rule 181 (something_ex -> FLOAT .)
    SMALLER_OR_EQUAL reduce using rule 181 (something_ex -> FLOAT .)
    EQUAL_COMPARE   reduce using rule 181 (something_ex -> FLOAT .)
    NOT_EQUAL       reduce using rule 181 (something_ex -> FLOAT .)
    PLUS            reduce using rule 181 (something_ex -> FLOAT .)
    TIMES           reduce using rule 181 (something_ex -> FLOAT .)
    DIVIDE          reduce using rule 181 (something_ex -> FLOAT .)
    MINUS           reduce using rule 181 (something_ex -> FLOAT .)
    MOD             reduce using rule 181 (something_ex -> FLOAT .)
    COLON           reduce using rule 181 (something_ex -> FLOAT .)
    PRINT           reduce using rule 181 (something_ex -> FLOAT .)
    SCAN            reduce using rule 181 (something_ex -> FLOAT .)
    FOR             reduce using rule 181 (something_ex -> FLOAT .)
    CONST           reduce using rule 181 (something_ex -> FLOAT .)
    ID              reduce using rule 181 (something_ex -> FLOAT .)
    APPEND          reduce using rule 181 (something_ex -> FLOAT .)
    LEN             reduce using rule 181 (something_ex -> FLOAT .)
    COPY            reduce using rule 181 (something_ex -> FLOAT .)
    DELETE          reduce using rule 181 (something_ex -> FLOAT .)
    IF              reduce using rule 181 (something_ex -> FLOAT .)
    ELSE            reduce using rule 181 (something_ex -> FLOAT .)
    TYPE            reduce using rule 181 (something_ex -> FLOAT .)
    SWITCH          reduce using rule 181 (something_ex -> FLOAT .)
    VAR             reduce using rule 181 (something_ex -> FLOAT .)
    FUNC            reduce using rule 181 (something_ex -> FLOAT .)
    INTEGER         reduce using rule 181 (something_ex -> FLOAT .)
    FLOAT           reduce using rule 181 (something_ex -> FLOAT .)
    NOT             reduce using rule 181 (something_ex -> FLOAT .)
    RLLAVE          reduce using rule 181 (something_ex -> FLOAT .)
    RETURN          reduce using rule 181 (something_ex -> FLOAT .)
    STRING          reduce using rule 181 (something_ex -> FLOAT .)
    TRUE            reduce using rule 181 (something_ex -> FLOAT .)
    FALSE           reduce using rule 181 (something_ex -> FLOAT .)
    INT32           reduce using rule 181 (something_ex -> FLOAT .)
    INT64           reduce using rule 181 (something_ex -> FLOAT .)
    FLOAT32         reduce using rule 181 (something_ex -> FLOAT .)
    FLOAT64         reduce using rule 181 (something_ex -> FLOAT .)
    BYTE            reduce using rule 181 (something_ex -> FLOAT .)
    WFLOAT          reduce using rule 181 (something_ex -> FLOAT .)
    WSTRING         reduce using rule 181 (something_ex -> FLOAT .)
    WINT            reduce using rule 181 (something_ex -> FLOAT .)
    BOOL            reduce using rule 181 (something_ex -> FLOAT .)
    DEFAULT         reduce using rule 181 (something_ex -> FLOAT .)
    CASE            reduce using rule 181 (something_ex -> FLOAT .)

  ! COLON           [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! PRINT           [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! SCAN            [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! FOR             [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! CONST           [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! ID              [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! APPEND          [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! LEN             [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! COPY            [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! DELETE          [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! IF              [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! ELSE            [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! TYPE            [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! SWITCH          [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! VAR             [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! FUNC            [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! INTEGER         [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! FLOAT           [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! NOT             [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! RLLAVE          [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! RETURN          [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! STRING          [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! TRUE            [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! FALSE           [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! INT32           [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! INT64           [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! FLOAT32         [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! FLOAT64         [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! BYTE            [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! WFLOAT          [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! WSTRING         [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! WINT            [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! BOOL            [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! DEFAULT         [ reduce using rule 223 (float_value -> FLOAT .) ]
  ! CASE            [ reduce using rule 223 (float_value -> FLOAT .) ]


state 359

    (224) float_value -> expression .

    COLON           reduce using rule 224 (float_value -> expression .)
    PRINT           reduce using rule 224 (float_value -> expression .)
    SCAN            reduce using rule 224 (float_value -> expression .)
    FOR             reduce using rule 224 (float_value -> expression .)
    CONST           reduce using rule 224 (float_value -> expression .)
    ID              reduce using rule 224 (float_value -> expression .)
    APPEND          reduce using rule 224 (float_value -> expression .)
    LEN             reduce using rule 224 (float_value -> expression .)
    COPY            reduce using rule 224 (float_value -> expression .)
    DELETE          reduce using rule 224 (float_value -> expression .)
    IF              reduce using rule 224 (float_value -> expression .)
    ELSE            reduce using rule 224 (float_value -> expression .)
    TYPE            reduce using rule 224 (float_value -> expression .)
    SWITCH          reduce using rule 224 (float_value -> expression .)
    VAR             reduce using rule 224 (float_value -> expression .)
    FUNC            reduce using rule 224 (float_value -> expression .)
    INTEGER         reduce using rule 224 (float_value -> expression .)
    FLOAT           reduce using rule 224 (float_value -> expression .)
    NOT             reduce using rule 224 (float_value -> expression .)
    RLLAVE          reduce using rule 224 (float_value -> expression .)
    RETURN          reduce using rule 224 (float_value -> expression .)
    STRING          reduce using rule 224 (float_value -> expression .)
    TRUE            reduce using rule 224 (float_value -> expression .)
    FALSE           reduce using rule 224 (float_value -> expression .)
    INT32           reduce using rule 224 (float_value -> expression .)
    INT64           reduce using rule 224 (float_value -> expression .)
    FLOAT32         reduce using rule 224 (float_value -> expression .)
    FLOAT64         reduce using rule 224 (float_value -> expression .)
    BYTE            reduce using rule 224 (float_value -> expression .)
    WFLOAT          reduce using rule 224 (float_value -> expression .)
    WSTRING         reduce using rule 224 (float_value -> expression .)
    WINT            reduce using rule 224 (float_value -> expression .)
    BOOL            reduce using rule 224 (float_value -> expression .)
    DEFAULT         reduce using rule 224 (float_value -> expression .)
    CASE            reduce using rule 224 (float_value -> expression .)


state 360

    (212) data_type_and_value -> FLOAT32 EQUAL float_value .

    COLON           reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    PRINT           reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    SCAN            reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    FOR             reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    CONST           reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    ID              reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    APPEND          reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    LEN             reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    COPY            reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    DELETE          reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    IF              reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    ELSE            reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    TYPE            reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    SWITCH          reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    VAR             reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    FUNC            reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    INTEGER         reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    FLOAT           reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    NOT             reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    RLLAVE          reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    RETURN          reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    STRING          reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    TRUE            reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    FALSE           reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    INT32           reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    INT64           reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    FLOAT32         reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    FLOAT64         reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    BYTE            reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    WFLOAT          reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    WSTRING         reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    WINT            reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    BOOL            reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    DEFAULT         reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)
    CASE            reduce using rule 212 (data_type_and_value -> FLOAT32 EQUAL float_value .)


state 361

    (230) data_type_and_value -> FLOAT32 EQUAL error .

    COLON           reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    PRINT           reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    SCAN            reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    FOR             reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    CONST           reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    ID              reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    APPEND          reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    LEN             reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    COPY            reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    DELETE          reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    IF              reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    ELSE            reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    TYPE            reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    SWITCH          reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    VAR             reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    FUNC            reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    INTEGER         reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    FLOAT           reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    NOT             reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    RLLAVE          reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    RETURN          reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    STRING          reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    TRUE            reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    FALSE           reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    INT32           reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    INT64           reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    FLOAT32         reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    FLOAT64         reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    BYTE            reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    WFLOAT          reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    WSTRING         reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    WINT            reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    BOOL            reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    DEFAULT         reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)
    CASE            reduce using rule 230 (data_type_and_value -> FLOAT32 EQUAL error .)


state 362

    (213) data_type_and_value -> FLOAT64 EQUAL float_value .

    COLON           reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    PRINT           reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    SCAN            reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    FOR             reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    CONST           reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    ID              reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    APPEND          reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    LEN             reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    COPY            reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    DELETE          reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    IF              reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    ELSE            reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    TYPE            reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    SWITCH          reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    VAR             reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    FUNC            reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    INTEGER         reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    FLOAT           reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    NOT             reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    RLLAVE          reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    RETURN          reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    STRING          reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    TRUE            reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    FALSE           reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    INT32           reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    INT64           reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    FLOAT32         reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    FLOAT64         reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    BYTE            reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    WFLOAT          reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    WSTRING         reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    WINT            reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    BOOL            reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    DEFAULT         reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)
    CASE            reduce using rule 213 (data_type_and_value -> FLOAT64 EQUAL float_value .)


state 363

    (231) data_type_and_value -> FLOAT64 EQUAL error .

    COLON           reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    PRINT           reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    SCAN            reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    FOR             reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    CONST           reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    ID              reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    APPEND          reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    LEN             reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    COPY            reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    DELETE          reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    IF              reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    ELSE            reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    TYPE            reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    SWITCH          reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    VAR             reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    FUNC            reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    INTEGER         reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    FLOAT           reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    NOT             reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    RLLAVE          reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    RETURN          reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    STRING          reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    TRUE            reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    FALSE           reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    INT32           reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    INT64           reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    FLOAT32         reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    FLOAT64         reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    BYTE            reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    WFLOAT          reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    WSTRING         reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    WINT            reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    BOOL            reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    DEFAULT         reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)
    CASE            reduce using rule 231 (data_type_and_value -> FLOAT64 EQUAL error .)


state 364

    (214) data_type_and_value -> BOOL EQUAL bool_value .

    COLON           reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    PRINT           reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    SCAN            reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    FOR             reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    CONST           reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    ID              reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    APPEND          reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    LEN             reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    COPY            reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    DELETE          reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    IF              reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    ELSE            reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    TYPE            reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    SWITCH          reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    VAR             reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    FUNC            reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    INTEGER         reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    FLOAT           reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    NOT             reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    RLLAVE          reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    RETURN          reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    STRING          reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    TRUE            reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    FALSE           reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    INT32           reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    INT64           reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    FLOAT32         reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    FLOAT64         reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    BYTE            reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    WFLOAT          reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    WSTRING         reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    WINT            reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    BOOL            reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    DEFAULT         reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)
    CASE            reduce using rule 214 (data_type_and_value -> BOOL EQUAL bool_value .)


state 365

    (232) data_type_and_value -> BOOL EQUAL error .

    COLON           reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    PRINT           reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    SCAN            reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    FOR             reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    CONST           reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    ID              reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    APPEND          reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    LEN             reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    COPY            reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    DELETE          reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    IF              reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    ELSE            reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    TYPE            reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    SWITCH          reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    VAR             reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    FUNC            reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    INTEGER         reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    FLOAT           reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    NOT             reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    RLLAVE          reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    RETURN          reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    STRING          reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    TRUE            reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    FALSE           reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    INT32           reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    INT64           reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    FLOAT32         reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    FLOAT64         reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    BYTE            reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    WFLOAT          reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    WSTRING         reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    WINT            reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    BOOL            reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    DEFAULT         reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)
    CASE            reduce using rule 232 (data_type_and_value -> BOOL EQUAL error .)


state 366

    (219) bool_value -> TRUE .

    COLON           reduce using rule 219 (bool_value -> TRUE .)
    PRINT           reduce using rule 219 (bool_value -> TRUE .)
    SCAN            reduce using rule 219 (bool_value -> TRUE .)
    FOR             reduce using rule 219 (bool_value -> TRUE .)
    CONST           reduce using rule 219 (bool_value -> TRUE .)
    ID              reduce using rule 219 (bool_value -> TRUE .)
    APPEND          reduce using rule 219 (bool_value -> TRUE .)
    LEN             reduce using rule 219 (bool_value -> TRUE .)
    COPY            reduce using rule 219 (bool_value -> TRUE .)
    DELETE          reduce using rule 219 (bool_value -> TRUE .)
    IF              reduce using rule 219 (bool_value -> TRUE .)
    ELSE            reduce using rule 219 (bool_value -> TRUE .)
    TYPE            reduce using rule 219 (bool_value -> TRUE .)
    SWITCH          reduce using rule 219 (bool_value -> TRUE .)
    VAR             reduce using rule 219 (bool_value -> TRUE .)
    FUNC            reduce using rule 219 (bool_value -> TRUE .)
    INTEGER         reduce using rule 219 (bool_value -> TRUE .)
    FLOAT           reduce using rule 219 (bool_value -> TRUE .)
    NOT             reduce using rule 219 (bool_value -> TRUE .)
    RLLAVE          reduce using rule 219 (bool_value -> TRUE .)
    RETURN          reduce using rule 219 (bool_value -> TRUE .)
    STRING          reduce using rule 219 (bool_value -> TRUE .)
    TRUE            reduce using rule 219 (bool_value -> TRUE .)
    FALSE           reduce using rule 219 (bool_value -> TRUE .)
    INT32           reduce using rule 219 (bool_value -> TRUE .)
    INT64           reduce using rule 219 (bool_value -> TRUE .)
    FLOAT32         reduce using rule 219 (bool_value -> TRUE .)
    FLOAT64         reduce using rule 219 (bool_value -> TRUE .)
    BYTE            reduce using rule 219 (bool_value -> TRUE .)
    WFLOAT          reduce using rule 219 (bool_value -> TRUE .)
    WSTRING         reduce using rule 219 (bool_value -> TRUE .)
    WINT            reduce using rule 219 (bool_value -> TRUE .)
    BOOL            reduce using rule 219 (bool_value -> TRUE .)
    DEFAULT         reduce using rule 219 (bool_value -> TRUE .)
    CASE            reduce using rule 219 (bool_value -> TRUE .)


state 367

    (220) bool_value -> FALSE .

    COLON           reduce using rule 220 (bool_value -> FALSE .)
    PRINT           reduce using rule 220 (bool_value -> FALSE .)
    SCAN            reduce using rule 220 (bool_value -> FALSE .)
    FOR             reduce using rule 220 (bool_value -> FALSE .)
    CONST           reduce using rule 220 (bool_value -> FALSE .)
    ID              reduce using rule 220 (bool_value -> FALSE .)
    APPEND          reduce using rule 220 (bool_value -> FALSE .)
    LEN             reduce using rule 220 (bool_value -> FALSE .)
    COPY            reduce using rule 220 (bool_value -> FALSE .)
    DELETE          reduce using rule 220 (bool_value -> FALSE .)
    IF              reduce using rule 220 (bool_value -> FALSE .)
    ELSE            reduce using rule 220 (bool_value -> FALSE .)
    TYPE            reduce using rule 220 (bool_value -> FALSE .)
    SWITCH          reduce using rule 220 (bool_value -> FALSE .)
    VAR             reduce using rule 220 (bool_value -> FALSE .)
    FUNC            reduce using rule 220 (bool_value -> FALSE .)
    INTEGER         reduce using rule 220 (bool_value -> FALSE .)
    FLOAT           reduce using rule 220 (bool_value -> FALSE .)
    NOT             reduce using rule 220 (bool_value -> FALSE .)
    RLLAVE          reduce using rule 220 (bool_value -> FALSE .)
    RETURN          reduce using rule 220 (bool_value -> FALSE .)
    STRING          reduce using rule 220 (bool_value -> FALSE .)
    TRUE            reduce using rule 220 (bool_value -> FALSE .)
    FALSE           reduce using rule 220 (bool_value -> FALSE .)
    INT32           reduce using rule 220 (bool_value -> FALSE .)
    INT64           reduce using rule 220 (bool_value -> FALSE .)
    FLOAT32         reduce using rule 220 (bool_value -> FALSE .)
    FLOAT64         reduce using rule 220 (bool_value -> FALSE .)
    BYTE            reduce using rule 220 (bool_value -> FALSE .)
    WFLOAT          reduce using rule 220 (bool_value -> FALSE .)
    WSTRING         reduce using rule 220 (bool_value -> FALSE .)
    WINT            reduce using rule 220 (bool_value -> FALSE .)
    BOOL            reduce using rule 220 (bool_value -> FALSE .)
    DEFAULT         reduce using rule 220 (bool_value -> FALSE .)
    CASE            reduce using rule 220 (bool_value -> FALSE .)


state 368

    (221) bool_value -> comparison .
    (194) logic_value -> comparison .

    COLON           reduce using rule 221 (bool_value -> comparison .)
    PRINT           reduce using rule 221 (bool_value -> comparison .)
    SCAN            reduce using rule 221 (bool_value -> comparison .)
    FOR             reduce using rule 221 (bool_value -> comparison .)
    CONST           reduce using rule 221 (bool_value -> comparison .)
    ID              reduce using rule 221 (bool_value -> comparison .)
    APPEND          reduce using rule 221 (bool_value -> comparison .)
    LEN             reduce using rule 221 (bool_value -> comparison .)
    COPY            reduce using rule 221 (bool_value -> comparison .)
    DELETE          reduce using rule 221 (bool_value -> comparison .)
    IF              reduce using rule 221 (bool_value -> comparison .)
    ELSE            reduce using rule 221 (bool_value -> comparison .)
    TYPE            reduce using rule 221 (bool_value -> comparison .)
    SWITCH          reduce using rule 221 (bool_value -> comparison .)
    VAR             reduce using rule 221 (bool_value -> comparison .)
    FUNC            reduce using rule 221 (bool_value -> comparison .)
    INTEGER         reduce using rule 221 (bool_value -> comparison .)
    FLOAT           reduce using rule 221 (bool_value -> comparison .)
    NOT             reduce using rule 221 (bool_value -> comparison .)
    RLLAVE          reduce using rule 221 (bool_value -> comparison .)
    RETURN          reduce using rule 221 (bool_value -> comparison .)
    STRING          reduce using rule 221 (bool_value -> comparison .)
    TRUE            reduce using rule 221 (bool_value -> comparison .)
    FALSE           reduce using rule 221 (bool_value -> comparison .)
    INT32           reduce using rule 221 (bool_value -> comparison .)
    INT64           reduce using rule 221 (bool_value -> comparison .)
    FLOAT32         reduce using rule 221 (bool_value -> comparison .)
    FLOAT64         reduce using rule 221 (bool_value -> comparison .)
    BYTE            reduce using rule 221 (bool_value -> comparison .)
    WFLOAT          reduce using rule 221 (bool_value -> comparison .)
    WSTRING         reduce using rule 221 (bool_value -> comparison .)
    WINT            reduce using rule 221 (bool_value -> comparison .)
    BOOL            reduce using rule 221 (bool_value -> comparison .)
    DEFAULT         reduce using rule 221 (bool_value -> comparison .)
    CASE            reduce using rule 221 (bool_value -> comparison .)
    AND             reduce using rule 194 (logic_value -> comparison .)
    OR              reduce using rule 194 (logic_value -> comparison .)


state 369

    (222) bool_value -> logic_operation .

    COLON           reduce using rule 222 (bool_value -> logic_operation .)
    PRINT           reduce using rule 222 (bool_value -> logic_operation .)
    SCAN            reduce using rule 222 (bool_value -> logic_operation .)
    FOR             reduce using rule 222 (bool_value -> logic_operation .)
    CONST           reduce using rule 222 (bool_value -> logic_operation .)
    ID              reduce using rule 222 (bool_value -> logic_operation .)
    APPEND          reduce using rule 222 (bool_value -> logic_operation .)
    LEN             reduce using rule 222 (bool_value -> logic_operation .)
    COPY            reduce using rule 222 (bool_value -> logic_operation .)
    DELETE          reduce using rule 222 (bool_value -> logic_operation .)
    IF              reduce using rule 222 (bool_value -> logic_operation .)
    ELSE            reduce using rule 222 (bool_value -> logic_operation .)
    TYPE            reduce using rule 222 (bool_value -> logic_operation .)
    SWITCH          reduce using rule 222 (bool_value -> logic_operation .)
    VAR             reduce using rule 222 (bool_value -> logic_operation .)
    FUNC            reduce using rule 222 (bool_value -> logic_operation .)
    INTEGER         reduce using rule 222 (bool_value -> logic_operation .)
    FLOAT           reduce using rule 222 (bool_value -> logic_operation .)
    NOT             reduce using rule 222 (bool_value -> logic_operation .)
    RLLAVE          reduce using rule 222 (bool_value -> logic_operation .)
    RETURN          reduce using rule 222 (bool_value -> logic_operation .)
    STRING          reduce using rule 222 (bool_value -> logic_operation .)
    TRUE            reduce using rule 222 (bool_value -> logic_operation .)
    FALSE           reduce using rule 222 (bool_value -> logic_operation .)
    INT32           reduce using rule 222 (bool_value -> logic_operation .)
    INT64           reduce using rule 222 (bool_value -> logic_operation .)
    FLOAT32         reduce using rule 222 (bool_value -> logic_operation .)
    FLOAT64         reduce using rule 222 (bool_value -> logic_operation .)
    BYTE            reduce using rule 222 (bool_value -> logic_operation .)
    WFLOAT          reduce using rule 222 (bool_value -> logic_operation .)
    WSTRING         reduce using rule 222 (bool_value -> logic_operation .)
    WINT            reduce using rule 222 (bool_value -> logic_operation .)
    BOOL            reduce using rule 222 (bool_value -> logic_operation .)
    DEFAULT         reduce using rule 222 (bool_value -> logic_operation .)
    CASE            reduce using rule 222 (bool_value -> logic_operation .)


state 370

    (102) asignaciones -> ID . POINTS valor
    (103) asignaciones -> ID . POINTS valor COMA asignaciones

    POINTS          shift and go to state 414


state 371

    (101) cStruct -> ID DEQUAL ID LLLAVE asignaciones . RLLAVE

    RLLAVE          shift and go to state 415


state 372

    (151) slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types . arr_content
    (68) arr_content -> . LLLAVE items COMA more_items RLLAVE
    (69) arr_content -> . LLLAVE items RLLAVE

    LLLAVE          shift and go to state 417

    arr_content                    shift and go to state 416

state 373

    (152) funM -> MAKE LPAREN LCORCHE . RCORCHE data_types COMA cap RPAREN
    (153) funM -> MAKE LPAREN LCORCHE . RCORCHE data_types COMA cap COMA cap RPAREN

    RCORCHE         shift and go to state 418


state 374

    (205) list_params -> ID COMA more_p .

    RPAREN          reduce using rule 205 (list_params -> ID COMA more_p .)


state 375

    (206) more_p -> list_params .

    RPAREN          reduce using rule 206 (more_p -> list_params .)


state 376

    (131) funciones -> APPEND LPAREN ID COMA ID . RPAREN

    RPAREN          shift and go to state 419


state 377

    (130) funciones -> APPEND LPAREN ID COMA values . RPAREN

    RPAREN          shift and go to state 420


state 378

    (52) values -> INTEGER .

    RPAREN          reduce using rule 52 (values -> INTEGER .)
    POINTS          reduce using rule 52 (values -> INTEGER .)


state 379

    (53) values -> FLOAT .

    RPAREN          reduce using rule 53 (values -> FLOAT .)
    POINTS          reduce using rule 53 (values -> FLOAT .)


state 380

    (133) funciones -> COPY LPAREN ID COMA ID . RPAREN

    RPAREN          shift and go to state 421


state 381

    (136) clave -> ID .

    RPAREN          reduce using rule 136 (clave -> ID .)


state 382

    (134) funciones -> DELETE LPAREN ID COMA clave . RPAREN

    RPAREN          shift and go to state 422


state 383

    (137) clave -> values .

    RPAREN          reduce using rule 137 (clave -> values .)


state 384

    (88) SenIF -> IF comparison LLLAVE codigo RLLAVE .

    PRINT           reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    SCAN            reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    FOR             reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    CONST           reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    ID              reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    APPEND          reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    LEN             reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    COPY            reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    DELETE          reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    IF              reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    ELSE            reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    TYPE            reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    SWITCH          reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    VAR             reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    FUNC            reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    INTEGER         reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    FLOAT           reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    NOT             reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    RLLAVE          reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    RETURN          reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    STRING          reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    TRUE            reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    FALSE           reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    INT32           reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    INT64           reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    FLOAT32         reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    FLOAT64         reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    BYTE            reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    WFLOAT          reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    WSTRING         reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    WINT            reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    BOOL            reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    DEFAULT         reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)
    CASE            reduce using rule 88 (SenIF -> IF comparison LLLAVE codigo RLLAVE .)


state 385

    (89) SenIF -> IF logic_operation LLLAVE codigo RLLAVE .

    PRINT           reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    SCAN            reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    FOR             reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    CONST           reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    ID              reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    APPEND          reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    LEN             reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    COPY            reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    DELETE          reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    IF              reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    ELSE            reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    TYPE            reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    SWITCH          reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    VAR             reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    FUNC            reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    INTEGER         reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    FLOAT           reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    NOT             reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    RLLAVE          reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    RETURN          reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    STRING          reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    TRUE            reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    FALSE           reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    INT32           reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    INT64           reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    FLOAT32         reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    FLOAT64         reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    BYTE            reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    WFLOAT          reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    WSTRING         reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    WINT            reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    BOOL            reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    DEFAULT         reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)
    CASE            reduce using rule 89 (SenIF -> IF logic_operation LLLAVE codigo RLLAVE .)


state 386

    (90) SenIF -> IF TRUE LLLAVE codigo RLLAVE .

    PRINT           reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    SCAN            reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    FOR             reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    CONST           reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    ID              reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    APPEND          reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    LEN             reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    COPY            reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    DELETE          reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    IF              reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    ELSE            reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    TYPE            reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    SWITCH          reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    VAR             reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    FUNC            reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    INTEGER         reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    FLOAT           reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    NOT             reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    RLLAVE          reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    RETURN          reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    STRING          reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    TRUE            reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    FALSE           reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    INT32           reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    INT64           reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    FLOAT32         reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    FLOAT64         reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    BYTE            reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    WFLOAT          reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    WSTRING         reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    WINT            reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    BOOL            reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    DEFAULT         reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)
    CASE            reduce using rule 90 (SenIF -> IF TRUE LLLAVE codigo RLLAVE .)


state 387

    (91) SenIF -> IF FALSE LLLAVE codigo RLLAVE .

    PRINT           reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    SCAN            reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    FOR             reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    CONST           reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    ID              reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    APPEND          reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    LEN             reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    COPY            reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    DELETE          reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    IF              reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    ELSE            reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    TYPE            reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    SWITCH          reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    VAR             reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    FUNC            reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    INTEGER         reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    FLOAT           reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    NOT             reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    RLLAVE          reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    RETURN          reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    STRING          reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    TRUE            reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    FALSE           reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    INT32           reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    INT64           reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    FLOAT32         reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    FLOAT64         reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    BYTE            reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    WFLOAT          reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    WSTRING         reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    WINT            reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    BOOL            reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    DEFAULT         reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)
    CASE            reduce using rule 91 (SenIF -> IF FALSE LLLAVE codigo RLLAVE .)


state 388

    (92) SenElseIF -> ELSE IF comparison LLLAVE codigo . RLLAVE

    RLLAVE          shift and go to state 423


state 389

    (93) SenElseIF -> ELSE IF logic_operation LLLAVE codigo . RLLAVE

    RLLAVE          shift and go to state 424


state 390

    (94) SenElseIF -> ELSE IF TRUE LLLAVE codigo . RLLAVE

    RLLAVE          shift and go to state 425


state 391

    (95) SenElseIF -> ELSE IF FALSE LLLAVE codigo . RLLAVE

    RLLAVE          shift and go to state 426


state 392

    (100) variable -> ID .

    INT32           reduce using rule 100 (variable -> ID .)
    INT64           reduce using rule 100 (variable -> ID .)
    FLOAT32         reduce using rule 100 (variable -> ID .)
    FLOAT64         reduce using rule 100 (variable -> ID .)
    BYTE            reduce using rule 100 (variable -> ID .)
    WFLOAT          reduce using rule 100 (variable -> ID .)
    WSTRING         reduce using rule 100 (variable -> ID .)
    WINT            reduce using rule 100 (variable -> ID .)
    BOOL            reduce using rule 100 (variable -> ID .)


state 393

    (97) SenStruct -> TYPE ID STRUCT LLLAVE declaration . RLLAVE
    (99) declaration -> declaration . variable data_types
    (100) variable -> . ID

    RLLAVE          shift and go to state 427
    ID              shift and go to state 392

    variable                       shift and go to state 428

state 394

    (98) declaration -> variable . data_types
    (56) data_types -> . INT32
    (57) data_types -> . INT64
    (58) data_types -> . FLOAT32
    (59) data_types -> . FLOAT64
    (60) data_types -> . BYTE
    (61) data_types -> . WFLOAT
    (62) data_types -> . WSTRING
    (63) data_types -> . WINT
    (64) data_types -> . BOOL

    INT32           shift and go to state 22
    INT64           shift and go to state 23
    FLOAT32         shift and go to state 24
    FLOAT64         shift and go to state 25
    BYTE            shift and go to state 26
    WFLOAT          shift and go to state 27
    WSTRING         shift and go to state 28
    WINT            shift and go to state 29
    BOOL            shift and go to state 30

    data_types                     shift and go to state 429

state 395

    (233) switch_statement -> SWITCH ID LLLAVE cases RLLAVE .

    PRINT           reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    SCAN            reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    FOR             reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    CONST           reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    ID              reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    APPEND          reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    LEN             reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    COPY            reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    DELETE          reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    IF              reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    ELSE            reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    TYPE            reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    SWITCH          reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    VAR             reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    FUNC            reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    INTEGER         reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    FLOAT           reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    NOT             reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    RLLAVE          reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    RETURN          reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    STRING          reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    TRUE            reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    FALSE           reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    INT32           reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    INT64           reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    FLOAT32         reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    FLOAT64         reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    BYTE            reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    WFLOAT          reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    WSTRING         reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    WINT            reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    BOOL            reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    DEFAULT         reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)
    CASE            reduce using rule 233 (switch_statement -> SWITCH ID LLLAVE cases RLLAVE .)


state 396

    (234) cases -> CASE values . POINTS codigo
    (235) cases -> CASE values . POINTS codigo more

    POINTS          shift and go to state 430


state 397

    (238) array_declaration -> VAR ID LCORCHE capacity RCORCHE . data_types
    (56) data_types -> . INT32
    (57) data_types -> . INT64
    (58) data_types -> . FLOAT32
    (59) data_types -> . FLOAT64
    (60) data_types -> . BYTE
    (61) data_types -> . WFLOAT
    (62) data_types -> . WSTRING
    (63) data_types -> . WINT
    (64) data_types -> . BOOL

    INT32           shift and go to state 22
    INT64           shift and go to state 23
    FLOAT32         shift and go to state 24
    FLOAT64         shift and go to state 25
    BYTE            shift and go to state 26
    WFLOAT          shift and go to state 27
    WSTRING         shift and go to state 28
    WINT            shift and go to state 29
    BOOL            shift and go to state 30

    data_types                     shift and go to state 431

state 398

    (147) slice_declaration -> VAR ID LCORCHE RCORCHE data_types .

    COLON           reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    PRINT           reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    SCAN            reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    FOR             reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    CONST           reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    ID              reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    APPEND          reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    LEN             reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    COPY            reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    DELETE          reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    IF              reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    ELSE            reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    TYPE            reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    SWITCH          reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    VAR             reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    FUNC            reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    INTEGER         reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    FLOAT           reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    NOT             reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    RLLAVE          reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    RETURN          reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    STRING          reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    TRUE            reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    FALSE           reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    INT32           reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    INT64           reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    FLOAT32         reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    FLOAT64         reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    BYTE            reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    WFLOAT          reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    WSTRING         reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    WINT            reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    BOOL            reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    DEFAULT         reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)
    CASE            reduce using rule 147 (slice_declaration -> VAR ID LCORCHE RCORCHE data_types .)


state 399

    (248) map_declaration -> VAR ID LCORCHE data_types RCORCHE . data_types
    (56) data_types -> . INT32
    (57) data_types -> . INT64
    (58) data_types -> . FLOAT32
    (59) data_types -> . FLOAT64
    (60) data_types -> . BYTE
    (61) data_types -> . WFLOAT
    (62) data_types -> . WSTRING
    (63) data_types -> . WINT
    (64) data_types -> . BOOL

    INT32           shift and go to state 22
    INT64           shift and go to state 23
    FLOAT32         shift and go to state 24
    FLOAT64         shift and go to state 25
    BYTE            shift and go to state 26
    WFLOAT          shift and go to state 27
    WSTRING         shift and go to state 28
    WINT            shift and go to state 29
    BOOL            shift and go to state 30

    data_types                     shift and go to state 432

state 400

    (202) call_func -> ID . LPAREN list_params RPAREN
    (203) call_func -> ID . LPAREN RPAREN
    (243) array_var -> ID . LCORCHE index RCORCHE
    (249) map_var -> ID . LCORCHE key RCORCHE
    (157) slice_var -> ID . LCORCHE index_s RCORCHE

    LPAREN          shift and go to state 146
    LCORCHE         shift and go to state 196


state 401

    (121) single -> VAR ID data_types EQUAL funciones .

    COLON           reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    PRINT           reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    SCAN            reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    FOR             reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    CONST           reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    ID              reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    APPEND          reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    LEN             reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    COPY            reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    DELETE          reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    IF              reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    ELSE            reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    TYPE            reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    SWITCH          reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    VAR             reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    FUNC            reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    INTEGER         reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    FLOAT           reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    NOT             reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    RLLAVE          reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    RETURN          reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    STRING          reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    TRUE            reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    FALSE           reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    INT32           reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    INT64           reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    FLOAT32         reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    FLOAT64         reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    BYTE            reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    WFLOAT          reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    WSTRING         reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    WINT            reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    BOOL            reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    DEFAULT         reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)
    CASE            reduce using rule 121 (single -> VAR ID data_types EQUAL funciones .)


state 402

    (122) single -> VAR ID data_types EQUAL data_structure .

    COLON           reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    PRINT           reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    SCAN            reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    FOR             reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    CONST           reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    ID              reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    APPEND          reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    LEN             reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    COPY            reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    DELETE          reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    IF              reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    ELSE            reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    TYPE            reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    SWITCH          reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    VAR             reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    FUNC            reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    INTEGER         reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    FLOAT           reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    NOT             reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    RLLAVE          reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    RETURN          reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    STRING          reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    TRUE            reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    FALSE           reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    INT32           reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    INT64           reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    FLOAT32         reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    FLOAT64         reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    BYTE            reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    WFLOAT          reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    WSTRING         reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    WINT            reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    BOOL            reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    DEFAULT         reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)
    CASE            reduce using rule 122 (single -> VAR ID data_types EQUAL data_structure .)


state 403

    (239) array_declaration -> VAR ID EQUAL LCORCHE capacity . RCORCHE data_types arr_content

    RCORCHE         shift and go to state 433


state 404

    (148) slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE . data_types arr_content
    (56) data_types -> . INT32
    (57) data_types -> . INT64
    (58) data_types -> . FLOAT32
    (59) data_types -> . FLOAT64
    (60) data_types -> . BYTE
    (61) data_types -> . WFLOAT
    (62) data_types -> . WSTRING
    (63) data_types -> . WINT
    (64) data_types -> . BOOL

    INT32           shift and go to state 22
    INT64           shift and go to state 23
    FLOAT32         shift and go to state 24
    FLOAT64         shift and go to state 25
    BYTE            shift and go to state 26
    WFLOAT          shift and go to state 27
    WSTRING         shift and go to state 28
    WINT            shift and go to state 29
    BOOL            shift and go to state 30

    data_types                     shift and go to state 434

state 405

    (119) more -> ID COMA . more
    (118) more -> . ID
    (119) more -> . ID COMA more
    (236) more -> . cases
    (237) more -> . DEFAULT POINTS codigo
    (234) cases -> . CASE values POINTS codigo
    (235) cases -> . CASE values POINTS codigo more

    ID              shift and go to state 325
    DEFAULT         shift and go to state 328
    CASE            shift and go to state 315

    more                           shift and go to state 435
    cases                          shift and go to state 327

state 406

    (237) more -> DEFAULT POINTS . codigo
    (7) codigo -> . rule
    (8) codigo -> . more_rules
    (10) rule -> . impresion COLON
    (11) rule -> . impresion
    (12) rule -> . scan_func COLON
    (13) rule -> . scan_func
    (14) rule -> . expression COLON
    (15) rule -> . expression
    (16) rule -> . cicloFor
    (17) rule -> . comparison
    (18) rule -> . logic_operation
    (19) rule -> . decVar COLON
    (20) rule -> . decVar
    (21) rule -> . decConst COLON
    (22) rule -> . decConst
    (23) rule -> . var_asignation
    (24) rule -> . var_asignation COLON
    (25) rule -> . funciones
    (26) rule -> . funciones COLON
    (27) rule -> . SenIF
    (28) rule -> . SenElseIF
    (29) rule -> . SenElse
    (30) rule -> . SenStruct
    (31) rule -> . cStruct
    (32) rule -> . switch_statement
    (33) rule -> . array_declaration COLON
    (34) rule -> . array_declaration
    (35) rule -> . array_var COLON
    (36) rule -> . array_var
    (37) rule -> . array_assignment COLON
    (38) rule -> . array_assignment
    (39) rule -> . slice_declaration COLON
    (40) rule -> . slice_declaration
    (41) rule -> . slice_var COLON
    (42) rule -> . slice_var
    (43) rule -> . slice_assignment COLON
    (44) rule -> . slice_assignment
    (45) rule -> . map_declaration COLON
    (46) rule -> . map_declaration
    (47) rule -> . map_assignment COLON
    (48) rule -> . map_assignment
    (49) rule -> . func_declaration
    (50) rule -> . main_func
    (9) more_rules -> . rule codigo
    (173) impresion -> . PRINT LPAREN something RPAREN
    (174) impresion -> . PRINT LPAREN error RPAREN
    (201) scan_func -> . SCAN LPAREN POINTER RPAREN
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (166) cicloFor -> . FOR comparison LLLAVE codigo RLLAVE
    (167) cicloFor -> . FOR logic_operation LLLAVE codigo RLLAVE
    (168) cicloFor -> . FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (112) decVar -> . static
    (113) decVar -> . dynamic
    (109) decConst -> . CONST ID data_type_and_value
    (110) decConst -> . CONST ID EQUAL ID
    (111) decConst -> . CONST ID EQUAL data_structure
    (77) var_asignation -> . ID EQUAL any
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (88) SenIF -> . IF comparison LLLAVE codigo RLLAVE
    (89) SenIF -> . IF logic_operation LLLAVE codigo RLLAVE
    (90) SenIF -> . IF TRUE LLLAVE codigo RLLAVE
    (91) SenIF -> . IF FALSE LLLAVE codigo RLLAVE
    (92) SenElseIF -> . ELSE IF comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> . ELSE IF logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> . ELSE IF TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> . ELSE IF FALSE LLLAVE codigo RLLAVE
    (96) SenElse -> . ELSE LLLAVE codigo RLLAVE
    (97) SenStruct -> . TYPE ID STRUCT LLLAVE declaration RLLAVE
    (101) cStruct -> . ID DEQUAL ID LLLAVE asignaciones RLLAVE
    (233) switch_statement -> . SWITCH ID LLLAVE cases RLLAVE
    (238) array_declaration -> . VAR ID LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> . VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (243) array_var -> . ID LCORCHE index RCORCHE
    (247) array_assignment -> . array_var EQUAL something
    (147) slice_declaration -> . VAR ID LCORCHE RCORCHE data_types
    (148) slice_declaration -> . VAR ID EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> . VAR ID EQUAL funM
    (150) slice_declaration -> . ID DEQUAL funM
    (151) slice_declaration -> . ID DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (161) slice_assignment -> . slice_var EQUAL something_s
    (248) map_declaration -> . VAR ID LCORCHE data_types RCORCHE data_types
    (253) map_assignment -> . map_var EQUAL something
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (114) static -> . single
    (115) static -> . multiple
    (124) dynamic -> . ID DEQUAL algo
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (249) map_var -> . ID LCORCHE key RCORCHE
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (120) single -> . VAR ID data_types
    (121) single -> . VAR ID data_types EQUAL funciones
    (122) single -> . VAR ID data_types EQUAL data_structure
    (123) single -> . VAR ID data_type_and_value
    (116) multiple -> . list_var data_types
    (117) list_var -> . VAR ID COMA more

    PRINT           shift and go to state 62
    SCAN            shift and go to state 63
    FOR             shift and go to state 65
    CONST           shift and go to state 71
    ID              shift and go to state 72
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    IF              shift and go to state 79
    ELSE            shift and go to state 80
    TYPE            shift and go to state 81
    SWITCH          shift and go to state 82
    VAR             shift and go to state 83
    FUNC            shift and go to state 32
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    NOT             shift and go to state 87

    codigo                         shift and go to state 436
    rule                           shift and go to state 34
    more_rules                     shift and go to state 35
    impresion                      shift and go to state 36
    scan_func                      shift and go to state 37
    expression                     shift and go to state 38
    cicloFor                       shift and go to state 39
    comparison                     shift and go to state 40
    logic_operation                shift and go to state 41
    decVar                         shift and go to state 42
    decConst                       shift and go to state 43
    var_asignation                 shift and go to state 44
    funciones                      shift and go to state 45
    SenIF                          shift and go to state 46
    SenElseIF                      shift and go to state 47
    SenElse                        shift and go to state 48
    SenStruct                      shift and go to state 49
    cStruct                        shift and go to state 50
    switch_statement               shift and go to state 51
    array_declaration              shift and go to state 52
    array_var                      shift and go to state 53
    array_assignment               shift and go to state 54
    slice_declaration              shift and go to state 55
    slice_var                      shift and go to state 56
    slice_assignment               shift and go to state 57
    map_declaration                shift and go to state 58
    map_assignment                 shift and go to state 59
    func_declaration               shift and go to state 60
    main_func                      shift and go to state 61
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    static                         shift and go to state 69
    dynamic                        shift and go to state 70
    data_structure                 shift and go to state 73
    call_func                      shift and go to state 78
    map_var                        shift and go to state 84
    single                         shift and go to state 88
    multiple                       shift and go to state 89
    list_var                       shift and go to state 90

state 407

    (261) retorno -> ID .
    (243) array_var -> ID . LCORCHE index RCORCHE
    (249) map_var -> ID . LCORCHE key RCORCHE
    (157) slice_var -> ID . LCORCHE index_s RCORCHE
    (179) something_ex -> ID .
    (139) value -> ID .
    (195) logic_value -> ID .
    (202) call_func -> ID . LPAREN list_params RPAREN
    (203) call_func -> ID . LPAREN RPAREN

  ! reduce/reduce conflict for RLLAVE resolved using rule 179 (something_ex -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 179 (something_ex -> ID .)
  ! reduce/reduce conflict for GREATER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for GREATER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for EQUAL_COMPARE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MOD resolved using rule 139 (value -> ID .)
    LCORCHE         shift and go to state 196
    RLLAVE          reduce using rule 179 (something_ex -> ID .)
    COLON           reduce using rule 179 (something_ex -> ID .)
    GREATER         reduce using rule 139 (value -> ID .)
    SMALLER         reduce using rule 139 (value -> ID .)
    GREATER_OR_EQUAL reduce using rule 139 (value -> ID .)
    SMALLER_OR_EQUAL reduce using rule 139 (value -> ID .)
    EQUAL_COMPARE   reduce using rule 139 (value -> ID .)
    NOT_EQUAL       reduce using rule 139 (value -> ID .)
    PLUS            reduce using rule 139 (value -> ID .)
    TIMES           reduce using rule 139 (value -> ID .)
    DIVIDE          reduce using rule 139 (value -> ID .)
    MINUS           reduce using rule 139 (value -> ID .)
    MOD             reduce using rule 139 (value -> ID .)
    AND             reduce using rule 195 (logic_value -> ID .)
    OR              reduce using rule 195 (logic_value -> ID .)
    LPAREN          shift and go to state 146

  ! RLLAVE          [ reduce using rule 261 (retorno -> ID .) ]
  ! COLON           [ reduce using rule 261 (retorno -> ID .) ]
  ! GREATER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! GREATER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! EQUAL_COMPARE   [ reduce using rule 179 (something_ex -> ID .) ]
  ! NOT_EQUAL       [ reduce using rule 179 (something_ex -> ID .) ]
  ! PLUS            [ reduce using rule 179 (something_ex -> ID .) ]
  ! TIMES           [ reduce using rule 179 (something_ex -> ID .) ]
  ! DIVIDE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! MINUS           [ reduce using rule 179 (something_ex -> ID .) ]
  ! MOD             [ reduce using rule 179 (something_ex -> ID .) ]


state 408

    (254) func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno . RLLAVE

    RLLAVE          shift and go to state 437


state 409

    (255) func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .

    FUNC            reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    $end            reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    PRINT           reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    SCAN            reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    FOR             reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    CONST           reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    ID              reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    APPEND          reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    LEN             reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    COPY            reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    DELETE          reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    IF              reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    ELSE            reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    TYPE            reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    SWITCH          reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    VAR             reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    INTEGER         reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    FLOAT           reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    NOT             reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    RLLAVE          reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    RETURN          reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    STRING          reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    TRUE            reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    FALSE           reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    INT32           reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    INT64           reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    FLOAT32         reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    FLOAT64         reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    BYTE            reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    WFLOAT          reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    WSTRING         reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    WINT            reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    BOOL            reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    DEFAULT         reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)
    CASE            reduce using rule 255 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE .)


state 410

    (257) body -> codigo return_value .

    RLLAVE          reduce using rule 257 (body -> codigo return_value .)


state 411

    (259) return_value -> retorno COLON .

    RLLAVE          reduce using rule 259 (return_value -> retorno COLON .)


state 412

    (168) cicloFor -> FOR decVarOne COLON comparison COLON incre . LLLAVE codigo RLLAVE

    LLLAVE          shift and go to state 438


state 413

    (169) incre -> ID . INCREASE
    (170) incre -> ID . DECREASE

    INCREASE        shift and go to state 439
    DECREASE        shift and go to state 440


state 414

    (102) asignaciones -> ID POINTS . valor
    (103) asignaciones -> ID POINTS . valor COMA asignaciones
    (104) valor -> . ID
    (105) valor -> . INTEGER
    (106) valor -> . TRUE
    (107) valor -> . FALSE
    (108) valor -> . STRING

    ID              shift and go to state 441
    INTEGER         shift and go to state 443
    TRUE            shift and go to state 444
    FALSE           shift and go to state 445
    STRING          shift and go to state 446

    valor                          shift and go to state 442

state 415

    (101) cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .

    PRINT           reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    SCAN            reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    FOR             reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    CONST           reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    ID              reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    APPEND          reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    LEN             reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    COPY            reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    DELETE          reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    IF              reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    ELSE            reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    TYPE            reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    SWITCH          reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    VAR             reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    FUNC            reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    INTEGER         reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    FLOAT           reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    NOT             reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    RLLAVE          reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    RETURN          reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    STRING          reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    TRUE            reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    FALSE           reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    INT32           reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    INT64           reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    FLOAT32         reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    FLOAT64         reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    BYTE            reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    WFLOAT          reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    WSTRING         reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    WINT            reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    BOOL            reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    DEFAULT         reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)
    CASE            reduce using rule 101 (cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE .)


state 416

    (151) slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .

    COLON           reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    PRINT           reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    SCAN            reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    FOR             reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    CONST           reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    ID              reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    APPEND          reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    LEN             reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    COPY            reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    DELETE          reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    IF              reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    ELSE            reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    TYPE            reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    SWITCH          reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    VAR             reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    FUNC            reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    INTEGER         reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    FLOAT           reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    NOT             reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    RLLAVE          reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    RETURN          reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    STRING          reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    TRUE            reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    FALSE           reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    INT32           reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    INT64           reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    FLOAT32         reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    FLOAT64         reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    BYTE            reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    WFLOAT          reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    WSTRING         reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    WINT            reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    BOOL            reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    DEFAULT         reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)
    CASE            reduce using rule 151 (slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content .)


state 417

    (68) arr_content -> LLLAVE . items COMA more_items RLLAVE
    (69) arr_content -> LLLAVE . items RLLAVE
    (72) items -> . values
    (73) items -> . operations
    (51) values -> . STRING
    (52) values -> . INTEGER
    (53) values -> . FLOAT
    (54) values -> . TRUE
    (55) values -> . FALSE
    (65) operations -> . expression
    (66) operations -> . comparison
    (67) operations -> . logic_operation
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    STRING          shift and go to state 174
    INTEGER         shift and go to state 175
    FLOAT           shift and go to state 176
    TRUE            shift and go to state 177
    FALSE           shift and go to state 178
    ID              shift and go to state 450
    NOT             shift and go to state 87
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    items                          shift and go to state 447
    values                         shift and go to state 448
    operations                     shift and go to state 449
    expression                     shift and go to state 179
    comparison                     shift and go to state 180
    logic_operation                shift and go to state 181
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 418

    (152) funM -> MAKE LPAREN LCORCHE RCORCHE . data_types COMA cap RPAREN
    (153) funM -> MAKE LPAREN LCORCHE RCORCHE . data_types COMA cap COMA cap RPAREN
    (56) data_types -> . INT32
    (57) data_types -> . INT64
    (58) data_types -> . FLOAT32
    (59) data_types -> . FLOAT64
    (60) data_types -> . BYTE
    (61) data_types -> . WFLOAT
    (62) data_types -> . WSTRING
    (63) data_types -> . WINT
    (64) data_types -> . BOOL

    INT32           shift and go to state 22
    INT64           shift and go to state 23
    FLOAT32         shift and go to state 24
    FLOAT64         shift and go to state 25
    BYTE            shift and go to state 26
    WFLOAT          shift and go to state 27
    WSTRING         shift and go to state 28
    WINT            shift and go to state 29
    BOOL            shift and go to state 30

    data_types                     shift and go to state 451

state 419

    (131) funciones -> APPEND LPAREN ID COMA ID RPAREN .

    COLON           reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    PRINT           reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    SCAN            reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    FOR             reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    CONST           reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    ID              reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    APPEND          reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    LEN             reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    COPY            reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    DELETE          reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    IF              reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    ELSE            reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    TYPE            reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    SWITCH          reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    VAR             reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    FUNC            reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    INTEGER         reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    FLOAT           reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    NOT             reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    RLLAVE          reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    GREATER         reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    SMALLER         reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    GREATER_OR_EQUAL reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    SMALLER_OR_EQUAL reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    EQUAL_COMPARE   reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    NOT_EQUAL       reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    PLUS            reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    TIMES           reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    DIVIDE          reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    MINUS           reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    MOD             reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    RETURN          reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    STRING          reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    TRUE            reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    FALSE           reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    INT32           reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    INT64           reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    FLOAT32         reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    FLOAT64         reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    BYTE            reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    WFLOAT          reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    WSTRING         reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    WINT            reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    BOOL            reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    DEFAULT         reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    CASE            reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    RPAREN          reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    AND             reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    OR              reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    LLLAVE          reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    RCORCHE         reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)
    COMA            reduce using rule 131 (funciones -> APPEND LPAREN ID COMA ID RPAREN .)


state 420

    (130) funciones -> APPEND LPAREN ID COMA values RPAREN .

    COLON           reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    PRINT           reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    SCAN            reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    FOR             reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    CONST           reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    ID              reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    APPEND          reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    LEN             reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    COPY            reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    DELETE          reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    IF              reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    ELSE            reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    TYPE            reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    SWITCH          reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    VAR             reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    FUNC            reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    INTEGER         reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    FLOAT           reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    NOT             reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    RLLAVE          reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    GREATER         reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    SMALLER         reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    GREATER_OR_EQUAL reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    SMALLER_OR_EQUAL reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    EQUAL_COMPARE   reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    NOT_EQUAL       reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    PLUS            reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    TIMES           reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    DIVIDE          reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    MINUS           reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    MOD             reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    RETURN          reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    STRING          reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    TRUE            reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    FALSE           reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    INT32           reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    INT64           reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    FLOAT32         reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    FLOAT64         reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    BYTE            reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    WFLOAT          reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    WSTRING         reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    WINT            reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    BOOL            reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    DEFAULT         reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    CASE            reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    RPAREN          reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    AND             reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    OR              reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    LLLAVE          reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    RCORCHE         reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)
    COMA            reduce using rule 130 (funciones -> APPEND LPAREN ID COMA values RPAREN .)


state 421

    (133) funciones -> COPY LPAREN ID COMA ID RPAREN .

    COLON           reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    PRINT           reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    SCAN            reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    FOR             reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    CONST           reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    ID              reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    APPEND          reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    LEN             reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    COPY            reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    DELETE          reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    IF              reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    ELSE            reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    TYPE            reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    SWITCH          reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    VAR             reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    FUNC            reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    INTEGER         reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    FLOAT           reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    NOT             reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    RLLAVE          reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    GREATER         reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    SMALLER         reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    GREATER_OR_EQUAL reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    SMALLER_OR_EQUAL reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    EQUAL_COMPARE   reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    NOT_EQUAL       reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    PLUS            reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    TIMES           reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    DIVIDE          reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    MINUS           reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    MOD             reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    RETURN          reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    STRING          reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    TRUE            reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    FALSE           reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    INT32           reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    INT64           reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    FLOAT32         reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    FLOAT64         reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    BYTE            reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    WFLOAT          reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    WSTRING         reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    WINT            reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    BOOL            reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    DEFAULT         reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    CASE            reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    RPAREN          reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    AND             reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    OR              reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    LLLAVE          reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    RCORCHE         reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)
    COMA            reduce using rule 133 (funciones -> COPY LPAREN ID COMA ID RPAREN .)


state 422

    (134) funciones -> DELETE LPAREN ID COMA clave RPAREN .

    COLON           reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    PRINT           reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    SCAN            reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    FOR             reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    CONST           reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    ID              reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    APPEND          reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    LEN             reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    COPY            reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    DELETE          reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    IF              reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    ELSE            reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    TYPE            reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    SWITCH          reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    VAR             reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    FUNC            reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    INTEGER         reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    FLOAT           reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    NOT             reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    RLLAVE          reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    GREATER         reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    SMALLER         reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    GREATER_OR_EQUAL reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    SMALLER_OR_EQUAL reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    EQUAL_COMPARE   reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    NOT_EQUAL       reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    PLUS            reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    TIMES           reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    DIVIDE          reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    MINUS           reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    MOD             reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    RETURN          reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    STRING          reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    TRUE            reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    FALSE           reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    INT32           reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    INT64           reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    FLOAT32         reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    FLOAT64         reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    BYTE            reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    WFLOAT          reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    WSTRING         reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    WINT            reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    BOOL            reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    DEFAULT         reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    CASE            reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    RPAREN          reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    AND             reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    OR              reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    LLLAVE          reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    RCORCHE         reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)
    COMA            reduce using rule 134 (funciones -> DELETE LPAREN ID COMA clave RPAREN .)


state 423

    (92) SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .

    PRINT           reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    SCAN            reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    FOR             reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    CONST           reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    ID              reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    APPEND          reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    LEN             reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    COPY            reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    DELETE          reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    IF              reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    ELSE            reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    TYPE            reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    SWITCH          reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    VAR             reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    FUNC            reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    INTEGER         reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    FLOAT           reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    NOT             reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    RLLAVE          reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    RETURN          reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    STRING          reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    TRUE            reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    FALSE           reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    INT32           reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    INT64           reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    FLOAT32         reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    FLOAT64         reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    BYTE            reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    WFLOAT          reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    WSTRING         reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    WINT            reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    BOOL            reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    DEFAULT         reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)
    CASE            reduce using rule 92 (SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE .)


state 424

    (93) SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .

    PRINT           reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    SCAN            reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    FOR             reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    CONST           reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    ID              reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    APPEND          reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    LEN             reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    COPY            reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    DELETE          reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    IF              reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    ELSE            reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    TYPE            reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    SWITCH          reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    VAR             reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    FUNC            reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    INTEGER         reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    FLOAT           reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    NOT             reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    RLLAVE          reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    RETURN          reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    STRING          reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    TRUE            reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    FALSE           reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    INT32           reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    INT64           reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    FLOAT32         reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    FLOAT64         reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    BYTE            reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    WFLOAT          reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    WSTRING         reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    WINT            reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    BOOL            reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    DEFAULT         reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)
    CASE            reduce using rule 93 (SenElseIF -> ELSE IF logic_operation LLLAVE codigo RLLAVE .)


state 425

    (94) SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .

    PRINT           reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    SCAN            reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    FOR             reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    CONST           reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    ID              reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    APPEND          reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    LEN             reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    COPY            reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    DELETE          reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    IF              reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    ELSE            reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    TYPE            reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    SWITCH          reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    VAR             reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    FUNC            reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    INTEGER         reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    FLOAT           reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    NOT             reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    RLLAVE          reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    RETURN          reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    STRING          reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    TRUE            reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    FALSE           reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    INT32           reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    INT64           reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    FLOAT32         reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    FLOAT64         reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    BYTE            reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    WFLOAT          reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    WSTRING         reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    WINT            reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    BOOL            reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    DEFAULT         reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)
    CASE            reduce using rule 94 (SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE .)


state 426

    (95) SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .

    PRINT           reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    SCAN            reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    FOR             reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    CONST           reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    ID              reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    APPEND          reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    LEN             reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    COPY            reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    DELETE          reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    IF              reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    ELSE            reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    TYPE            reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    SWITCH          reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    VAR             reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    FUNC            reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    INTEGER         reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    FLOAT           reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    NOT             reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    RLLAVE          reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    RETURN          reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    STRING          reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    TRUE            reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    FALSE           reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    INT32           reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    INT64           reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    FLOAT32         reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    FLOAT64         reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    BYTE            reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    WFLOAT          reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    WSTRING         reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    WINT            reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    BOOL            reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    DEFAULT         reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)
    CASE            reduce using rule 95 (SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE .)


state 427

    (97) SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .

    PRINT           reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    SCAN            reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    FOR             reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    CONST           reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    ID              reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    APPEND          reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    LEN             reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    COPY            reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    DELETE          reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    IF              reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    ELSE            reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    TYPE            reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    SWITCH          reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    VAR             reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    FUNC            reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    INTEGER         reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    FLOAT           reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    NOT             reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    RLLAVE          reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    RETURN          reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    STRING          reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    TRUE            reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    FALSE           reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    INT32           reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    INT64           reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    FLOAT32         reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    FLOAT64         reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    BYTE            reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    WFLOAT          reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    WSTRING         reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    WINT            reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    BOOL            reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    DEFAULT         reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)
    CASE            reduce using rule 97 (SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE .)


state 428

    (99) declaration -> declaration variable . data_types
    (56) data_types -> . INT32
    (57) data_types -> . INT64
    (58) data_types -> . FLOAT32
    (59) data_types -> . FLOAT64
    (60) data_types -> . BYTE
    (61) data_types -> . WFLOAT
    (62) data_types -> . WSTRING
    (63) data_types -> . WINT
    (64) data_types -> . BOOL

    INT32           shift and go to state 22
    INT64           shift and go to state 23
    FLOAT32         shift and go to state 24
    FLOAT64         shift and go to state 25
    BYTE            shift and go to state 26
    WFLOAT          shift and go to state 27
    WSTRING         shift and go to state 28
    WINT            shift and go to state 29
    BOOL            shift and go to state 30

    data_types                     shift and go to state 452

state 429

    (98) declaration -> variable data_types .

    RLLAVE          reduce using rule 98 (declaration -> variable data_types .)
    ID              reduce using rule 98 (declaration -> variable data_types .)


state 430

    (234) cases -> CASE values POINTS . codigo
    (235) cases -> CASE values POINTS . codigo more
    (7) codigo -> . rule
    (8) codigo -> . more_rules
    (10) rule -> . impresion COLON
    (11) rule -> . impresion
    (12) rule -> . scan_func COLON
    (13) rule -> . scan_func
    (14) rule -> . expression COLON
    (15) rule -> . expression
    (16) rule -> . cicloFor
    (17) rule -> . comparison
    (18) rule -> . logic_operation
    (19) rule -> . decVar COLON
    (20) rule -> . decVar
    (21) rule -> . decConst COLON
    (22) rule -> . decConst
    (23) rule -> . var_asignation
    (24) rule -> . var_asignation COLON
    (25) rule -> . funciones
    (26) rule -> . funciones COLON
    (27) rule -> . SenIF
    (28) rule -> . SenElseIF
    (29) rule -> . SenElse
    (30) rule -> . SenStruct
    (31) rule -> . cStruct
    (32) rule -> . switch_statement
    (33) rule -> . array_declaration COLON
    (34) rule -> . array_declaration
    (35) rule -> . array_var COLON
    (36) rule -> . array_var
    (37) rule -> . array_assignment COLON
    (38) rule -> . array_assignment
    (39) rule -> . slice_declaration COLON
    (40) rule -> . slice_declaration
    (41) rule -> . slice_var COLON
    (42) rule -> . slice_var
    (43) rule -> . slice_assignment COLON
    (44) rule -> . slice_assignment
    (45) rule -> . map_declaration COLON
    (46) rule -> . map_declaration
    (47) rule -> . map_assignment COLON
    (48) rule -> . map_assignment
    (49) rule -> . func_declaration
    (50) rule -> . main_func
    (9) more_rules -> . rule codigo
    (173) impresion -> . PRINT LPAREN something RPAREN
    (174) impresion -> . PRINT LPAREN error RPAREN
    (201) scan_func -> . SCAN LPAREN POINTER RPAREN
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (166) cicloFor -> . FOR comparison LLLAVE codigo RLLAVE
    (167) cicloFor -> . FOR logic_operation LLLAVE codigo RLLAVE
    (168) cicloFor -> . FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (112) decVar -> . static
    (113) decVar -> . dynamic
    (109) decConst -> . CONST ID data_type_and_value
    (110) decConst -> . CONST ID EQUAL ID
    (111) decConst -> . CONST ID EQUAL data_structure
    (77) var_asignation -> . ID EQUAL any
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (88) SenIF -> . IF comparison LLLAVE codigo RLLAVE
    (89) SenIF -> . IF logic_operation LLLAVE codigo RLLAVE
    (90) SenIF -> . IF TRUE LLLAVE codigo RLLAVE
    (91) SenIF -> . IF FALSE LLLAVE codigo RLLAVE
    (92) SenElseIF -> . ELSE IF comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> . ELSE IF logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> . ELSE IF TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> . ELSE IF FALSE LLLAVE codigo RLLAVE
    (96) SenElse -> . ELSE LLLAVE codigo RLLAVE
    (97) SenStruct -> . TYPE ID STRUCT LLLAVE declaration RLLAVE
    (101) cStruct -> . ID DEQUAL ID LLLAVE asignaciones RLLAVE
    (233) switch_statement -> . SWITCH ID LLLAVE cases RLLAVE
    (238) array_declaration -> . VAR ID LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> . VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (243) array_var -> . ID LCORCHE index RCORCHE
    (247) array_assignment -> . array_var EQUAL something
    (147) slice_declaration -> . VAR ID LCORCHE RCORCHE data_types
    (148) slice_declaration -> . VAR ID EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> . VAR ID EQUAL funM
    (150) slice_declaration -> . ID DEQUAL funM
    (151) slice_declaration -> . ID DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (161) slice_assignment -> . slice_var EQUAL something_s
    (248) map_declaration -> . VAR ID LCORCHE data_types RCORCHE data_types
    (253) map_assignment -> . map_var EQUAL something
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (114) static -> . single
    (115) static -> . multiple
    (124) dynamic -> . ID DEQUAL algo
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (249) map_var -> . ID LCORCHE key RCORCHE
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (120) single -> . VAR ID data_types
    (121) single -> . VAR ID data_types EQUAL funciones
    (122) single -> . VAR ID data_types EQUAL data_structure
    (123) single -> . VAR ID data_type_and_value
    (116) multiple -> . list_var data_types
    (117) list_var -> . VAR ID COMA more

    PRINT           shift and go to state 62
    SCAN            shift and go to state 63
    FOR             shift and go to state 65
    CONST           shift and go to state 71
    ID              shift and go to state 72
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    IF              shift and go to state 79
    ELSE            shift and go to state 80
    TYPE            shift and go to state 81
    SWITCH          shift and go to state 82
    VAR             shift and go to state 83
    FUNC            shift and go to state 32
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    NOT             shift and go to state 87

    codigo                         shift and go to state 453
    rule                           shift and go to state 34
    more_rules                     shift and go to state 35
    impresion                      shift and go to state 36
    scan_func                      shift and go to state 37
    expression                     shift and go to state 38
    cicloFor                       shift and go to state 39
    comparison                     shift and go to state 40
    logic_operation                shift and go to state 41
    decVar                         shift and go to state 42
    decConst                       shift and go to state 43
    var_asignation                 shift and go to state 44
    funciones                      shift and go to state 45
    SenIF                          shift and go to state 46
    SenElseIF                      shift and go to state 47
    SenElse                        shift and go to state 48
    SenStruct                      shift and go to state 49
    cStruct                        shift and go to state 50
    switch_statement               shift and go to state 51
    array_declaration              shift and go to state 52
    array_var                      shift and go to state 53
    array_assignment               shift and go to state 54
    slice_declaration              shift and go to state 55
    slice_var                      shift and go to state 56
    slice_assignment               shift and go to state 57
    map_declaration                shift and go to state 58
    map_assignment                 shift and go to state 59
    func_declaration               shift and go to state 60
    main_func                      shift and go to state 61
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    static                         shift and go to state 69
    dynamic                        shift and go to state 70
    data_structure                 shift and go to state 73
    call_func                      shift and go to state 78
    map_var                        shift and go to state 84
    single                         shift and go to state 88
    multiple                       shift and go to state 89
    list_var                       shift and go to state 90

state 431

    (238) array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .

    COLON           reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    PRINT           reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    SCAN            reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    FOR             reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    CONST           reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    ID              reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    APPEND          reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    LEN             reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    COPY            reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    DELETE          reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    IF              reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    ELSE            reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    TYPE            reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    SWITCH          reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    VAR             reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    FUNC            reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    INTEGER         reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    FLOAT           reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    NOT             reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    RLLAVE          reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    RETURN          reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    STRING          reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    TRUE            reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    FALSE           reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    INT32           reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    INT64           reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    FLOAT32         reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    FLOAT64         reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    BYTE            reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    WFLOAT          reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    WSTRING         reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    WINT            reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    BOOL            reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    DEFAULT         reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)
    CASE            reduce using rule 238 (array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types .)


state 432

    (248) map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .

    COLON           reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    PRINT           reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    SCAN            reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    FOR             reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    CONST           reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    ID              reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    APPEND          reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    LEN             reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    COPY            reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    DELETE          reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    IF              reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    ELSE            reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    TYPE            reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    SWITCH          reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    VAR             reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    FUNC            reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    INTEGER         reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    FLOAT           reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    NOT             reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    RLLAVE          reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    RETURN          reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    STRING          reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    TRUE            reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    FALSE           reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    INT32           reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    INT64           reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    FLOAT32         reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    FLOAT64         reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    BYTE            reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    WFLOAT          reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    WSTRING         reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    WINT            reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    BOOL            reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    DEFAULT         reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)
    CASE            reduce using rule 248 (map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types .)


state 433

    (239) array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE . data_types arr_content
    (56) data_types -> . INT32
    (57) data_types -> . INT64
    (58) data_types -> . FLOAT32
    (59) data_types -> . FLOAT64
    (60) data_types -> . BYTE
    (61) data_types -> . WFLOAT
    (62) data_types -> . WSTRING
    (63) data_types -> . WINT
    (64) data_types -> . BOOL

    INT32           shift and go to state 22
    INT64           shift and go to state 23
    FLOAT32         shift and go to state 24
    FLOAT64         shift and go to state 25
    BYTE            shift and go to state 26
    WFLOAT          shift and go to state 27
    WSTRING         shift and go to state 28
    WINT            shift and go to state 29
    BOOL            shift and go to state 30

    data_types                     shift and go to state 454

state 434

    (148) slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types . arr_content
    (68) arr_content -> . LLLAVE items COMA more_items RLLAVE
    (69) arr_content -> . LLLAVE items RLLAVE

    LLLAVE          shift and go to state 417

    arr_content                    shift and go to state 455

state 435

    (119) more -> ID COMA more .

    INT32           reduce using rule 119 (more -> ID COMA more .)
    INT64           reduce using rule 119 (more -> ID COMA more .)
    FLOAT32         reduce using rule 119 (more -> ID COMA more .)
    FLOAT64         reduce using rule 119 (more -> ID COMA more .)
    BYTE            reduce using rule 119 (more -> ID COMA more .)
    WFLOAT          reduce using rule 119 (more -> ID COMA more .)
    WSTRING         reduce using rule 119 (more -> ID COMA more .)
    WINT            reduce using rule 119 (more -> ID COMA more .)
    BOOL            reduce using rule 119 (more -> ID COMA more .)
    RLLAVE          reduce using rule 119 (more -> ID COMA more .)


state 436

    (237) more -> DEFAULT POINTS codigo .

    INT32           reduce using rule 237 (more -> DEFAULT POINTS codigo .)
    INT64           reduce using rule 237 (more -> DEFAULT POINTS codigo .)
    FLOAT32         reduce using rule 237 (more -> DEFAULT POINTS codigo .)
    FLOAT64         reduce using rule 237 (more -> DEFAULT POINTS codigo .)
    BYTE            reduce using rule 237 (more -> DEFAULT POINTS codigo .)
    WFLOAT          reduce using rule 237 (more -> DEFAULT POINTS codigo .)
    WSTRING         reduce using rule 237 (more -> DEFAULT POINTS codigo .)
    WINT            reduce using rule 237 (more -> DEFAULT POINTS codigo .)
    BOOL            reduce using rule 237 (more -> DEFAULT POINTS codigo .)
    RLLAVE          reduce using rule 237 (more -> DEFAULT POINTS codigo .)


state 437

    (254) func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .

    FUNC            reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    $end            reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    PRINT           reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    SCAN            reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    FOR             reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    CONST           reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    ID              reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    APPEND          reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    LEN             reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    COPY            reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    DELETE          reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    IF              reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    ELSE            reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    TYPE            reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    SWITCH          reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    VAR             reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    INTEGER         reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    FLOAT           reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    NOT             reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    RLLAVE          reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    RETURN          reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    STRING          reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    TRUE            reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    FALSE           reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    INT32           reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    INT64           reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    FLOAT32         reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    FLOAT64         reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    BYTE            reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    WFLOAT          reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    WSTRING         reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    WINT            reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    BOOL            reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    DEFAULT         reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)
    CASE            reduce using rule 254 (func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE .)


state 438

    (168) cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE . codigo RLLAVE
    (7) codigo -> . rule
    (8) codigo -> . more_rules
    (10) rule -> . impresion COLON
    (11) rule -> . impresion
    (12) rule -> . scan_func COLON
    (13) rule -> . scan_func
    (14) rule -> . expression COLON
    (15) rule -> . expression
    (16) rule -> . cicloFor
    (17) rule -> . comparison
    (18) rule -> . logic_operation
    (19) rule -> . decVar COLON
    (20) rule -> . decVar
    (21) rule -> . decConst COLON
    (22) rule -> . decConst
    (23) rule -> . var_asignation
    (24) rule -> . var_asignation COLON
    (25) rule -> . funciones
    (26) rule -> . funciones COLON
    (27) rule -> . SenIF
    (28) rule -> . SenElseIF
    (29) rule -> . SenElse
    (30) rule -> . SenStruct
    (31) rule -> . cStruct
    (32) rule -> . switch_statement
    (33) rule -> . array_declaration COLON
    (34) rule -> . array_declaration
    (35) rule -> . array_var COLON
    (36) rule -> . array_var
    (37) rule -> . array_assignment COLON
    (38) rule -> . array_assignment
    (39) rule -> . slice_declaration COLON
    (40) rule -> . slice_declaration
    (41) rule -> . slice_var COLON
    (42) rule -> . slice_var
    (43) rule -> . slice_assignment COLON
    (44) rule -> . slice_assignment
    (45) rule -> . map_declaration COLON
    (46) rule -> . map_declaration
    (47) rule -> . map_assignment COLON
    (48) rule -> . map_assignment
    (49) rule -> . func_declaration
    (50) rule -> . main_func
    (9) more_rules -> . rule codigo
    (173) impresion -> . PRINT LPAREN something RPAREN
    (174) impresion -> . PRINT LPAREN error RPAREN
    (201) scan_func -> . SCAN LPAREN POINTER RPAREN
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (166) cicloFor -> . FOR comparison LLLAVE codigo RLLAVE
    (167) cicloFor -> . FOR logic_operation LLLAVE codigo RLLAVE
    (168) cicloFor -> . FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (112) decVar -> . static
    (113) decVar -> . dynamic
    (109) decConst -> . CONST ID data_type_and_value
    (110) decConst -> . CONST ID EQUAL ID
    (111) decConst -> . CONST ID EQUAL data_structure
    (77) var_asignation -> . ID EQUAL any
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (88) SenIF -> . IF comparison LLLAVE codigo RLLAVE
    (89) SenIF -> . IF logic_operation LLLAVE codigo RLLAVE
    (90) SenIF -> . IF TRUE LLLAVE codigo RLLAVE
    (91) SenIF -> . IF FALSE LLLAVE codigo RLLAVE
    (92) SenElseIF -> . ELSE IF comparison LLLAVE codigo RLLAVE
    (93) SenElseIF -> . ELSE IF logic_operation LLLAVE codigo RLLAVE
    (94) SenElseIF -> . ELSE IF TRUE LLLAVE codigo RLLAVE
    (95) SenElseIF -> . ELSE IF FALSE LLLAVE codigo RLLAVE
    (96) SenElse -> . ELSE LLLAVE codigo RLLAVE
    (97) SenStruct -> . TYPE ID STRUCT LLLAVE declaration RLLAVE
    (101) cStruct -> . ID DEQUAL ID LLLAVE asignaciones RLLAVE
    (233) switch_statement -> . SWITCH ID LLLAVE cases RLLAVE
    (238) array_declaration -> . VAR ID LCORCHE capacity RCORCHE data_types
    (239) array_declaration -> . VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content
    (243) array_var -> . ID LCORCHE index RCORCHE
    (247) array_assignment -> . array_var EQUAL something
    (147) slice_declaration -> . VAR ID LCORCHE RCORCHE data_types
    (148) slice_declaration -> . VAR ID EQUAL LCORCHE RCORCHE data_types arr_content
    (149) slice_declaration -> . VAR ID EQUAL funM
    (150) slice_declaration -> . ID DEQUAL funM
    (151) slice_declaration -> . ID DEQUAL LCORCHE RCORCHE data_types arr_content
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (161) slice_assignment -> . slice_var EQUAL something_s
    (248) map_declaration -> . VAR ID LCORCHE data_types RCORCHE data_types
    (253) map_assignment -> . map_var EQUAL something
    (254) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE
    (255) func_declaration -> . FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN body RLLAVE
    (256) func_declaration -> . FUNC ID LPAREN params RPAREN LLLAVE codigo RLLAVE
    (200) main_func -> . FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (114) static -> . single
    (115) static -> . multiple
    (124) dynamic -> . ID DEQUAL algo
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN
    (249) map_var -> . ID LCORCHE key RCORCHE
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (120) single -> . VAR ID data_types
    (121) single -> . VAR ID data_types EQUAL funciones
    (122) single -> . VAR ID data_types EQUAL data_structure
    (123) single -> . VAR ID data_type_and_value
    (116) multiple -> . list_var data_types
    (117) list_var -> . VAR ID COMA more

    PRINT           shift and go to state 62
    SCAN            shift and go to state 63
    FOR             shift and go to state 65
    CONST           shift and go to state 71
    ID              shift and go to state 72
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77
    IF              shift and go to state 79
    ELSE            shift and go to state 80
    TYPE            shift and go to state 81
    SWITCH          shift and go to state 82
    VAR             shift and go to state 83
    FUNC            shift and go to state 32
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    NOT             shift and go to state 87

    comparison                     shift and go to state 40
    codigo                         shift and go to state 456
    rule                           shift and go to state 34
    more_rules                     shift and go to state 35
    impresion                      shift and go to state 36
    scan_func                      shift and go to state 37
    expression                     shift and go to state 38
    cicloFor                       shift and go to state 39
    logic_operation                shift and go to state 41
    decVar                         shift and go to state 42
    decConst                       shift and go to state 43
    var_asignation                 shift and go to state 44
    funciones                      shift and go to state 45
    SenIF                          shift and go to state 46
    SenElseIF                      shift and go to state 47
    SenElse                        shift and go to state 48
    SenStruct                      shift and go to state 49
    cStruct                        shift and go to state 50
    switch_statement               shift and go to state 51
    array_declaration              shift and go to state 52
    array_var                      shift and go to state 53
    array_assignment               shift and go to state 54
    slice_declaration              shift and go to state 55
    slice_var                      shift and go to state 56
    slice_assignment               shift and go to state 57
    map_declaration                shift and go to state 58
    map_assignment                 shift and go to state 59
    func_declaration               shift and go to state 60
    main_func                      shift and go to state 61
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    static                         shift and go to state 69
    dynamic                        shift and go to state 70
    data_structure                 shift and go to state 73
    call_func                      shift and go to state 78
    map_var                        shift and go to state 84
    single                         shift and go to state 88
    multiple                       shift and go to state 89
    list_var                       shift and go to state 90

state 439

    (169) incre -> ID INCREASE .

    LLLAVE          reduce using rule 169 (incre -> ID INCREASE .)


state 440

    (170) incre -> ID DECREASE .

    LLLAVE          reduce using rule 170 (incre -> ID DECREASE .)


state 441

    (104) valor -> ID .

    COMA            reduce using rule 104 (valor -> ID .)
    RLLAVE          reduce using rule 104 (valor -> ID .)


state 442

    (102) asignaciones -> ID POINTS valor .
    (103) asignaciones -> ID POINTS valor . COMA asignaciones

    RLLAVE          reduce using rule 102 (asignaciones -> ID POINTS valor .)
    COMA            shift and go to state 457


state 443

    (105) valor -> INTEGER .

    COMA            reduce using rule 105 (valor -> INTEGER .)
    RLLAVE          reduce using rule 105 (valor -> INTEGER .)


state 444

    (106) valor -> TRUE .

    COMA            reduce using rule 106 (valor -> TRUE .)
    RLLAVE          reduce using rule 106 (valor -> TRUE .)


state 445

    (107) valor -> FALSE .

    COMA            reduce using rule 107 (valor -> FALSE .)
    RLLAVE          reduce using rule 107 (valor -> FALSE .)


state 446

    (108) valor -> STRING .

    COMA            reduce using rule 108 (valor -> STRING .)
    RLLAVE          reduce using rule 108 (valor -> STRING .)


state 447

    (68) arr_content -> LLLAVE items . COMA more_items RLLAVE
    (69) arr_content -> LLLAVE items . RLLAVE

    COMA            shift and go to state 458
    RLLAVE          shift and go to state 459


state 448

    (72) items -> values .

    COMA            reduce using rule 72 (items -> values .)
    RLLAVE          reduce using rule 72 (items -> values .)


state 449

    (73) items -> operations .

    COMA            reduce using rule 73 (items -> operations .)
    RLLAVE          reduce using rule 73 (items -> operations .)


state 450

    (179) something_ex -> ID .
    (139) value -> ID .
    (195) logic_value -> ID .
    (243) array_var -> ID . LCORCHE index RCORCHE
    (249) map_var -> ID . LCORCHE key RCORCHE
    (157) slice_var -> ID . LCORCHE index_s RCORCHE
    (202) call_func -> ID . LPAREN list_params RPAREN
    (203) call_func -> ID . LPAREN RPAREN

  ! reduce/reduce conflict for GREATER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for GREATER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for SMALLER_OR_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for EQUAL_COMPARE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 139 (value -> ID .)
  ! reduce/reduce conflict for MOD resolved using rule 139 (value -> ID .)
    COMA            reduce using rule 179 (something_ex -> ID .)
    RLLAVE          reduce using rule 179 (something_ex -> ID .)
    GREATER         reduce using rule 139 (value -> ID .)
    SMALLER         reduce using rule 139 (value -> ID .)
    GREATER_OR_EQUAL reduce using rule 139 (value -> ID .)
    SMALLER_OR_EQUAL reduce using rule 139 (value -> ID .)
    EQUAL_COMPARE   reduce using rule 139 (value -> ID .)
    NOT_EQUAL       reduce using rule 139 (value -> ID .)
    PLUS            reduce using rule 139 (value -> ID .)
    TIMES           reduce using rule 139 (value -> ID .)
    DIVIDE          reduce using rule 139 (value -> ID .)
    MINUS           reduce using rule 139 (value -> ID .)
    MOD             reduce using rule 139 (value -> ID .)
    AND             reduce using rule 195 (logic_value -> ID .)
    OR              reduce using rule 195 (logic_value -> ID .)
    LCORCHE         shift and go to state 196
    LPAREN          shift and go to state 146

  ! GREATER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER         [ reduce using rule 179 (something_ex -> ID .) ]
  ! GREATER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! SMALLER_OR_EQUAL [ reduce using rule 179 (something_ex -> ID .) ]
  ! EQUAL_COMPARE   [ reduce using rule 179 (something_ex -> ID .) ]
  ! NOT_EQUAL       [ reduce using rule 179 (something_ex -> ID .) ]
  ! PLUS            [ reduce using rule 179 (something_ex -> ID .) ]
  ! TIMES           [ reduce using rule 179 (something_ex -> ID .) ]
  ! DIVIDE          [ reduce using rule 179 (something_ex -> ID .) ]
  ! MINUS           [ reduce using rule 179 (something_ex -> ID .) ]
  ! MOD             [ reduce using rule 179 (something_ex -> ID .) ]


state 451

    (152) funM -> MAKE LPAREN LCORCHE RCORCHE data_types . COMA cap RPAREN
    (153) funM -> MAKE LPAREN LCORCHE RCORCHE data_types . COMA cap COMA cap RPAREN

    COMA            shift and go to state 460


state 452

    (99) declaration -> declaration variable data_types .

    RLLAVE          reduce using rule 99 (declaration -> declaration variable data_types .)
    ID              reduce using rule 99 (declaration -> declaration variable data_types .)


state 453

    (234) cases -> CASE values POINTS codigo .
    (235) cases -> CASE values POINTS codigo . more
    (118) more -> . ID
    (119) more -> . ID COMA more
    (236) more -> . cases
    (237) more -> . DEFAULT POINTS codigo
    (234) cases -> . CASE values POINTS codigo
    (235) cases -> . CASE values POINTS codigo more

    RLLAVE          reduce using rule 234 (cases -> CASE values POINTS codigo .)
    INT32           reduce using rule 234 (cases -> CASE values POINTS codigo .)
    INT64           reduce using rule 234 (cases -> CASE values POINTS codigo .)
    FLOAT32         reduce using rule 234 (cases -> CASE values POINTS codigo .)
    FLOAT64         reduce using rule 234 (cases -> CASE values POINTS codigo .)
    BYTE            reduce using rule 234 (cases -> CASE values POINTS codigo .)
    WFLOAT          reduce using rule 234 (cases -> CASE values POINTS codigo .)
    WSTRING         reduce using rule 234 (cases -> CASE values POINTS codigo .)
    WINT            reduce using rule 234 (cases -> CASE values POINTS codigo .)
    BOOL            reduce using rule 234 (cases -> CASE values POINTS codigo .)
    ID              shift and go to state 325
    DEFAULT         shift and go to state 328
    CASE            shift and go to state 315

    more                           shift and go to state 461
    cases                          shift and go to state 327

state 454

    (239) array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types . arr_content
    (68) arr_content -> . LLLAVE items COMA more_items RLLAVE
    (69) arr_content -> . LLLAVE items RLLAVE

    LLLAVE          shift and go to state 417

    arr_content                    shift and go to state 462

state 455

    (148) slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .

    COLON           reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    PRINT           reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    SCAN            reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    FOR             reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    CONST           reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    ID              reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    APPEND          reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    LEN             reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    COPY            reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    DELETE          reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    IF              reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    ELSE            reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    TYPE            reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    SWITCH          reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    VAR             reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    FUNC            reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    INTEGER         reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    FLOAT           reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    NOT             reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    RLLAVE          reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    RETURN          reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    STRING          reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    TRUE            reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    FALSE           reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    INT32           reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    INT64           reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    FLOAT32         reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    FLOAT64         reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    BYTE            reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    WFLOAT          reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    WSTRING         reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    WINT            reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    BOOL            reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    DEFAULT         reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)
    CASE            reduce using rule 148 (slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content .)


state 456

    (168) cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo . RLLAVE

    RLLAVE          shift and go to state 463


state 457

    (103) asignaciones -> ID POINTS valor COMA . asignaciones
    (102) asignaciones -> . ID POINTS valor
    (103) asignaciones -> . ID POINTS valor COMA asignaciones

    ID              shift and go to state 370

    asignaciones                   shift and go to state 464

state 458

    (68) arr_content -> LLLAVE items COMA . more_items RLLAVE
    (70) more_items -> . items COMA more_items
    (71) more_items -> . items
    (72) items -> . values
    (73) items -> . operations
    (51) values -> . STRING
    (52) values -> . INTEGER
    (53) values -> . FLOAT
    (54) values -> . TRUE
    (55) values -> . FALSE
    (65) operations -> . expression
    (66) operations -> . comparison
    (67) operations -> . logic_operation
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    STRING          shift and go to state 174
    INTEGER         shift and go to state 175
    FLOAT           shift and go to state 176
    TRUE            shift and go to state 177
    FALSE           shift and go to state 178
    ID              shift and go to state 450
    NOT             shift and go to state 87
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    items                          shift and go to state 465
    more_items                     shift and go to state 466
    values                         shift and go to state 448
    operations                     shift and go to state 449
    expression                     shift and go to state 179
    comparison                     shift and go to state 180
    logic_operation                shift and go to state 181
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 459

    (69) arr_content -> LLLAVE items RLLAVE .

    COLON           reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    PRINT           reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    SCAN            reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    FOR             reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    CONST           reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    ID              reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    APPEND          reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    LEN             reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    COPY            reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    DELETE          reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    IF              reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    ELSE            reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    TYPE            reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    SWITCH          reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    VAR             reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    FUNC            reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    INTEGER         reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    FLOAT           reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    NOT             reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    RLLAVE          reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    RETURN          reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    STRING          reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    TRUE            reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    FALSE           reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    INT32           reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    INT64           reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    FLOAT32         reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    FLOAT64         reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    BYTE            reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    WFLOAT          reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    WSTRING         reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    WINT            reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    BOOL            reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    DEFAULT         reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)
    CASE            reduce using rule 69 (arr_content -> LLLAVE items RLLAVE .)


state 460

    (152) funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA . cap RPAREN
    (153) funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA . cap COMA cap RPAREN
    (154) cap -> . INTEGER
    (155) cap -> . ID
    (156) cap -> . expression
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    INTEGER         shift and go to state 468
    ID              shift and go to state 469
    FLOAT           shift and go to state 86
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    cap                            shift and go to state 467
    expression                     shift and go to state 470
    something_ex                   shift and go to state 64
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 461

    (235) cases -> CASE values POINTS codigo more .

    RLLAVE          reduce using rule 235 (cases -> CASE values POINTS codigo more .)
    INT32           reduce using rule 235 (cases -> CASE values POINTS codigo more .)
    INT64           reduce using rule 235 (cases -> CASE values POINTS codigo more .)
    FLOAT32         reduce using rule 235 (cases -> CASE values POINTS codigo more .)
    FLOAT64         reduce using rule 235 (cases -> CASE values POINTS codigo more .)
    BYTE            reduce using rule 235 (cases -> CASE values POINTS codigo more .)
    WFLOAT          reduce using rule 235 (cases -> CASE values POINTS codigo more .)
    WSTRING         reduce using rule 235 (cases -> CASE values POINTS codigo more .)
    WINT            reduce using rule 235 (cases -> CASE values POINTS codigo more .)
    BOOL            reduce using rule 235 (cases -> CASE values POINTS codigo more .)


state 462

    (239) array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .

    COLON           reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    PRINT           reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    SCAN            reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    FOR             reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    CONST           reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    ID              reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    APPEND          reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    LEN             reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    COPY            reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    DELETE          reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    IF              reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    ELSE            reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    TYPE            reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    SWITCH          reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    VAR             reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    FUNC            reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    INTEGER         reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    FLOAT           reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    NOT             reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    RLLAVE          reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    RETURN          reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    STRING          reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    TRUE            reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    FALSE           reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    INT32           reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    INT64           reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    FLOAT32         reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    FLOAT64         reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    BYTE            reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    WFLOAT          reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    WSTRING         reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    WINT            reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    BOOL            reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    DEFAULT         reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)
    CASE            reduce using rule 239 (array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content .)


state 463

    (168) cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .

    PRINT           reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    SCAN            reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    FOR             reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    CONST           reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    ID              reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    APPEND          reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    LEN             reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    COPY            reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    DELETE          reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    IF              reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    ELSE            reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    TYPE            reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    SWITCH          reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    VAR             reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    FUNC            reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    INTEGER         reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    FLOAT           reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    NOT             reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    RLLAVE          reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    RETURN          reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    STRING          reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    TRUE            reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    FALSE           reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    INT32           reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    INT64           reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    FLOAT32         reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    FLOAT64         reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    BYTE            reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    WFLOAT          reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    WSTRING         reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    WINT            reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    BOOL            reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    DEFAULT         reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)
    CASE            reduce using rule 168 (cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE .)


state 464

    (103) asignaciones -> ID POINTS valor COMA asignaciones .

    RLLAVE          reduce using rule 103 (asignaciones -> ID POINTS valor COMA asignaciones .)


state 465

    (70) more_items -> items . COMA more_items
    (71) more_items -> items .

    COMA            shift and go to state 471
    RLLAVE          reduce using rule 71 (more_items -> items .)


state 466

    (68) arr_content -> LLLAVE items COMA more_items . RLLAVE

    RLLAVE          shift and go to state 472


state 467

    (152) funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap . RPAREN
    (153) funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap . COMA cap RPAREN

    RPAREN          shift and go to state 474
    COMA            shift and go to state 473


state 468

    (154) cap -> INTEGER .
    (180) something_ex -> INTEGER .

  ! reduce/reduce conflict for RPAREN resolved using rule 154 (cap -> INTEGER .)
  ! reduce/reduce conflict for COMA resolved using rule 154 (cap -> INTEGER .)
    RPAREN          reduce using rule 154 (cap -> INTEGER .)
    COMA            reduce using rule 154 (cap -> INTEGER .)
    GREATER         reduce using rule 180 (something_ex -> INTEGER .)
    SMALLER         reduce using rule 180 (something_ex -> INTEGER .)
    GREATER_OR_EQUAL reduce using rule 180 (something_ex -> INTEGER .)
    SMALLER_OR_EQUAL reduce using rule 180 (something_ex -> INTEGER .)
    EQUAL_COMPARE   reduce using rule 180 (something_ex -> INTEGER .)
    NOT_EQUAL       reduce using rule 180 (something_ex -> INTEGER .)
    PLUS            reduce using rule 180 (something_ex -> INTEGER .)
    TIMES           reduce using rule 180 (something_ex -> INTEGER .)
    DIVIDE          reduce using rule 180 (something_ex -> INTEGER .)
    MINUS           reduce using rule 180 (something_ex -> INTEGER .)
    MOD             reduce using rule 180 (something_ex -> INTEGER .)

  ! RPAREN          [ reduce using rule 180 (something_ex -> INTEGER .) ]
  ! COMA            [ reduce using rule 180 (something_ex -> INTEGER .) ]


state 469

    (155) cap -> ID .
    (179) something_ex -> ID .
    (243) array_var -> ID . LCORCHE index RCORCHE
    (249) map_var -> ID . LCORCHE key RCORCHE
    (157) slice_var -> ID . LCORCHE index_s RCORCHE
    (202) call_func -> ID . LPAREN list_params RPAREN
    (203) call_func -> ID . LPAREN RPAREN

  ! reduce/reduce conflict for RPAREN resolved using rule 155 (cap -> ID .)
  ! reduce/reduce conflict for COMA resolved using rule 155 (cap -> ID .)
    RPAREN          reduce using rule 155 (cap -> ID .)
    COMA            reduce using rule 155 (cap -> ID .)
    GREATER         reduce using rule 179 (something_ex -> ID .)
    SMALLER         reduce using rule 179 (something_ex -> ID .)
    GREATER_OR_EQUAL reduce using rule 179 (something_ex -> ID .)
    SMALLER_OR_EQUAL reduce using rule 179 (something_ex -> ID .)
    EQUAL_COMPARE   reduce using rule 179 (something_ex -> ID .)
    NOT_EQUAL       reduce using rule 179 (something_ex -> ID .)
    PLUS            reduce using rule 179 (something_ex -> ID .)
    TIMES           reduce using rule 179 (something_ex -> ID .)
    DIVIDE          reduce using rule 179 (something_ex -> ID .)
    MINUS           reduce using rule 179 (something_ex -> ID .)
    MOD             reduce using rule 179 (something_ex -> ID .)
    LCORCHE         shift and go to state 196
    LPAREN          shift and go to state 146

  ! RPAREN          [ reduce using rule 179 (something_ex -> ID .) ]
  ! COMA            [ reduce using rule 179 (something_ex -> ID .) ]


state 470

    (156) cap -> expression .

    RPAREN          reduce using rule 156 (cap -> expression .)
    COMA            reduce using rule 156 (cap -> expression .)


state 471

    (70) more_items -> items COMA . more_items
    (70) more_items -> . items COMA more_items
    (71) more_items -> . items
    (72) items -> . values
    (73) items -> . operations
    (51) values -> . STRING
    (52) values -> . INTEGER
    (53) values -> . FLOAT
    (54) values -> . TRUE
    (55) values -> . FALSE
    (65) operations -> . expression
    (66) operations -> . comparison
    (67) operations -> . logic_operation
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (138) comparison -> . value op value
    (189) logic_operation -> . logic_value logic_recu
    (190) logic_operation -> . negation
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (139) value -> . ID
    (140) value -> . expression
    (193) logic_value -> . negation
    (194) logic_value -> . comparison
    (195) logic_value -> . ID
    (196) negation -> . NOT comparison
    (197) negation -> . NOT ID
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    STRING          shift and go to state 174
    INTEGER         shift and go to state 175
    FLOAT           shift and go to state 176
    TRUE            shift and go to state 177
    FALSE           shift and go to state 178
    ID              shift and go to state 450
    NOT             shift and go to state 87
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    items                          shift and go to state 465
    more_items                     shift and go to state 475
    values                         shift and go to state 448
    operations                     shift and go to state 449
    expression                     shift and go to state 179
    comparison                     shift and go to state 180
    logic_operation                shift and go to state 181
    something_ex                   shift and go to state 64
    value                          shift and go to state 66
    logic_value                    shift and go to state 67
    negation                       shift and go to state 68
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 472

    (68) arr_content -> LLLAVE items COMA more_items RLLAVE .

    COLON           reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    PRINT           reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    SCAN            reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    FOR             reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    CONST           reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    ID              reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    APPEND          reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    LEN             reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    COPY            reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    DELETE          reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    IF              reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    ELSE            reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    TYPE            reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    SWITCH          reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    VAR             reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    FUNC            reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    INTEGER         reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    FLOAT           reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    NOT             reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    RLLAVE          reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    RETURN          reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    STRING          reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    TRUE            reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    FALSE           reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    INT32           reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    INT64           reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    FLOAT32         reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    FLOAT64         reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    BYTE            reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    WFLOAT          reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    WSTRING         reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    WINT            reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    BOOL            reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    DEFAULT         reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)
    CASE            reduce using rule 68 (arr_content -> LLLAVE items COMA more_items RLLAVE .)


state 473

    (153) funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA . cap RPAREN
    (154) cap -> . INTEGER
    (155) cap -> . ID
    (156) cap -> . expression
    (175) expression -> . something_ex
    (176) expression -> . something_ex adicionaEx
    (179) something_ex -> . ID
    (180) something_ex -> . INTEGER
    (181) something_ex -> . FLOAT
    (182) something_ex -> . data_structure
    (183) something_ex -> . funciones
    (74) data_structure -> . array_var
    (75) data_structure -> . map_var
    (76) data_structure -> . slice_var
    (130) funciones -> . APPEND LPAREN ID COMA values RPAREN
    (131) funciones -> . APPEND LPAREN ID COMA ID RPAREN
    (132) funciones -> . LEN LPAREN ID RPAREN
    (133) funciones -> . COPY LPAREN ID COMA ID RPAREN
    (134) funciones -> . DELETE LPAREN ID COMA clave RPAREN
    (135) funciones -> . call_func
    (243) array_var -> . ID LCORCHE index RCORCHE
    (249) map_var -> . ID LCORCHE key RCORCHE
    (157) slice_var -> . ID LCORCHE index_s RCORCHE
    (202) call_func -> . ID LPAREN list_params RPAREN
    (203) call_func -> . ID LPAREN RPAREN

    INTEGER         shift and go to state 468
    ID              shift and go to state 469
    FLOAT           shift and go to state 86
    APPEND          shift and go to state 74
    LEN             shift and go to state 75
    COPY            shift and go to state 76
    DELETE          shift and go to state 77

    cap                            shift and go to state 476
    expression                     shift and go to state 470
    something_ex                   shift and go to state 64
    data_structure                 shift and go to state 73
    funciones                      shift and go to state 133
    array_var                      shift and go to state 134
    map_var                        shift and go to state 135
    slice_var                      shift and go to state 136
    call_func                      shift and go to state 78

state 474

    (152) funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .

    COLON           reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    PRINT           reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    SCAN            reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    FOR             reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    CONST           reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    ID              reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    APPEND          reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    LEN             reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    COPY            reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    DELETE          reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    IF              reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    ELSE            reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    TYPE            reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    SWITCH          reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    VAR             reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    FUNC            reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    INTEGER         reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    FLOAT           reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    NOT             reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    RLLAVE          reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    RETURN          reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    STRING          reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    TRUE            reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    FALSE           reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    INT32           reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    INT64           reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    FLOAT32         reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    FLOAT64         reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    BYTE            reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    WFLOAT          reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    WSTRING         reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    WINT            reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    BOOL            reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    DEFAULT         reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)
    CASE            reduce using rule 152 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN .)


state 475

    (70) more_items -> items COMA more_items .

    RLLAVE          reduce using rule 70 (more_items -> items COMA more_items .)


state 476

    (153) funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap . RPAREN

    RPAREN          shift and go to state 477


state 477

    (153) funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .

    COLON           reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    PRINT           reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    SCAN            reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    FOR             reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    CONST           reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    ID              reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    APPEND          reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    LEN             reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    COPY            reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    DELETE          reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    IF              reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    ELSE            reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    TYPE            reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    SWITCH          reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    VAR             reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    FUNC            reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    INTEGER         reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    FLOAT           reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    NOT             reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    RLLAVE          reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    RETURN          reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    STRING          reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    TRUE            reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    FALSE           reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    INT32           reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    INT64           reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    FLOAT32         reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    FLOAT64         reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    BYTE            reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    WFLOAT          reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    WSTRING         reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    WINT            reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    BOOL            reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    DEFAULT         reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)
    CASE            reduce using rule 153 (funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNC in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 4 resolved as shift
WARNING: shift/reduce conflict for ID in state 34 resolved as shift
WARNING: shift/reduce conflict for APPEND in state 34 resolved as shift
WARNING: shift/reduce conflict for LEN in state 34 resolved as shift
WARNING: shift/reduce conflict for COPY in state 34 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 34 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 34 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 34 resolved as shift
WARNING: shift/reduce conflict for NOT in state 34 resolved as shift
WARNING: shift/reduce conflict for COLON in state 45 resolved as shift
WARNING: shift/reduce conflict for COLON in state 53 resolved as shift
WARNING: shift/reduce conflict for COLON in state 56 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 64 resolved as shift
WARNING: shift/reduce conflict for SMALLER in state 64 resolved as shift
WARNING: shift/reduce conflict for GREATER_OR_EQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for SMALLER_OR_EQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for EQUAL_COMPARE in state 64 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 64 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 64 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 64 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 64 resolved as shift
WARNING: shift/reduce conflict for MOD in state 64 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 190 resolved as shift
WARNING: shift/reduce conflict for SMALLER in state 190 resolved as shift
WARNING: shift/reduce conflict for GREATER_OR_EQUAL in state 190 resolved as shift
WARNING: shift/reduce conflict for SMALLER_OR_EQUAL in state 190 resolved as shift
WARNING: shift/reduce conflict for EQUAL_COMPARE in state 190 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 190 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 190 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 190 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 190 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 190 resolved as shift
WARNING: shift/reduce conflict for MOD in state 190 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 259 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 260 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 261 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 262 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 263 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 264 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 265 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 266 resolved as shift
WARNING: shift/reduce conflict for COLON in state 335 resolved as shift
WARNING: reduce/reduce conflict in state 4 resolved using rule (funcs -> func_declaration)
WARNING: rejected rule (funcs -> <empty>) in state 4
WARNING: reduce/reduce conflict in state 6 resolved using rule (program -> funcs main_func)
WARNING: rejected rule (funcs -> <empty>) in state 6
WARNING: reduce/reduce conflict in state 45 resolved using rule (rule -> funciones)
WARNING: rejected rule (something_ex -> funciones) in state 45
WARNING: reduce/reduce conflict in state 53 resolved using rule (rule -> array_var)
WARNING: rejected rule (data_structure -> array_var) in state 53
WARNING: reduce/reduce conflict in state 56 resolved using rule (rule -> slice_var)
WARNING: rejected rule (data_structure -> slice_var) in state 56
WARNING: reduce/reduce conflict in state 72 resolved using rule (value -> ID)
WARNING: rejected rule (something_ex -> ID) in state 72
WARNING: reduce/reduce conflict in state 131 resolved using rule (value -> ID)
WARNING: rejected rule (something_ex -> ID) in state 131
WARNING: reduce/reduce conflict in state 155 resolved using rule (value -> ID)
WARNING: rejected rule (something_ex -> ID) in state 155
WARNING: reduce/reduce conflict in state 163 resolved using rule (value -> ID)
WARNING: rejected rule (something_ex -> ID) in state 163
WARNING: reduce/reduce conflict in state 169 resolved using rule (something -> ID)
WARNING: rejected rule (something_ex -> ID) in state 169
WARNING: reduce/reduce conflict in state 169 resolved using rule (value -> ID)
WARNING: rejected rule (something_ex -> ID) in state 169
WARNING: reduce/reduce conflict in state 170 resolved using rule (something -> data_structure)
WARNING: rejected rule (something_ex -> data_structure) in state 170
WARNING: reduce/reduce conflict in state 173 resolved using rule (something -> funciones)
WARNING: rejected rule (something_ex -> funciones) in state 173
WARNING: reduce/reduce conflict in state 175 resolved using rule (values -> INTEGER)
WARNING: rejected rule (something_ex -> INTEGER) in state 175
WARNING: reduce/reduce conflict in state 176 resolved using rule (values -> FLOAT)
WARNING: rejected rule (something_ex -> FLOAT) in state 176
WARNING: reduce/reduce conflict in state 183 resolved using rule (something_s -> ID)
WARNING: rejected rule (something_ex -> ID) in state 183
WARNING: reduce/reduce conflict in state 183 resolved using rule (value -> ID)
WARNING: rejected rule (something_ex -> ID) in state 183
WARNING: reduce/reduce conflict in state 184 resolved using rule (data_structure -> array_var)
WARNING: rejected rule (something_s -> array_var) in state 184
WARNING: reduce/reduce conflict in state 198 resolved using rule (value -> ID)
WARNING: rejected rule (something_ex -> ID) in state 198
WARNING: reduce/reduce conflict in state 202 resolved using rule (value -> ID)
WARNING: rejected rule (something_ex -> ID) in state 202
WARNING: reduce/reduce conflict in state 213 resolved using rule (any -> ID)
WARNING: rejected rule (something_ex -> ID) in state 213
WARNING: reduce/reduce conflict in state 213 resolved using rule (value -> ID)
WARNING: rejected rule (something_ex -> ID) in state 213
WARNING: reduce/reduce conflict in state 217 resolved using rule (any -> data_structure)
WARNING: rejected rule (something_ex -> data_structure) in state 217
WARNING: reduce/reduce conflict in state 218 resolved using rule (any -> funciones)
WARNING: rejected rule (something_ex -> funciones) in state 218
WARNING: reduce/reduce conflict in state 219 resolved using rule (algo -> ID)
WARNING: rejected rule (something_ex -> ID) in state 219
WARNING: reduce/reduce conflict in state 219 resolved using rule (value -> ID)
WARNING: rejected rule (something_ex -> ID) in state 219
WARNING: reduce/reduce conflict in state 226 resolved using rule (algo -> data_structure)
WARNING: rejected rule (something_ex -> data_structure) in state 226
WARNING: reduce/reduce conflict in state 227 resolved using rule (algo -> funciones)
WARNING: rejected rule (something_ex -> funciones) in state 227
WARNING: reduce/reduce conflict in state 228 resolved using rule (index_s -> ID)
WARNING: rejected rule (index -> ID) in state 228
WARNING: reduce/reduce conflict in state 228 resolved using rule (index_s -> ID)
WARNING: rejected rule (key -> ID) in state 228
WARNING: reduce/reduce conflict in state 228 resolved using rule (index_s -> ID)
WARNING: rejected rule (something_ex -> ID) in state 228
WARNING: reduce/reduce conflict in state 228 resolved using rule (value -> ID)
WARNING: rejected rule (something_ex -> ID) in state 228
WARNING: reduce/reduce conflict in state 232 resolved using rule (index_s -> INTEGER)
WARNING: rejected rule (index -> INTEGER) in state 232
WARNING: reduce/reduce conflict in state 232 resolved using rule (values -> INTEGER)
WARNING: rejected rule (index_s -> INTEGER) in state 232
WARNING: reduce/reduce conflict in state 232 resolved using rule (values -> INTEGER)
WARNING: rejected rule (something_ex -> INTEGER) in state 232
WARNING: reduce/reduce conflict in state 233 resolved using rule (index_s -> expression)
WARNING: rejected rule (index -> expression) in state 233
WARNING: reduce/reduce conflict in state 233 resolved using rule (operations -> expression)
WARNING: rejected rule (index_s -> expression) in state 233
WARNING: reduce/reduce conflict in state 280 resolved using rule (index -> ID)
WARNING: rejected rule (key -> ID) in state 280
WARNING: reduce/reduce conflict in state 280 resolved using rule (index_s -> ID)
WARNING: rejected rule (index -> ID) in state 280
WARNING: reduce/reduce conflict in state 280 resolved using rule (index_s -> ID)
WARNING: rejected rule (something_ex -> ID) in state 280
WARNING: reduce/reduce conflict in state 280 resolved using rule (value -> ID)
WARNING: rejected rule (something_ex -> ID) in state 280
WARNING: reduce/reduce conflict in state 316 resolved using rule (something_ex -> ID)
WARNING: rejected rule (capacity -> ID) in state 316
WARNING: reduce/reduce conflict in state 320 resolved using rule (something_ex -> INTEGER)
WARNING: rejected rule (capacity -> INTEGER) in state 320
WARNING: reduce/reduce conflict in state 330 resolved using rule (something_ex -> ID)
WARNING: rejected rule (retorno -> ID) in state 330
WARNING: reduce/reduce conflict in state 330 resolved using rule (value -> ID)
WARNING: rejected rule (something_ex -> ID) in state 330
WARNING: reduce/reduce conflict in state 340 resolved using rule (something_ex -> data_structure)
WARNING: rejected rule (retorno -> data_structure) in state 340
WARNING: reduce/reduce conflict in state 350 resolved using rule (something_ex -> INTEGER)
WARNING: rejected rule (int_value -> INTEGER) in state 350
WARNING: reduce/reduce conflict in state 358 resolved using rule (something_ex -> FLOAT)
WARNING: rejected rule (float_value -> FLOAT) in state 358
WARNING: reduce/reduce conflict in state 407 resolved using rule (something_ex -> ID)
WARNING: rejected rule (retorno -> ID) in state 407
WARNING: reduce/reduce conflict in state 407 resolved using rule (value -> ID)
WARNING: rejected rule (something_ex -> ID) in state 407
WARNING: reduce/reduce conflict in state 450 resolved using rule (value -> ID)
WARNING: rejected rule (something_ex -> ID) in state 450
WARNING: reduce/reduce conflict in state 468 resolved using rule (cap -> INTEGER)
WARNING: rejected rule (something_ex -> INTEGER) in state 468
WARNING: reduce/reduce conflict in state 469 resolved using rule (cap -> ID)
WARNING: rejected rule (something_ex -> ID) in state 469
WARNING: Rule (something_s -> array_var) is never reduced
WARNING: Rule (index -> ID) is never reduced
WARNING: Rule (key -> ID) is never reduced
WARNING: Rule (index -> INTEGER) is never reduced
WARNING: Rule (index_s -> INTEGER) is never reduced
WARNING: Rule (index -> expression) is never reduced
WARNING: Rule (index_s -> expression) is never reduced
WARNING: Rule (capacity -> ID) is never reduced
WARNING: Rule (capacity -> INTEGER) is never reduced
WARNING: Rule (retorno -> ID) is never reduced
WARNING: Rule (retorno -> data_structure) is never reduced
WARNING: Rule (int_value -> INTEGER) is never reduced
WARNING: Rule (float_value -> FLOAT) is never reduced
