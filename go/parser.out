Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    APPEND
    ARRAY
    BOOL
    BYTE
    CAP
    CASE
    COLON
    COMA
    COMMENT
    CONST
    COPY
    DECREASE
    DEQUAL
    ELSE
    EQUAL
    EQUAL_COMPARE
    FALSE
    FLOAT
    FLOAT32
    FLOAT64
    FUNC
    GREATER
    GREATER_OR_EQUAL
    IF
    INCREASE
    INT32
    INT64
    INTERFACE
    JOIN
    LCORCHE
    LEN
    MAIN
    MAKE
    MAP
    MOD
    MULTI_COMMENT
    NOT
    NOT_EQUAL
    OR
    PACKAGE
    POINTER
    RCORCHE
    SCAN
    SMALLER
    SMALLER_OR_EQUAL
    STRING
    STRUCT
    SWITCH
    TRUE
    TYPE
    VAR

Grammar

Rule 0     S' -> codigo
Rule 1     codigo -> impresion
Rule 2     codigo -> expression
Rule 3     codigo -> cicloFor
Rule 4     cicloFor -> FOR LLLAVE codigo RLLAVE
Rule 5     impresion -> PRINT LPAREN expression RPAREN
Rule 6     expression -> expression PLUS term
Rule 7     expression -> expression MINUS term
Rule 8     expression -> term
Rule 9     term -> term TIMES factor
Rule 10    term -> term DIVIDE factor
Rule 11    term -> factor
Rule 12    factor -> INTEGER
Rule 13    factor -> ID
Rule 14    factor -> LPAREN expression RPAREN

Terminals, with rules where they appear

AND                  : 
APPEND               : 
ARRAY                : 
BOOL                 : 
BYTE                 : 
CAP                  : 
CASE                 : 
COLON                : 
COMA                 : 
COMMENT              : 
CONST                : 
COPY                 : 
DECREASE             : 
DEQUAL               : 
DIVIDE               : 10
ELSE                 : 
EQUAL                : 
EQUAL_COMPARE        : 
FALSE                : 
FLOAT                : 
FLOAT32              : 
FLOAT64              : 
FOR                  : 4
FUNC                 : 
GREATER              : 
GREATER_OR_EQUAL     : 
ID                   : 13
IF                   : 
INCREASE             : 
INT32                : 
INT64                : 
INTEGER              : 12
INTERFACE            : 
JOIN                 : 
LCORCHE              : 
LEN                  : 
LLLAVE               : 4
LPAREN               : 5 14
MAIN                 : 
MAKE                 : 
MAP                  : 
MINUS                : 7
MOD                  : 
MULTI_COMMENT        : 
NOT                  : 
NOT_EQUAL            : 
OR                   : 
PACKAGE              : 
PLUS                 : 6
POINTER              : 
PRINT                : 5
RCORCHE              : 
RLLAVE               : 4
RPAREN               : 5 14
SCAN                 : 
SMALLER              : 
SMALLER_OR_EQUAL     : 
STRING               : 
STRUCT               : 
SWITCH               : 
TIMES                : 9
TRUE                 : 
TYPE                 : 
VAR                  : 
error                : 

Nonterminals, with rules where they appear

cicloFor             : 3
codigo               : 4 0
expression           : 2 5 6 7 14
factor               : 9 10 11
impresion            : 1
term                 : 6 7 8 9 10

Parsing method: LALR

state 0

    (0) S' -> . codigo
    (1) codigo -> . impresion
    (2) codigo -> . expression
    (3) codigo -> . cicloFor
    (5) impresion -> . PRINT LPAREN expression RPAREN
    (6) expression -> . expression PLUS term
    (7) expression -> . expression MINUS term
    (8) expression -> . term
    (4) cicloFor -> . FOR LLLAVE codigo RLLAVE
    (9) term -> . term TIMES factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (12) factor -> . INTEGER
    (13) factor -> . ID
    (14) factor -> . LPAREN expression RPAREN

    PRINT           shift and go to state 5
    FOR             shift and go to state 8
    INTEGER         shift and go to state 10
    ID              shift and go to state 11
    LPAREN          shift and go to state 6

    codigo                         shift and go to state 1
    impresion                      shift and go to state 2
    expression                     shift and go to state 3
    cicloFor                       shift and go to state 4
    term                           shift and go to state 7
    factor                         shift and go to state 9

state 1

    (0) S' -> codigo .



state 2

    (1) codigo -> impresion .

    $end            reduce using rule 1 (codigo -> impresion .)
    RLLAVE          reduce using rule 1 (codigo -> impresion .)


state 3

    (2) codigo -> expression .
    (6) expression -> expression . PLUS term
    (7) expression -> expression . MINUS term

    $end            reduce using rule 2 (codigo -> expression .)
    RLLAVE          reduce using rule 2 (codigo -> expression .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13


state 4

    (3) codigo -> cicloFor .

    $end            reduce using rule 3 (codigo -> cicloFor .)
    RLLAVE          reduce using rule 3 (codigo -> cicloFor .)


state 5

    (5) impresion -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 14


state 6

    (14) factor -> LPAREN . expression RPAREN
    (6) expression -> . expression PLUS term
    (7) expression -> . expression MINUS term
    (8) expression -> . term
    (9) term -> . term TIMES factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (12) factor -> . INTEGER
    (13) factor -> . ID
    (14) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 10
    ID              shift and go to state 11
    LPAREN          shift and go to state 6

    expression                     shift and go to state 15
    term                           shift and go to state 7
    factor                         shift and go to state 9

state 7

    (8) expression -> term .
    (9) term -> term . TIMES factor
    (10) term -> term . DIVIDE factor

    PLUS            reduce using rule 8 (expression -> term .)
    MINUS           reduce using rule 8 (expression -> term .)
    $end            reduce using rule 8 (expression -> term .)
    RPAREN          reduce using rule 8 (expression -> term .)
    RLLAVE          reduce using rule 8 (expression -> term .)
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17


state 8

    (4) cicloFor -> FOR . LLLAVE codigo RLLAVE

    LLLAVE          shift and go to state 18


state 9

    (11) term -> factor .

    TIMES           reduce using rule 11 (term -> factor .)
    DIVIDE          reduce using rule 11 (term -> factor .)
    PLUS            reduce using rule 11 (term -> factor .)
    MINUS           reduce using rule 11 (term -> factor .)
    $end            reduce using rule 11 (term -> factor .)
    RPAREN          reduce using rule 11 (term -> factor .)
    RLLAVE          reduce using rule 11 (term -> factor .)


state 10

    (12) factor -> INTEGER .

    TIMES           reduce using rule 12 (factor -> INTEGER .)
    DIVIDE          reduce using rule 12 (factor -> INTEGER .)
    PLUS            reduce using rule 12 (factor -> INTEGER .)
    MINUS           reduce using rule 12 (factor -> INTEGER .)
    $end            reduce using rule 12 (factor -> INTEGER .)
    RPAREN          reduce using rule 12 (factor -> INTEGER .)
    RLLAVE          reduce using rule 12 (factor -> INTEGER .)


state 11

    (13) factor -> ID .

    TIMES           reduce using rule 13 (factor -> ID .)
    DIVIDE          reduce using rule 13 (factor -> ID .)
    PLUS            reduce using rule 13 (factor -> ID .)
    MINUS           reduce using rule 13 (factor -> ID .)
    $end            reduce using rule 13 (factor -> ID .)
    RPAREN          reduce using rule 13 (factor -> ID .)
    RLLAVE          reduce using rule 13 (factor -> ID .)


state 12

    (6) expression -> expression PLUS . term
    (9) term -> . term TIMES factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (12) factor -> . INTEGER
    (13) factor -> . ID
    (14) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 10
    ID              shift and go to state 11
    LPAREN          shift and go to state 6

    term                           shift and go to state 19
    factor                         shift and go to state 9

state 13

    (7) expression -> expression MINUS . term
    (9) term -> . term TIMES factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (12) factor -> . INTEGER
    (13) factor -> . ID
    (14) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 10
    ID              shift and go to state 11
    LPAREN          shift and go to state 6

    term                           shift and go to state 20
    factor                         shift and go to state 9

state 14

    (5) impresion -> PRINT LPAREN . expression RPAREN
    (6) expression -> . expression PLUS term
    (7) expression -> . expression MINUS term
    (8) expression -> . term
    (9) term -> . term TIMES factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (12) factor -> . INTEGER
    (13) factor -> . ID
    (14) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 10
    ID              shift and go to state 11
    LPAREN          shift and go to state 6

    expression                     shift and go to state 21
    term                           shift and go to state 7
    factor                         shift and go to state 9

state 15

    (14) factor -> LPAREN expression . RPAREN
    (6) expression -> expression . PLUS term
    (7) expression -> expression . MINUS term

    RPAREN          shift and go to state 22
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13


state 16

    (9) term -> term TIMES . factor
    (12) factor -> . INTEGER
    (13) factor -> . ID
    (14) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 10
    ID              shift and go to state 11
    LPAREN          shift and go to state 6

    factor                         shift and go to state 23

state 17

    (10) term -> term DIVIDE . factor
    (12) factor -> . INTEGER
    (13) factor -> . ID
    (14) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 10
    ID              shift and go to state 11
    LPAREN          shift and go to state 6

    factor                         shift and go to state 24

state 18

    (4) cicloFor -> FOR LLLAVE . codigo RLLAVE
    (1) codigo -> . impresion
    (2) codigo -> . expression
    (3) codigo -> . cicloFor
    (5) impresion -> . PRINT LPAREN expression RPAREN
    (6) expression -> . expression PLUS term
    (7) expression -> . expression MINUS term
    (8) expression -> . term
    (4) cicloFor -> . FOR LLLAVE codigo RLLAVE
    (9) term -> . term TIMES factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (12) factor -> . INTEGER
    (13) factor -> . ID
    (14) factor -> . LPAREN expression RPAREN

    PRINT           shift and go to state 5
    FOR             shift and go to state 8
    INTEGER         shift and go to state 10
    ID              shift and go to state 11
    LPAREN          shift and go to state 6

    codigo                         shift and go to state 25
    impresion                      shift and go to state 2
    expression                     shift and go to state 3
    cicloFor                       shift and go to state 4
    term                           shift and go to state 7
    factor                         shift and go to state 9

state 19

    (6) expression -> expression PLUS term .
    (9) term -> term . TIMES factor
    (10) term -> term . DIVIDE factor

    PLUS            reduce using rule 6 (expression -> expression PLUS term .)
    MINUS           reduce using rule 6 (expression -> expression PLUS term .)
    $end            reduce using rule 6 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 6 (expression -> expression PLUS term .)
    RLLAVE          reduce using rule 6 (expression -> expression PLUS term .)
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17


state 20

    (7) expression -> expression MINUS term .
    (9) term -> term . TIMES factor
    (10) term -> term . DIVIDE factor

    PLUS            reduce using rule 7 (expression -> expression MINUS term .)
    MINUS           reduce using rule 7 (expression -> expression MINUS term .)
    $end            reduce using rule 7 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 7 (expression -> expression MINUS term .)
    RLLAVE          reduce using rule 7 (expression -> expression MINUS term .)
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17


state 21

    (5) impresion -> PRINT LPAREN expression . RPAREN
    (6) expression -> expression . PLUS term
    (7) expression -> expression . MINUS term

    RPAREN          shift and go to state 26
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13


state 22

    (14) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 14 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 14 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 14 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 14 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 14 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 14 (factor -> LPAREN expression RPAREN .)
    RLLAVE          reduce using rule 14 (factor -> LPAREN expression RPAREN .)


state 23

    (9) term -> term TIMES factor .

    TIMES           reduce using rule 9 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 9 (term -> term TIMES factor .)
    PLUS            reduce using rule 9 (term -> term TIMES factor .)
    MINUS           reduce using rule 9 (term -> term TIMES factor .)
    $end            reduce using rule 9 (term -> term TIMES factor .)
    RPAREN          reduce using rule 9 (term -> term TIMES factor .)
    RLLAVE          reduce using rule 9 (term -> term TIMES factor .)


state 24

    (10) term -> term DIVIDE factor .

    TIMES           reduce using rule 10 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 10 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 10 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 10 (term -> term DIVIDE factor .)
    $end            reduce using rule 10 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 10 (term -> term DIVIDE factor .)
    RLLAVE          reduce using rule 10 (term -> term DIVIDE factor .)


state 25

    (4) cicloFor -> FOR LLLAVE codigo . RLLAVE

    RLLAVE          shift and go to state 27


state 26

    (5) impresion -> PRINT LPAREN expression RPAREN .

    $end            reduce using rule 5 (impresion -> PRINT LPAREN expression RPAREN .)
    RLLAVE          reduce using rule 5 (impresion -> PRINT LPAREN expression RPAREN .)


state 27

    (4) cicloFor -> FOR LLLAVE codigo RLLAVE .

    $end            reduce using rule 4 (cicloFor -> FOR LLLAVE codigo RLLAVE .)
    RLLAVE          reduce using rule 4 (cicloFor -> FOR LLLAVE codigo RLLAVE .)

