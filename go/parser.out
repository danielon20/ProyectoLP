Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    APPEND
    ARRAY
    BOOL
    BYTE
    CAP
    CASE
    COLON
    COMA
    COMMENT
    CONST
    COPY
    DECREASE
    DEQUAL
    ELSE
    EQUAL
    EQUAL_COMPARE
    FALSE
    FLOAT
    FLOAT32
    FLOAT64
    FOR
    FUNC
    GREATER
    GREATER_OR_EQUAL
    IF
    INCREASE
    INT
    INTERFACE
    JOIN
    LCORCHE
    LEN
    LLLAVE
    MAIN
    MAKE
    MAP
    MOD
    MULTI_COMMENT
    NOT
    NOT_EQUAL
    OR
    PACKAGE
    POINTER
    RCORCHE
    RLLAVE
    SCAN
    SMALLER
    SMALLER_OR_EQUAL
    STRING
    STRUCT
    SWITCH
    TRUE
    TYPE
    VAR

Grammar

Rule 0     S' -> codigo
Rule 1     codigo -> impresion
Rule 2     codigo -> expression
Rule 3     impresion -> PRINT LPAREN expression RPAREN
Rule 4     expression -> expression PLUS term
Rule 5     expression -> expression MINUS term
Rule 6     expression -> term
Rule 7     term -> term TIMES factor
Rule 8     term -> term DIVIDE factor
Rule 9     term -> factor
Rule 10    factor -> INTEGER
Rule 11    factor -> ID
Rule 12    factor -> LPAREN expression RPAREN

Terminals, with rules where they appear

AND                  : 
APPEND               : 
ARRAY                : 
BOOL                 : 
BYTE                 : 
CAP                  : 
CASE                 : 
COLON                : 
COMA                 : 
COMMENT              : 
CONST                : 
COPY                 : 
DECREASE             : 
DEQUAL               : 
DIVIDE               : 8
ELSE                 : 
EQUAL                : 
EQUAL_COMPARE        : 
FALSE                : 
FLOAT                : 
FLOAT32              : 
FLOAT64              : 
FOR                  : 
FUNC                 : 
GREATER              : 
GREATER_OR_EQUAL     : 
ID                   : 11
IF                   : 
INCREASE             : 
INT                  : 
INTEGER              : 10
INTERFACE            : 
JOIN                 : 
LCORCHE              : 
LEN                  : 
LLLAVE               : 
LPAREN               : 3 12
MAIN                 : 
MAKE                 : 
MAP                  : 
MINUS                : 5
MOD                  : 
MULTI_COMMENT        : 
NOT                  : 
NOT_EQUAL            : 
OR                   : 
PACKAGE              : 
PLUS                 : 4
POINTER              : 
PRINT                : 3
RCORCHE              : 
RLLAVE               : 
RPAREN               : 3 12
SCAN                 : 
SMALLER              : 
SMALLER_OR_EQUAL     : 
STRING               : 
STRUCT               : 
SWITCH               : 
TIMES                : 7
TRUE                 : 
TYPE                 : 
VAR                  : 
error                : 

Nonterminals, with rules where they appear

codigo               : 0
expression           : 2 3 4 5 12
factor               : 7 8 9
impresion            : 1
term                 : 4 5 6 7 8

Parsing method: LALR

state 0

    (0) S' -> . codigo
    (1) codigo -> . impresion
    (2) codigo -> . expression
    (3) impresion -> . PRINT LPAREN expression RPAREN
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) term -> . term TIMES factor
    (8) term -> . term DIVIDE factor
    (9) term -> . factor
    (10) factor -> . INTEGER
    (11) factor -> . ID
    (12) factor -> . LPAREN expression RPAREN

    PRINT           shift and go to state 4
    INTEGER         shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 5

    codigo                         shift and go to state 1
    impresion                      shift and go to state 2
    expression                     shift and go to state 3
    term                           shift and go to state 6
    factor                         shift and go to state 7

state 1

    (0) S' -> codigo .



state 2

    (1) codigo -> impresion .

    $end            reduce using rule 1 (codigo -> impresion .)


state 3

    (2) codigo -> expression .
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term

    $end            reduce using rule 2 (codigo -> expression .)
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11


state 4

    (3) impresion -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 12


state 5

    (12) factor -> LPAREN . expression RPAREN
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) term -> . term TIMES factor
    (8) term -> . term DIVIDE factor
    (9) term -> . factor
    (10) factor -> . INTEGER
    (11) factor -> . ID
    (12) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 5

    expression                     shift and go to state 13
    term                           shift and go to state 6
    factor                         shift and go to state 7

state 6

    (6) expression -> term .
    (7) term -> term . TIMES factor
    (8) term -> term . DIVIDE factor

    PLUS            reduce using rule 6 (expression -> term .)
    MINUS           reduce using rule 6 (expression -> term .)
    $end            reduce using rule 6 (expression -> term .)
    RPAREN          reduce using rule 6 (expression -> term .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15


state 7

    (9) term -> factor .

    TIMES           reduce using rule 9 (term -> factor .)
    DIVIDE          reduce using rule 9 (term -> factor .)
    PLUS            reduce using rule 9 (term -> factor .)
    MINUS           reduce using rule 9 (term -> factor .)
    $end            reduce using rule 9 (term -> factor .)
    RPAREN          reduce using rule 9 (term -> factor .)


state 8

    (10) factor -> INTEGER .

    TIMES           reduce using rule 10 (factor -> INTEGER .)
    DIVIDE          reduce using rule 10 (factor -> INTEGER .)
    PLUS            reduce using rule 10 (factor -> INTEGER .)
    MINUS           reduce using rule 10 (factor -> INTEGER .)
    $end            reduce using rule 10 (factor -> INTEGER .)
    RPAREN          reduce using rule 10 (factor -> INTEGER .)


state 9

    (11) factor -> ID .

    TIMES           reduce using rule 11 (factor -> ID .)
    DIVIDE          reduce using rule 11 (factor -> ID .)
    PLUS            reduce using rule 11 (factor -> ID .)
    MINUS           reduce using rule 11 (factor -> ID .)
    $end            reduce using rule 11 (factor -> ID .)
    RPAREN          reduce using rule 11 (factor -> ID .)


state 10

    (4) expression -> expression PLUS . term
    (7) term -> . term TIMES factor
    (8) term -> . term DIVIDE factor
    (9) term -> . factor
    (10) factor -> . INTEGER
    (11) factor -> . ID
    (12) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 5

    term                           shift and go to state 16
    factor                         shift and go to state 7

state 11

    (5) expression -> expression MINUS . term
    (7) term -> . term TIMES factor
    (8) term -> . term DIVIDE factor
    (9) term -> . factor
    (10) factor -> . INTEGER
    (11) factor -> . ID
    (12) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 5

    term                           shift and go to state 17
    factor                         shift and go to state 7

state 12

    (3) impresion -> PRINT LPAREN . expression RPAREN
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) term -> . term TIMES factor
    (8) term -> . term DIVIDE factor
    (9) term -> . factor
    (10) factor -> . INTEGER
    (11) factor -> . ID
    (12) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 5

    expression                     shift and go to state 18
    term                           shift and go to state 6
    factor                         shift and go to state 7

state 13

    (12) factor -> LPAREN expression . RPAREN
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term

    RPAREN          shift and go to state 19
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11


state 14

    (7) term -> term TIMES . factor
    (10) factor -> . INTEGER
    (11) factor -> . ID
    (12) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 5

    factor                         shift and go to state 20

state 15

    (8) term -> term DIVIDE . factor
    (10) factor -> . INTEGER
    (11) factor -> . ID
    (12) factor -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 5

    factor                         shift and go to state 21

state 16

    (4) expression -> expression PLUS term .
    (7) term -> term . TIMES factor
    (8) term -> term . DIVIDE factor

    PLUS            reduce using rule 4 (expression -> expression PLUS term .)
    MINUS           reduce using rule 4 (expression -> expression PLUS term .)
    $end            reduce using rule 4 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 4 (expression -> expression PLUS term .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15


state 17

    (5) expression -> expression MINUS term .
    (7) term -> term . TIMES factor
    (8) term -> term . DIVIDE factor

    PLUS            reduce using rule 5 (expression -> expression MINUS term .)
    MINUS           reduce using rule 5 (expression -> expression MINUS term .)
    $end            reduce using rule 5 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 5 (expression -> expression MINUS term .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15


state 18

    (3) impresion -> PRINT LPAREN expression . RPAREN
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term

    RPAREN          shift and go to state 22
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11


state 19

    (12) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 12 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 12 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 12 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 12 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 12 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 12 (factor -> LPAREN expression RPAREN .)


state 20

    (7) term -> term TIMES factor .

    TIMES           reduce using rule 7 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 7 (term -> term TIMES factor .)
    PLUS            reduce using rule 7 (term -> term TIMES factor .)
    MINUS           reduce using rule 7 (term -> term TIMES factor .)
    $end            reduce using rule 7 (term -> term TIMES factor .)
    RPAREN          reduce using rule 7 (term -> term TIMES factor .)


state 21

    (8) term -> term DIVIDE factor .

    TIMES           reduce using rule 8 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 8 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 8 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 8 (term -> term DIVIDE factor .)
    $end            reduce using rule 8 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 8 (term -> term DIVIDE factor .)


state 22

    (3) impresion -> PRINT LPAREN expression RPAREN .

    $end            reduce using rule 3 (impresion -> PRINT LPAREN expression RPAREN .)

