
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND APPEND ARRAY BOOL BYTE CAP CASE COLON COMA COMMENT CONST COPY DECREASE DEFAULT DELETE DEQUAL DIVIDE ELSE EQUAL EQUAL_COMPARE FALSE FLOAT FLOAT32 FLOAT64 FOR FUNC GREATER GREATER_OR_EQUAL ID IF INCREASE INT32 INT64 INTEGER INTERFACE JOIN LCORCHE LEN LLLAVE LPAREN MAIN MAKE MAP MINUS MOD MULTI_COMMENT NOT NOT_EQUAL OR PACKAGE PLUS POINTER POINTS PRINT RCORCHE RETURN RLLAVE RPAREN SCAN SMALLER SMALLER_OR_EQUAL STRING STRUCT SWITCH TIMES TRUE TYPE VAR WFLOAT WINT WSTRINGcodigo : impresion COLON\n              | impresion\n\n              | scan_func COLON\n              | scan_func\n\n              | expression COLON\n              | expression\n\n              | cicloFor\n\n              | comparison\n\n              | logic_operation\n\n              | decVar COLON\n              | decVar\n\n              | var_asignation\n              | var_asignation COLON\n\n              | funciones\n              | funciones COLON\n\n              | SenIF\n              | SenElseIF\n              | SenElse\n\n              | SenStruct\n              | cStruct\n\n              | switch_statement\n\n              | array_declaration COLON\n              | array_declaration\n              | array_var COLON\n              | array_var\n              | array_assignment COLON\n              | array_assignment\n\n              | slice_declaration COLON\n              | slice_declaration\n              | slice_var COLON\n              | slice_var\n              | slice_assignment COLON\n              | slice_assignment\n              \n              | map_declaration COLON\n              | map_declaration\n              | map_assignment COLON\n              | map_assignment\n              \n              | func_declaration\n              \n              | main_funcvalues : STRING\n              | INTEGER\n              | FLOAT\n              | TRUE\n              | FALSEdata_types : INT32\n            | INT64\n            | FLOAT32\n            | FLOAT64\n            | BYTE\n            | WINT\n            | WFLOAT\n            | WSTRING\n            | BOOLoperations : expression \n                  | comparison \n                  | logic_operationdata_structure : array_var\n                      | map_varvar_asignation : ID EQUAL any\n                any : values\n                      | operations\n                      | ID\n                      | data_structure\n                      | funcionesarr_content :  LLLAVE items COMA more_items RLLAVE\n                | LLLAVE items RLLAVE\n                \n        more_items : items COMA more_items\n                   | items\n                   \n             items : values\n                   | operationssomething : ID \n                 | data_structure\n                 | values\n                 | operationsmain_func : FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVEscan_func : SCAN LPAREN POINTER RPARENcicloFor : FOR LLLAVE codigo RLLAVE\n                | FOR comparison LLLAVE codigo RLLAVE\n                | FOR logic_operation LLLAVE codigo RLLAVE\n                | FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE\n       incre    : ID INCREASE\n                | ID DECREASEdecVar : decVarOne\n              | VAR ID EQUAL INTEGER\n              | VAR ID EQUAL ID\n              | VAR ID EQUAL FLOAT\n              | VAR ID EQUAL expression\n              | VAR ID EQUAL logic_operation\n              | VAR ID EQUAL comparison\n              | VAR ID EQUAL STRING\n              | ID DEQUAL STRING\n              | ID DEQUAL FLOAT\n              | ID DEQUAL expression\n              | ID DEQUAL logic_operation\n              | ID DEQUAL comparisonslice_declaration : VAR ID LCORCHE RCORCHE data_types\n                         | VAR ID EQUAL LCORCHE RCORCHE data_types arr_content\n                         | VAR ID EQUAL funM\n                         | ID DEQUAL funM\n                         | ID DEQUAL LCORCHE RCORCHE data_types arr_content\n\n\n                    funM : MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN\n                         | MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN\n                         \n                     cap : INTEGER\n                         | ID\n                         | expressionslice_var : ID LCORCHE index_s RCORCHE\n         \n         index_s : ID\n                 | INTEGER\n                 | expressionslice_assignment : slice_var EQUAL something_s\n    \n              something_s : ID \n                        | array_var\n                        | values\n                        | operationsfunciones : APPEND LPAREN ID COMA values RPAREN\n                 | APPEND LPAREN ID COMA ID RPAREN\n                 | LEN LPAREN ID RPAREN\n                 | COPY LPAREN ID COMA ID RPAREN\n                 | DELETE LPAREN ID COMA ID RPARENdecVarOne : ID DEQUAL ID\n                 | ID DEQUAL INTEGERSenIF : IF comparison LLLAVE codigo RLLAVE\n             | IF TRUE LLLAVE codigo RLLAVE\n             | IF FALSE LLLAVE codigo RLLAVESenElseIF : ELSE IF comparison LLLAVE codigo RLLAVE\n             | ELSE IF TRUE LLLAVE codigo RLLAVE\n             | ELSE IF FALSE LLLAVE codigo RLLAVESenElse : ELSE LLLAVE codigo RLLAVESenStruct : TYPE ID STRUCT LLLAVE declaration RLLAVE\n    \n       declaration : variable data_types\n                   | declaration variable data_types\n       \n       variable    : IDcStruct : ID DEQUAL ID LLLAVE asignaciones RLLAVE\n    \n       asignaciones : ID POINTS valor\n                    | ID POINTS valor COMA asignaciones\n       \n       valor : ID\n             | INTEGER\n             | TRUE\n             | FALSEcomparison : value op value\n       value      : ID\n                  | expression\n       op         : GREATER\n                  | SMALLER\n                  | GREATER_OR_EQUAL\n                  | SMALLER_OR_EQUAL\n                  | EQUAL_COMPARE\n                  | NOT_EQUALlogic_operation : logic_value logic_recu\n                       | negation\n\n       logic_recu      : logic_op logic_value\n                       | logic_op logic_value logic_recu\n        \n\n       logic_value     : negation\n                       | comparison\n                       | ID\n\n       negation        : NOT comparison\n                       | NOT ID\n                       \n       logic_op        : AND\n                       | ORswitch_statement : SWITCH ID LLLAVE cases RLLAVE\n\n                  cases : CASE values POINTS codigo \n                        | CASE values POINTS codigo more\n\n                  more : cases \n                       | DEFAULT POINTS codigoarray_declaration : VAR ID LCORCHE capacity RCORCHE data_types\n                         | VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content\n\n       capacity : INTEGER \n                | ID\n                | expressionarray_var : ID LCORCHE index RCORCHE\n         \n           index : ID\n                 | INTEGER\n                 | expressionarray_assignment : array_var EQUAL somethingmap_declaration : VAR ID LCORCHE data_types RCORCHE data_typesmap_var : ID LCORCHE key RCORCHE\n           key : ID \n               | values\n               | operationsmap_assignment : array_var EQUAL somethingfunc_declaration : FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE\n                        | FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN return_value RLLAVE\n\n                return_value : retorno COLON\n                             | retorno\n                \n                retorno : ID \n                        | values\n                        | operations\n                        | data_structure\n                        \n                params : ID data_types \n                       | more_params\n                       \n                more_params : ID data_types COMA paramsimpresion : PRINT LPAREN content RPAREN\n         content : values\n                 | operations\n                 | funciones\n                 | data_structure\n                 | IDexpression : something_ex\n                  | something_ex adicionaEx\n\n       adicionaEx : op something_ex\n                  | op something_ex adicionaEx\n\n    something_ex : ID\n                 | INTEGER\n                 | FLOAT\n                 | data_structure\n                 | funciones\n\n              op : PLUS\n                 | TIMES\n                 | DIVIDE\n                 | MINUS'
    
_lr_action_items = {'PRINT':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'SCAN':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'FOR':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'VAR':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'ID':([0,30,35,43,45,46,47,49,59,63,67,70,71,72,73,74,75,76,77,78,79,80,81,89,91,92,93,95,96,97,98,99,100,101,106,107,142,143,144,145,146,152,153,182,183,184,191,213,221,222,223,224,225,226,227,228,229,230,236,238,239,243,244,245,247,256,279,285,292,295,306,307,308,311,326,329,333,334,336,341,350,351,358,360,],[36,85,94,105,108,109,110,113,115,128,137,140,-143,-144,-145,-146,-147,-148,-207,-208,-209,-210,36,105,151,-158,-159,154,164,170,178,179,180,181,105,36,36,36,105,200,202,206,215,36,36,36,250,215,-45,-46,-47,-48,-49,-50,-51,-52,-53,262,266,270,271,36,36,36,278,287,278,36,316,324,-130,36,250,36,-131,36,262,324,348,352,36,352,324,348,]),'APPEND':([0,30,43,49,59,63,67,70,71,72,73,74,75,76,77,78,79,80,81,89,91,92,93,95,96,97,106,107,142,143,144,146,152,153,182,183,184,213,243,244,245,285,295,307,311,329,334,336,341,350,351,358,360,],[39,39,39,39,39,39,39,39,-143,-144,-145,-146,-147,-148,-207,-208,-209,-210,39,39,39,-158,-159,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'LEN':([0,30,43,49,59,63,67,70,71,72,73,74,75,76,77,78,79,80,81,89,91,92,93,95,96,97,106,107,142,143,144,146,152,153,182,183,184,213,243,244,245,285,295,307,311,329,334,336,341,350,351,358,360,],[40,40,40,40,40,40,40,40,-143,-144,-145,-146,-147,-148,-207,-208,-209,-210,40,40,40,-158,-159,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'COPY':([0,30,43,49,59,63,67,70,71,72,73,74,75,76,77,78,79,80,81,89,91,92,93,95,96,97,106,107,142,143,144,146,152,153,182,183,184,213,243,244,245,285,295,307,311,329,334,336,341,350,351,358,360,],[41,41,41,41,41,41,41,41,-143,-144,-145,-146,-147,-148,-207,-208,-209,-210,41,41,41,-158,-159,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'DELETE':([0,30,43,49,59,63,67,70,71,72,73,74,75,76,77,78,79,80,81,89,91,92,93,95,96,97,106,107,142,143,144,146,152,153,182,183,184,213,243,244,245,285,295,307,311,329,334,336,341,350,351,358,360,],[42,42,42,42,42,42,42,42,-143,-144,-145,-146,-147,-148,-207,-208,-209,-210,42,42,42,-158,-159,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'IF':([0,44,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[43,106,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'ELSE':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'TYPE':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'SWITCH':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'FUNC':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'INTEGER':([0,30,43,49,59,63,67,70,71,72,73,74,75,76,77,78,79,80,81,89,91,92,93,95,96,97,106,107,142,143,144,145,146,152,153,182,183,184,213,236,243,244,245,249,285,292,295,307,311,329,334,336,341,350,351,358,360,],[37,37,37,37,120,120,120,37,-143,-144,-145,-146,-147,-148,-207,-208,-209,-210,37,37,37,-158,-159,162,120,174,37,37,37,37,37,201,203,207,219,37,37,37,219,268,37,37,37,268,37,318,120,37,37,37,120,347,120,37,120,120,347,]),'FLOAT':([0,30,43,49,59,63,67,70,71,72,73,74,75,76,77,78,79,80,81,89,91,92,93,95,96,97,106,107,142,143,144,146,152,153,182,183,184,213,236,243,244,245,249,285,295,307,311,329,334,336,341,350,351,358,360,],[38,38,38,38,121,121,121,38,-143,-144,-145,-146,-147,-148,-207,-208,-209,-210,38,38,38,-158,-159,156,121,121,38,38,38,38,38,121,208,38,38,38,38,38,269,38,38,38,269,38,121,38,38,38,121,38,121,38,121,121,38,]),'NOT':([0,30,59,63,67,81,91,92,93,95,96,97,107,142,143,146,152,182,183,184,243,244,245,285,295,307,311,329,334,341,350,351,358,],[49,49,49,49,49,49,49,-158,-159,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,29,31,34,36,37,38,48,50,51,52,53,54,55,56,57,58,60,61,62,64,65,66,69,86,87,88,90,105,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,140,147,148,149,150,151,154,155,156,157,158,159,160,162,164,165,166,167,168,169,193,194,195,196,205,206,207,208,209,210,211,212,214,221,222,223,224,225,226,227,228,229,233,234,235,237,246,254,255,260,272,273,274,281,290,291,293,294,297,298,299,300,301,302,303,304,315,330,332,335,342,359,361,364,368,369,],[0,-2,-4,-6,-7,-8,-9,-11,-12,-14,-16,-17,-18,-19,-20,-21,-23,-25,-27,-29,-31,-33,-35,-37,-38,-39,-198,-83,-150,-202,-203,-204,-205,-58,-1,-3,-5,-10,-13,-15,-22,-24,-26,-28,-30,-32,-34,-36,-199,-142,-206,-57,-149,-141,-156,-157,-174,-71,-72,-73,-74,-40,-41,-42,-43,-44,-54,-55,-56,-110,-111,-57,-113,-114,-200,-202,-140,-151,-153,-154,-155,-120,-91,-92,-93,-94,-95,-99,-121,-62,-59,-60,-61,-63,-64,-192,-76,-201,-77,-152,-85,-84,-86,-87,-88,-89,-90,-98,-45,-46,-47,-48,-49,-50,-51,-52,-53,-170,-106,-176,-117,-128,-78,-79,-96,-122,-123,-124,-160,-165,-175,-133,-100,-116,-115,-118,-119,-125,-126,-127,-129,-97,-75,-166,-66,-80,-65,-101,-182,-181,-102,]),'COLON':([2,3,4,8,9,10,17,18,19,20,21,22,23,24,29,31,34,36,37,38,48,50,69,84,86,87,88,90,105,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,140,147,148,149,150,151,154,155,156,157,158,159,160,162,164,165,166,167,168,169,193,194,195,199,200,201,205,206,207,208,209,210,211,212,214,221,222,223,224,225,226,227,228,229,233,234,235,237,260,290,291,294,297,298,299,300,315,332,335,352,354,355,356,357,359,361,369,],[51,52,53,54,55,56,57,58,60,61,62,64,65,66,-198,-83,-150,-202,-203,-204,-205,-58,-199,144,-142,-206,-57,-149,-141,-156,-157,-174,-71,-72,-73,-74,-40,-41,-42,-43,-44,-54,-55,-56,-110,-111,-57,-113,-114,-200,-202,-140,-151,-153,-154,-155,-120,-91,-92,-93,-94,-95,-99,-121,-62,-59,-60,-61,-63,-64,-192,-76,-201,256,-120,-121,-152,-85,-84,-86,-87,-88,-89,-90,-98,-45,-46,-47,-48,-49,-50,-51,-52,-53,-170,-106,-176,-117,-96,-165,-175,-100,-116,-115,-118,-119,-97,-166,-66,-185,365,-186,-187,-188,-65,-101,-102,]),'RLLAVE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,29,31,34,36,37,38,48,50,51,52,53,54,55,56,57,58,60,61,62,64,65,66,69,86,87,88,90,105,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,140,141,147,148,149,150,151,154,155,156,157,158,159,160,162,164,165,166,167,168,169,188,193,194,195,196,197,198,205,206,207,208,209,210,211,212,214,221,222,223,224,225,226,227,228,229,233,234,235,237,240,241,242,246,248,254,255,260,263,272,273,274,275,276,277,279,281,290,291,293,294,297,298,299,300,301,302,303,304,306,310,315,316,317,318,319,320,321,322,323,324,326,327,330,331,332,335,337,338,342,343,344,345,352,353,354,355,356,357,359,361,362,363,364,365,366,368,369,],[-2,-4,-6,-7,-8,-9,-11,-12,-14,-16,-17,-18,-19,-20,-21,-23,-25,-27,-29,-31,-33,-35,-37,-38,-39,-198,-83,-150,-202,-203,-204,-205,-58,-1,-3,-5,-10,-13,-15,-22,-24,-26,-28,-30,-32,-34,-36,-199,-142,-206,-57,-149,-141,-156,-157,-174,-71,-72,-73,-74,-40,-41,-42,-43,-44,-54,-55,-56,-110,-111,-57,-113,-114,-200,-202,196,-140,-151,-153,-154,-155,-120,-91,-92,-93,-94,-95,-99,-121,-62,-59,-60,-61,-63,-64,246,-192,-76,-201,-77,254,255,-152,-85,-84,-86,-87,-88,-89,-90,-98,-45,-46,-47,-48,-49,-50,-51,-52,-53,-170,-106,-176,-117,272,273,274,-128,281,-78,-79,-96,293,-122,-123,-124,301,302,303,304,-160,-165,-175,-133,-100,-116,-115,-118,-119,-125,-126,-127,-129,-130,330,-97,-136,-134,-137,-138,-139,335,-69,-70,-202,-131,-161,-75,342,-166,-66,-162,-163,-80,-135,-68,359,-185,364,-184,-186,-187,-188,-65,-101,-164,368,-182,-183,-67,-181,-102,]),'DEFAULT':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,29,31,34,36,37,38,48,50,51,52,53,54,55,56,57,58,60,61,62,64,65,66,69,86,87,88,90,105,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,140,147,148,149,150,151,154,155,156,157,158,159,160,162,164,165,166,167,168,169,193,194,195,196,205,206,207,208,209,210,211,212,214,221,222,223,224,225,226,227,228,229,233,234,235,237,246,254,255,260,272,273,274,281,290,291,293,294,297,298,299,300,301,302,303,304,315,327,330,332,335,342,359,361,364,368,369,],[-2,-4,-6,-7,-8,-9,-11,-12,-14,-16,-17,-18,-19,-20,-21,-23,-25,-27,-29,-31,-33,-35,-37,-38,-39,-198,-83,-150,-202,-203,-204,-205,-58,-1,-3,-5,-10,-13,-15,-22,-24,-26,-28,-30,-32,-34,-36,-199,-142,-206,-57,-149,-141,-156,-157,-174,-71,-72,-73,-74,-40,-41,-42,-43,-44,-54,-55,-56,-110,-111,-57,-113,-114,-200,-202,-140,-151,-153,-154,-155,-120,-91,-92,-93,-94,-95,-99,-121,-62,-59,-60,-61,-63,-64,-192,-76,-201,-77,-152,-85,-84,-86,-87,-88,-89,-90,-98,-45,-46,-47,-48,-49,-50,-51,-52,-53,-170,-106,-176,-117,-128,-78,-79,-96,-122,-123,-124,-160,-165,-175,-133,-100,-116,-115,-118,-119,-125,-126,-127,-129,-97,339,-75,-166,-66,-80,-65,-101,-182,-181,-102,]),'CASE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,29,31,34,36,37,38,48,50,51,52,53,54,55,56,57,58,60,61,62,64,65,66,69,86,87,88,90,105,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,140,147,148,149,150,151,154,155,156,157,158,159,160,162,164,165,166,167,168,169,190,193,194,195,196,205,206,207,208,209,210,211,212,214,221,222,223,224,225,226,227,228,229,233,234,235,237,246,254,255,260,272,273,274,281,290,291,293,294,297,298,299,300,301,302,303,304,315,327,330,332,335,342,359,361,364,368,369,],[-2,-4,-6,-7,-8,-9,-11,-12,-14,-16,-17,-18,-19,-20,-21,-23,-25,-27,-29,-31,-33,-35,-37,-38,-39,-198,-83,-150,-202,-203,-204,-205,-58,-1,-3,-5,-10,-13,-15,-22,-24,-26,-28,-30,-32,-34,-36,-199,-142,-206,-57,-149,-141,-156,-157,-174,-71,-72,-73,-74,-40,-41,-42,-43,-44,-54,-55,-56,-110,-111,-57,-113,-114,-200,-202,-140,-151,-153,-154,-155,-120,-91,-92,-93,-94,-95,-99,-121,-62,-59,-60,-61,-63,-64,249,-192,-76,-201,-77,-152,-85,-84,-86,-87,-88,-89,-90,-98,-45,-46,-47,-48,-49,-50,-51,-52,-53,-170,-106,-176,-117,-128,-78,-79,-96,-122,-123,-124,-160,-165,-175,-133,-100,-116,-115,-118,-119,-125,-126,-127,-129,-97,249,-75,-166,-66,-80,-65,-101,-182,-181,-102,]),'RETURN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,29,31,34,36,37,38,48,50,51,52,53,54,55,56,57,58,60,61,62,64,65,66,69,86,87,88,90,105,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,140,147,148,149,150,151,154,155,156,157,158,159,160,162,164,165,166,167,168,169,193,194,195,196,205,206,207,208,209,210,211,212,214,221,222,223,224,225,226,227,228,229,233,234,235,237,246,254,255,260,272,273,274,281,290,291,293,294,297,298,299,300,301,302,303,304,315,329,330,332,335,340,342,359,361,364,368,369,],[-2,-4,-6,-7,-8,-9,-11,-12,-14,-16,-17,-18,-19,-20,-21,-23,-25,-27,-29,-31,-33,-35,-37,-38,-39,-198,-83,-150,-202,-203,-204,-205,-58,-1,-3,-5,-10,-13,-15,-22,-24,-26,-28,-30,-32,-34,-36,-199,-142,-206,-57,-149,-141,-156,-157,-174,-71,-72,-73,-74,-40,-41,-42,-43,-44,-54,-55,-56,-110,-111,-57,-113,-114,-200,-202,-140,-151,-153,-154,-155,-120,-91,-92,-93,-94,-95,-99,-121,-62,-59,-60,-61,-63,-64,-192,-76,-201,-77,-152,-85,-84,-86,-87,-88,-89,-90,-98,-45,-46,-47,-48,-49,-50,-51,-52,-53,-170,-106,-176,-117,-128,-78,-79,-96,-122,-123,-124,-160,-165,-175,-133,-100,-116,-115,-118,-119,-125,-126,-127,-129,-97,341,-75,-166,-66,351,-80,-65,-101,-182,-181,-102,]),'GREATER':([4,10,18,29,32,36,37,38,48,50,69,85,86,87,88,105,113,115,116,120,121,124,128,129,135,136,137,139,140,151,154,156,157,162,164,168,169,170,174,175,195,202,203,204,206,207,208,209,215,219,233,235,237,297,298,299,300,324,347,348,352,357,],[-142,-206,-57,71,71,-141,-203,-204,-205,-58,-199,-141,-142,-206,-57,-141,-141,-141,-205,-203,-204,-142,-141,-57,-206,-205,-141,71,-202,-141,-141,-204,-142,-203,-141,-205,-206,-141,-203,-142,-201,-141,-203,-142,-141,-203,-204,-142,-202,-203,-170,-176,-117,-116,-115,-118,-119,-141,-203,-202,-141,-205,]),'SMALLER':([4,10,18,29,32,36,37,38,48,50,69,85,86,87,88,105,113,115,116,120,121,124,128,129,135,136,137,139,140,151,154,156,157,162,164,168,169,170,174,175,195,202,203,204,206,207,208,209,215,219,233,235,237,297,298,299,300,324,347,348,352,357,],[-142,-206,-57,72,72,-141,-203,-204,-205,-58,-199,-141,-142,-206,-57,-141,-141,-141,-205,-203,-204,-142,-141,-57,-206,-205,-141,72,-202,-141,-141,-204,-142,-203,-141,-205,-206,-141,-203,-142,-201,-141,-203,-142,-141,-203,-204,-142,-202,-203,-170,-176,-117,-116,-115,-118,-119,-141,-203,-202,-141,-205,]),'GREATER_OR_EQUAL':([4,10,18,29,32,36,37,38,48,50,69,85,86,87,88,105,113,115,116,120,121,124,128,129,135,136,137,139,140,151,154,156,157,162,164,168,169,170,174,175,195,202,203,204,206,207,208,209,215,219,233,235,237,297,298,299,300,324,347,348,352,357,],[-142,-206,-57,73,73,-141,-203,-204,-205,-58,-199,-141,-142,-206,-57,-141,-141,-141,-205,-203,-204,-142,-141,-57,-206,-205,-141,73,-202,-141,-141,-204,-142,-203,-141,-205,-206,-141,-203,-142,-201,-141,-203,-142,-141,-203,-204,-142,-202,-203,-170,-176,-117,-116,-115,-118,-119,-141,-203,-202,-141,-205,]),'SMALLER_OR_EQUAL':([4,10,18,29,32,36,37,38,48,50,69,85,86,87,88,105,113,115,116,120,121,124,128,129,135,136,137,139,140,151,154,156,157,162,164,168,169,170,174,175,195,202,203,204,206,207,208,209,215,219,233,235,237,297,298,299,300,324,347,348,352,357,],[-142,-206,-57,74,74,-141,-203,-204,-205,-58,-199,-141,-142,-206,-57,-141,-141,-141,-205,-203,-204,-142,-141,-57,-206,-205,-141,74,-202,-141,-141,-204,-142,-203,-141,-205,-206,-141,-203,-142,-201,-141,-203,-142,-141,-203,-204,-142,-202,-203,-170,-176,-117,-116,-115,-118,-119,-141,-203,-202,-141,-205,]),'EQUAL_COMPARE':([4,10,18,29,32,36,37,38,48,50,69,85,86,87,88,105,113,115,116,120,121,124,128,129,135,136,137,139,140,151,154,156,157,162,164,168,169,170,174,175,195,202,203,204,206,207,208,209,215,219,233,235,237,297,298,299,300,324,347,348,352,357,],[-142,-206,-57,75,75,-141,-203,-204,-205,-58,-199,-141,-142,-206,-57,-141,-141,-141,-205,-203,-204,-142,-141,-57,-206,-205,-141,75,-202,-141,-141,-204,-142,-203,-141,-205,-206,-141,-203,-142,-201,-141,-203,-142,-141,-203,-204,-142,-202,-203,-170,-176,-117,-116,-115,-118,-119,-141,-203,-202,-141,-205,]),'NOT_EQUAL':([4,10,18,29,32,36,37,38,48,50,69,85,86,87,88,105,113,115,116,120,121,124,128,129,135,136,137,139,140,151,154,156,157,162,164,168,169,170,174,175,195,202,203,204,206,207,208,209,215,219,233,235,237,297,298,299,300,324,347,348,352,357,],[-142,-206,-57,76,76,-141,-203,-204,-205,-58,-199,-141,-142,-206,-57,-141,-141,-141,-205,-203,-204,-142,-141,-57,-206,-205,-141,76,-202,-141,-141,-204,-142,-203,-141,-205,-206,-141,-203,-142,-201,-141,-203,-142,-141,-203,-204,-142,-202,-203,-170,-176,-117,-116,-115,-118,-119,-141,-203,-202,-141,-205,]),'PLUS':([4,10,18,29,32,36,37,38,48,50,69,85,86,87,88,105,113,115,116,120,121,124,128,129,135,136,137,139,140,151,154,156,157,162,164,168,169,170,174,175,195,202,203,204,206,207,208,209,215,219,233,235,237,297,298,299,300,324,347,348,352,357,],[-142,-206,-57,77,77,-141,-203,-204,-205,-58,-199,-141,-142,-206,-57,-141,-141,-141,-205,-203,-204,-142,-141,-57,-206,-205,-141,77,-202,-141,-141,-204,-142,-203,-141,-205,-206,-141,-203,-142,-201,-141,-203,-142,-141,-203,-204,-142,-202,-203,-170,-176,-117,-116,-115,-118,-119,-141,-203,-202,-141,-205,]),'TIMES':([4,10,18,29,32,36,37,38,48,50,69,85,86,87,88,105,113,115,116,120,121,124,128,129,135,136,137,139,140,151,154,156,157,162,164,168,169,170,174,175,195,202,203,204,206,207,208,209,215,219,233,235,237,297,298,299,300,324,347,348,352,357,],[-142,-206,-57,78,78,-141,-203,-204,-205,-58,-199,-141,-142,-206,-57,-141,-141,-141,-205,-203,-204,-142,-141,-57,-206,-205,-141,78,-202,-141,-141,-204,-142,-203,-141,-205,-206,-141,-203,-142,-201,-141,-203,-142,-141,-203,-204,-142,-202,-203,-170,-176,-117,-116,-115,-118,-119,-141,-203,-202,-141,-205,]),'DIVIDE':([4,10,18,29,32,36,37,38,48,50,69,85,86,87,88,105,113,115,116,120,121,124,128,129,135,136,137,139,140,151,154,156,157,162,164,168,169,170,174,175,195,202,203,204,206,207,208,209,215,219,233,235,237,297,298,299,300,324,347,348,352,357,],[-142,-206,-57,79,79,-141,-203,-204,-205,-58,-199,-141,-142,-206,-57,-141,-141,-141,-205,-203,-204,-142,-141,-57,-206,-205,-141,79,-202,-141,-141,-204,-142,-203,-141,-205,-206,-141,-203,-142,-201,-141,-203,-142,-141,-203,-204,-142,-202,-203,-170,-176,-117,-116,-115,-118,-119,-141,-203,-202,-141,-205,]),'MINUS':([4,10,18,29,32,36,37,38,48,50,69,85,86,87,88,105,113,115,116,120,121,124,128,129,135,136,137,139,140,151,154,156,157,162,164,168,169,170,174,175,195,202,203,204,206,207,208,209,215,219,233,235,237,297,298,299,300,324,347,348,352,357,],[-142,-206,-57,80,80,-141,-203,-204,-205,-58,-199,-141,-142,-206,-57,-141,-141,-141,-205,-203,-204,-142,-141,-57,-206,-205,-141,80,-202,-141,-141,-204,-142,-203,-141,-205,-206,-141,-203,-142,-201,-141,-203,-142,-141,-203,-204,-142,-202,-203,-170,-176,-117,-116,-115,-118,-119,-141,-203,-202,-141,-205,]),'AND':([6,29,33,34,36,37,38,48,50,69,82,85,86,87,88,105,112,113,115,125,128,137,139,140,147,148,149,150,151,154,159,164,170,195,202,206,211,233,235,237,297,298,299,300,324,352,],[-154,-198,92,-153,-155,-203,-204,-205,-58,-199,-154,-155,-142,-206,-57,-141,-156,-157,-155,-154,-155,-155,-200,-202,-140,92,-153,-154,-155,-155,-154,-155,-155,-201,-155,-155,-154,-170,-176,-117,-116,-115,-118,-119,-155,-155,]),'OR':([6,29,33,34,36,37,38,48,50,69,82,85,86,87,88,105,112,113,115,125,128,137,139,140,147,148,149,150,151,154,159,164,170,195,202,206,211,233,235,237,297,298,299,300,324,352,],[-154,-198,93,-153,-155,-203,-204,-205,-58,-199,-154,-155,-142,-206,-57,-141,-156,-157,-155,-154,-155,-155,-200,-202,-140,93,-153,-154,-155,-155,-154,-155,-155,-201,-155,-155,-154,-170,-176,-117,-116,-115,-118,-119,-155,-155,]),'EQUAL':([18,21,36,94,233,234,],[59,63,96,152,-170,-106,]),'LPAREN':([27,28,39,40,41,42,110,111,163,],[67,68,98,99,100,101,191,192,232,]),'RPAREN':([29,34,37,38,48,50,69,86,87,88,90,105,112,113,119,120,121,122,123,124,125,126,132,133,134,135,136,137,138,139,140,147,148,149,150,151,179,192,195,205,221,222,223,224,225,226,227,228,229,233,235,237,251,252,266,267,268,269,270,271,283,297,298,299,300,328,346,347,348,349,367,],[-198,-150,-203,-204,-205,-58,-199,-142,-206,-57,-149,-141,-156,-157,-40,-41,-42,-43,-44,-54,-55,-56,193,-193,-194,-195,-196,-197,194,-200,-202,-140,-151,-153,-154,-155,237,253,-201,-152,-45,-46,-47,-48,-49,-50,-51,-52,-53,-170,-176,-117,284,-190,297,298,-41,-42,299,300,-189,-116,-115,-118,-119,-191,361,-103,-104,-105,369,]),'LLLAVE':([29,30,34,37,38,44,48,50,69,82,83,86,87,88,90,102,103,104,105,109,112,113,139,140,147,148,149,150,151,154,185,186,187,189,195,205,221,222,223,224,225,226,227,228,229,233,235,237,253,264,286,289,297,298,299,300,309,312,313,314,],[-198,81,-150,-203,-204,107,-205,-58,-199,142,143,-142,-206,-57,-149,182,183,184,-141,190,-156,-157,-200,-202,-140,-151,-153,-154,-155,230,243,244,245,247,-201,-152,-45,-46,-47,-48,-49,-50,-51,-52,-53,-170,-176,-117,285,295,311,295,-116,-115,-118,-119,329,-81,-82,295,]),'RCORCHE':([29,34,37,38,48,50,69,86,87,88,90,105,112,113,119,121,122,123,125,126,139,140,147,148,149,150,151,153,161,170,171,172,173,174,175,176,177,195,202,203,204,205,213,215,216,218,219,220,221,222,223,224,225,226,227,228,229,233,235,237,257,265,297,298,299,300,],[-198,-150,-203,-204,-205,-58,-199,-142,-206,-57,-149,-141,-156,-157,-40,-42,-43,-44,-55,-56,-200,-202,-140,-151,-153,-154,-155,217,231,-107,233,234,235,-41,-54,-178,-179,-201,-171,-41,-54,-152,258,-168,259,261,-167,-169,-45,-46,-47,-48,-49,-50,-51,-52,-53,-170,-176,-117,288,296,-116,-115,-118,-119,]),'COMA':([29,34,37,38,48,50,69,86,87,88,90,105,112,113,119,120,121,122,123,124,125,126,139,140,147,148,149,150,151,178,180,181,195,205,221,222,223,224,225,226,227,228,229,233,235,237,283,297,298,299,300,316,317,318,319,320,321,322,323,324,325,344,346,347,348,349,],[-198,-150,-203,-204,-205,-58,-199,-142,-206,-57,-149,-141,-156,-157,-40,-41,-42,-43,-44,-54,-55,-56,-200,-202,-140,-151,-153,-154,-155,236,238,239,-201,-152,-45,-46,-47,-48,-49,-50,-51,-52,-53,-170,-176,-117,308,-116,-115,-118,-119,-136,333,-137,-138,-139,334,-69,-70,-202,336,358,360,-103,-104,-105,]),'DEQUAL':([36,85,],[95,145,]),'LCORCHE':([36,85,94,95,105,113,115,128,137,140,151,152,154,164,170,202,206,215,232,324,348,352,],[97,146,153,161,146,146,146,146,146,146,146,213,146,146,146,146,146,146,265,146,146,146,]),'TRUE':([43,59,63,67,96,97,106,146,236,249,292,295,334,341,351,358,],[103,122,122,122,122,122,186,122,122,122,319,122,122,122,122,122,]),'FALSE':([43,59,63,67,96,97,106,146,236,249,292,295,334,341,351,358,],[104,123,123,123,123,123,187,123,123,123,320,123,123,123,123,123,]),'MAIN':([47,],[111,]),'STRING':([59,63,67,95,96,97,146,152,236,249,295,334,341,351,358,],[119,119,119,155,119,119,119,212,119,119,119,119,119,119,119,]),'POINTER':([68,],[138,]),'MAKE':([95,152,],[163,163,]),'STRUCT':([108,],[189,]),'POINTS':([119,122,123,262,268,269,282,339,],[-40,-43,-44,292,-41,-42,307,350,]),'INT32':([153,217,231,250,258,259,261,278,280,284,288,296,305,],[221,221,221,221,221,221,221,-132,221,221,221,221,221,]),'INT64':([153,217,231,250,258,259,261,278,280,284,288,296,305,],[222,222,222,222,222,222,222,-132,222,222,222,222,222,]),'FLOAT32':([153,217,231,250,258,259,261,278,280,284,288,296,305,],[223,223,223,223,223,223,223,-132,223,223,223,223,223,]),'FLOAT64':([153,217,231,250,258,259,261,278,280,284,288,296,305,],[224,224,224,224,224,224,224,-132,224,224,224,224,224,]),'BYTE':([153,217,231,250,258,259,261,278,280,284,288,296,305,],[225,225,225,225,225,225,225,-132,225,225,225,225,225,]),'WINT':([153,217,231,250,258,259,261,278,280,284,288,296,305,],[226,226,226,226,226,226,226,-132,226,226,226,226,226,]),'WFLOAT':([153,217,231,250,258,259,261,278,280,284,288,296,305,],[227,227,227,227,227,227,227,-132,227,227,227,227,227,]),'WSTRING':([153,217,231,250,258,259,261,278,280,284,288,296,305,],[228,228,228,228,228,228,228,-132,228,228,228,228,228,]),'BOOL':([153,217,231,250,258,259,261,278,280,284,288,296,305,],[229,229,229,229,229,229,229,-132,229,229,229,229,229,]),'INCREASE':([287,],[312,]),'DECREASE':([287,],[313,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigo':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[1,141,188,197,198,240,241,242,275,276,277,310,327,331,340,362,]),'impresion':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'scan_func':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'expression':([0,30,43,49,59,63,67,81,89,91,95,96,97,106,107,142,143,144,146,152,153,182,183,184,213,243,244,245,285,295,307,311,329,334,336,341,350,351,358,360,],[4,86,86,86,124,124,124,4,86,86,157,124,175,86,4,4,4,86,204,209,220,4,4,4,220,4,4,4,4,124,4,4,4,124,349,124,4,124,124,349,]),'cicloFor':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'comparison':([0,30,43,49,59,63,67,81,91,95,96,97,106,107,142,143,144,146,152,182,183,184,243,244,245,285,295,307,311,329,334,341,350,351,358,],[6,82,102,112,125,125,125,6,150,159,125,125,185,6,6,6,199,125,211,6,6,6,6,6,6,6,125,6,6,6,125,125,6,125,125,]),'logic_operation':([0,30,59,63,67,81,95,96,97,107,142,143,146,152,182,183,184,243,244,245,285,295,307,311,329,334,341,350,351,358,],[7,83,126,126,126,7,158,126,126,7,7,7,126,210,7,7,7,7,7,7,7,126,7,7,7,126,126,7,126,126,]),'decVar':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'var_asignation':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'funciones':([0,30,43,49,59,63,67,70,81,89,91,95,96,97,106,107,142,143,144,146,152,153,182,183,184,213,243,244,245,285,295,307,311,329,334,336,341,350,351,358,360,],[10,87,87,87,87,87,135,87,10,87,87,87,169,87,87,10,10,10,87,87,87,87,10,10,10,87,10,10,10,10,87,10,10,10,87,87,87,10,87,87,87,]),'SenIF':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'SenElseIF':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'SenElse':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'SenStruct':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'cStruct':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'switch_statement':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'array_declaration':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'array_var':([0,30,43,49,59,63,67,70,81,89,91,95,96,97,106,107,142,143,144,146,152,153,182,183,184,213,243,244,245,285,295,307,311,329,334,336,341,350,351,358,360,],[18,88,88,88,88,129,88,88,18,88,88,88,88,88,88,18,18,18,88,88,88,88,18,18,18,88,18,18,18,18,88,18,18,18,88,88,88,18,88,88,88,]),'array_assignment':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'slice_declaration':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'slice_var':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'slice_assignment':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'map_declaration':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'map_assignment':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'func_declaration':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'main_func':([0,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'something_ex':([0,30,43,49,59,63,67,70,81,89,91,95,96,97,106,107,142,143,144,146,152,153,182,183,184,213,243,244,245,285,295,307,311,329,334,336,341,350,351,358,360,],[29,29,29,29,29,29,29,139,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'decVarOne':([0,30,81,107,142,143,182,183,184,243,244,245,285,307,311,329,350,],[31,84,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'value':([0,30,43,49,59,63,67,81,89,91,95,96,97,106,107,142,143,144,146,152,182,183,184,243,244,245,285,295,307,311,329,334,341,350,351,358,],[32,32,32,32,32,32,32,32,147,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'logic_value':([0,30,59,63,67,81,91,95,96,97,107,142,143,146,152,182,183,184,243,244,245,285,295,307,311,329,334,341,350,351,358,],[33,33,33,33,33,33,148,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'negation':([0,30,59,63,67,81,91,95,96,97,107,142,143,146,152,182,183,184,243,244,245,285,295,307,311,329,334,341,350,351,358,],[34,34,34,34,34,34,149,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'data_structure':([0,30,43,49,59,63,67,70,81,89,91,95,96,97,106,107,142,143,144,146,152,153,182,183,184,213,243,244,245,285,295,307,311,329,334,336,341,350,351,358,360,],[48,48,48,48,116,48,136,48,48,48,48,48,168,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,357,48,357,48,48,]),'map_var':([0,30,43,49,59,63,67,70,81,89,91,95,96,97,106,107,142,143,144,146,152,153,182,183,184,213,243,244,245,285,295,307,311,329,334,336,341,350,351,358,360,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'adicionaEx':([29,139,],[69,195,]),'op':([29,32,139,],[70,89,70,]),'logic_recu':([33,148,],[90,205,]),'logic_op':([33,148,],[91,91,]),'something':([59,],[114,]),'values':([59,63,67,96,97,146,236,249,295,334,341,351,358,],[117,130,133,166,176,176,267,282,322,322,355,355,322,]),'operations':([59,63,67,96,97,146,295,334,341,351,358,],[118,131,134,167,177,177,323,323,356,356,323,]),'something_s':([63,],[127,]),'content':([67,],[132,]),'funM':([95,152,],[160,214,]),'any':([96,],[165,]),'index':([97,146,],[171,171,]),'index_s':([97,],[172,]),'key':([97,146,],[173,173,]),'capacity':([153,213,],[216,257,]),'data_types':([153,217,231,250,258,259,261,280,284,288,296,305,],[218,260,264,283,289,290,291,306,309,314,325,326,]),'cases':([190,327,],[248,338,]),'params':([191,308,],[251,328,]),'more_params':([191,308,],[252,252,]),'asignaciones':([230,333,],[263,343,]),'declaration':([247,],[279,]),'variable':([247,279,],[280,305,]),'incre':([256,],[286,]),'arr_content':([264,289,314,],[294,315,332,]),'valor':([292,],[317,]),'items':([295,334,358,],[321,344,344,]),'more':([327,],[337,]),'more_items':([334,358,],[345,366,]),'cap':([336,360,],[346,367,]),'return_value':([341,],[353,]),'retorno':([341,351,],[354,363,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigo","S'",1,None,None,None),
  ('codigo -> impresion COLON','codigo',2,'p_coddigo','syntactic.py',17),
  ('codigo -> impresion','codigo',1,'p_coddigo','syntactic.py',18),
  ('codigo -> scan_func COLON','codigo',2,'p_coddigo','syntactic.py',20),
  ('codigo -> scan_func','codigo',1,'p_coddigo','syntactic.py',21),
  ('codigo -> expression COLON','codigo',2,'p_coddigo','syntactic.py',23),
  ('codigo -> expression','codigo',1,'p_coddigo','syntactic.py',24),
  ('codigo -> cicloFor','codigo',1,'p_coddigo','syntactic.py',26),
  ('codigo -> comparison','codigo',1,'p_coddigo','syntactic.py',28),
  ('codigo -> logic_operation','codigo',1,'p_coddigo','syntactic.py',30),
  ('codigo -> decVar COLON','codigo',2,'p_coddigo','syntactic.py',32),
  ('codigo -> decVar','codigo',1,'p_coddigo','syntactic.py',33),
  ('codigo -> var_asignation','codigo',1,'p_coddigo','syntactic.py',35),
  ('codigo -> var_asignation COLON','codigo',2,'p_coddigo','syntactic.py',36),
  ('codigo -> funciones','codigo',1,'p_coddigo','syntactic.py',38),
  ('codigo -> funciones COLON','codigo',2,'p_coddigo','syntactic.py',39),
  ('codigo -> SenIF','codigo',1,'p_coddigo','syntactic.py',41),
  ('codigo -> SenElseIF','codigo',1,'p_coddigo','syntactic.py',42),
  ('codigo -> SenElse','codigo',1,'p_coddigo','syntactic.py',43),
  ('codigo -> SenStruct','codigo',1,'p_coddigo','syntactic.py',45),
  ('codigo -> cStruct','codigo',1,'p_coddigo','syntactic.py',46),
  ('codigo -> switch_statement','codigo',1,'p_coddigo','syntactic.py',48),
  ('codigo -> array_declaration COLON','codigo',2,'p_coddigo','syntactic.py',50),
  ('codigo -> array_declaration','codigo',1,'p_coddigo','syntactic.py',51),
  ('codigo -> array_var COLON','codigo',2,'p_coddigo','syntactic.py',52),
  ('codigo -> array_var','codigo',1,'p_coddigo','syntactic.py',53),
  ('codigo -> array_assignment COLON','codigo',2,'p_coddigo','syntactic.py',54),
  ('codigo -> array_assignment','codigo',1,'p_coddigo','syntactic.py',55),
  ('codigo -> slice_declaration COLON','codigo',2,'p_coddigo','syntactic.py',57),
  ('codigo -> slice_declaration','codigo',1,'p_coddigo','syntactic.py',58),
  ('codigo -> slice_var COLON','codigo',2,'p_coddigo','syntactic.py',59),
  ('codigo -> slice_var','codigo',1,'p_coddigo','syntactic.py',60),
  ('codigo -> slice_assignment COLON','codigo',2,'p_coddigo','syntactic.py',61),
  ('codigo -> slice_assignment','codigo',1,'p_coddigo','syntactic.py',62),
  ('codigo -> map_declaration COLON','codigo',2,'p_coddigo','syntactic.py',64),
  ('codigo -> map_declaration','codigo',1,'p_coddigo','syntactic.py',65),
  ('codigo -> map_assignment COLON','codigo',2,'p_coddigo','syntactic.py',66),
  ('codigo -> map_assignment','codigo',1,'p_coddigo','syntactic.py',67),
  ('codigo -> func_declaration','codigo',1,'p_coddigo','syntactic.py',69),
  ('codigo -> main_func','codigo',1,'p_coddigo','syntactic.py',71),
  ('values -> STRING','values',1,'p_values','syntactic.py',74),
  ('values -> INTEGER','values',1,'p_values','syntactic.py',75),
  ('values -> FLOAT','values',1,'p_values','syntactic.py',76),
  ('values -> TRUE','values',1,'p_values','syntactic.py',77),
  ('values -> FALSE','values',1,'p_values','syntactic.py',78),
  ('data_types -> INT32','data_types',1,'p_data_types','syntactic.py',81),
  ('data_types -> INT64','data_types',1,'p_data_types','syntactic.py',82),
  ('data_types -> FLOAT32','data_types',1,'p_data_types','syntactic.py',83),
  ('data_types -> FLOAT64','data_types',1,'p_data_types','syntactic.py',84),
  ('data_types -> BYTE','data_types',1,'p_data_types','syntactic.py',85),
  ('data_types -> WINT','data_types',1,'p_data_types','syntactic.py',86),
  ('data_types -> WFLOAT','data_types',1,'p_data_types','syntactic.py',87),
  ('data_types -> WSTRING','data_types',1,'p_data_types','syntactic.py',88),
  ('data_types -> BOOL','data_types',1,'p_data_types','syntactic.py',89),
  ('operations -> expression','operations',1,'p_operations','syntactic.py',92),
  ('operations -> comparison','operations',1,'p_operations','syntactic.py',93),
  ('operations -> logic_operation','operations',1,'p_operations','syntactic.py',94),
  ('data_structure -> array_var','data_structure',1,'p_data_structure','syntactic.py',97),
  ('data_structure -> map_var','data_structure',1,'p_data_structure','syntactic.py',98),
  ('var_asignation -> ID EQUAL any','var_asignation',3,'p_var_asignation','syntactic.py',101),
  ('any -> values','any',1,'p_var_asignation','syntactic.py',102),
  ('any -> operations','any',1,'p_var_asignation','syntactic.py',103),
  ('any -> ID','any',1,'p_var_asignation','syntactic.py',104),
  ('any -> data_structure','any',1,'p_var_asignation','syntactic.py',105),
  ('any -> funciones','any',1,'p_var_asignation','syntactic.py',106),
  ('arr_content -> LLLAVE items COMA more_items RLLAVE','arr_content',5,'p_arr_content','syntactic.py',109),
  ('arr_content -> LLLAVE items RLLAVE','arr_content',3,'p_arr_content','syntactic.py',110),
  ('more_items -> items COMA more_items','more_items',3,'p_arr_content','syntactic.py',112),
  ('more_items -> items','more_items',1,'p_arr_content','syntactic.py',113),
  ('items -> values','items',1,'p_arr_content','syntactic.py',115),
  ('items -> operations','items',1,'p_arr_content','syntactic.py',116),
  ('something -> ID','something',1,'p_something','syntactic.py',120),
  ('something -> data_structure','something',1,'p_something','syntactic.py',121),
  ('something -> values','something',1,'p_something','syntactic.py',122),
  ('something -> operations','something',1,'p_something','syntactic.py',123),
  ('main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE','main_func',7,'p_main_func','syntactic.py',126),
  ('scan_func -> SCAN LPAREN POINTER RPAREN','scan_func',4,'p_scan_func','syntactic.py',129),
  ('cicloFor -> FOR LLLAVE codigo RLLAVE','cicloFor',4,'p_for','syntactic.py',135),
  ('cicloFor -> FOR comparison LLLAVE codigo RLLAVE','cicloFor',5,'p_for','syntactic.py',136),
  ('cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE','cicloFor',5,'p_for','syntactic.py',137),
  ('cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE','cicloFor',9,'p_for','syntactic.py',138),
  ('incre -> ID INCREASE','incre',2,'p_for','syntactic.py',139),
  ('incre -> ID DECREASE','incre',2,'p_for','syntactic.py',140),
  ('decVar -> decVarOne','decVar',1,'p_decVar','syntactic.py',143),
  ('decVar -> VAR ID EQUAL INTEGER','decVar',4,'p_decVar','syntactic.py',144),
  ('decVar -> VAR ID EQUAL ID','decVar',4,'p_decVar','syntactic.py',145),
  ('decVar -> VAR ID EQUAL FLOAT','decVar',4,'p_decVar','syntactic.py',146),
  ('decVar -> VAR ID EQUAL expression','decVar',4,'p_decVar','syntactic.py',147),
  ('decVar -> VAR ID EQUAL logic_operation','decVar',4,'p_decVar','syntactic.py',148),
  ('decVar -> VAR ID EQUAL comparison','decVar',4,'p_decVar','syntactic.py',149),
  ('decVar -> VAR ID EQUAL STRING','decVar',4,'p_decVar','syntactic.py',150),
  ('decVar -> ID DEQUAL STRING','decVar',3,'p_decVar','syntactic.py',151),
  ('decVar -> ID DEQUAL FLOAT','decVar',3,'p_decVar','syntactic.py',152),
  ('decVar -> ID DEQUAL expression','decVar',3,'p_decVar','syntactic.py',153),
  ('decVar -> ID DEQUAL logic_operation','decVar',3,'p_decVar','syntactic.py',154),
  ('decVar -> ID DEQUAL comparison','decVar',3,'p_decVar','syntactic.py',155),
  ('slice_declaration -> VAR ID LCORCHE RCORCHE data_types','slice_declaration',5,'p_slice_declaration','syntactic.py',160),
  ('slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content','slice_declaration',7,'p_slice_declaration','syntactic.py',161),
  ('slice_declaration -> VAR ID EQUAL funM','slice_declaration',4,'p_slice_declaration','syntactic.py',162),
  ('slice_declaration -> ID DEQUAL funM','slice_declaration',3,'p_slice_declaration','syntactic.py',163),
  ('slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content','slice_declaration',6,'p_slice_declaration','syntactic.py',164),
  ('funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN','funM',8,'p_slice_declaration','syntactic.py',167),
  ('funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN','funM',10,'p_slice_declaration','syntactic.py',168),
  ('cap -> INTEGER','cap',1,'p_slice_declaration','syntactic.py',170),
  ('cap -> ID','cap',1,'p_slice_declaration','syntactic.py',171),
  ('cap -> expression','cap',1,'p_slice_declaration','syntactic.py',172),
  ('slice_var -> ID LCORCHE index_s RCORCHE','slice_var',4,'p_slice_var','syntactic.py',175),
  ('index_s -> ID','index_s',1,'p_slice_var','syntactic.py',177),
  ('index_s -> INTEGER','index_s',1,'p_slice_var','syntactic.py',178),
  ('index_s -> expression','index_s',1,'p_slice_var','syntactic.py',179),
  ('slice_assignment -> slice_var EQUAL something_s','slice_assignment',3,'p_slice_assignment','syntactic.py',182),
  ('something_s -> ID','something_s',1,'p_slice_assignment','syntactic.py',184),
  ('something_s -> array_var','something_s',1,'p_slice_assignment','syntactic.py',185),
  ('something_s -> values','something_s',1,'p_slice_assignment','syntactic.py',186),
  ('something_s -> operations','something_s',1,'p_slice_assignment','syntactic.py',187),
  ('funciones -> APPEND LPAREN ID COMA values RPAREN','funciones',6,'p_funciones','syntactic.py',193),
  ('funciones -> APPEND LPAREN ID COMA ID RPAREN','funciones',6,'p_funciones','syntactic.py',194),
  ('funciones -> LEN LPAREN ID RPAREN','funciones',4,'p_funciones','syntactic.py',195),
  ('funciones -> COPY LPAREN ID COMA ID RPAREN','funciones',6,'p_funciones','syntactic.py',196),
  ('funciones -> DELETE LPAREN ID COMA ID RPAREN','funciones',6,'p_funciones','syntactic.py',197),
  ('decVarOne -> ID DEQUAL ID','decVarOne',3,'p_decVarOne','syntactic.py',200),
  ('decVarOne -> ID DEQUAL INTEGER','decVarOne',3,'p_decVarOne','syntactic.py',201),
  ('SenIF -> IF comparison LLLAVE codigo RLLAVE','SenIF',5,'p_if','syntactic.py',205),
  ('SenIF -> IF TRUE LLLAVE codigo RLLAVE','SenIF',5,'p_if','syntactic.py',206),
  ('SenIF -> IF FALSE LLLAVE codigo RLLAVE','SenIF',5,'p_if','syntactic.py',207),
  ('SenElseIF -> ELSE IF comparison LLLAVE codigo RLLAVE','SenElseIF',6,'p_elseif','syntactic.py',210),
  ('SenElseIF -> ELSE IF TRUE LLLAVE codigo RLLAVE','SenElseIF',6,'p_elseif','syntactic.py',211),
  ('SenElseIF -> ELSE IF FALSE LLLAVE codigo RLLAVE','SenElseIF',6,'p_elseif','syntactic.py',212),
  ('SenElse -> ELSE LLLAVE codigo RLLAVE','SenElse',4,'p_else','syntactic.py',215),
  ('SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE','SenStruct',6,'p_struct','syntactic.py',218),
  ('declaration -> variable data_types','declaration',2,'p_struct','syntactic.py',220),
  ('declaration -> declaration variable data_types','declaration',3,'p_struct','syntactic.py',221),
  ('variable -> ID','variable',1,'p_struct','syntactic.py',223),
  ('cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE','cStruct',6,'p_createStruct','syntactic.py',226),
  ('asignaciones -> ID POINTS valor','asignaciones',3,'p_createStruct','syntactic.py',228),
  ('asignaciones -> ID POINTS valor COMA asignaciones','asignaciones',5,'p_createStruct','syntactic.py',229),
  ('valor -> ID','valor',1,'p_createStruct','syntactic.py',231),
  ('valor -> INTEGER','valor',1,'p_createStruct','syntactic.py',232),
  ('valor -> TRUE','valor',1,'p_createStruct','syntactic.py',233),
  ('valor -> FALSE','valor',1,'p_createStruct','syntactic.py',234),
  ('comparison -> value op value','comparison',3,'p_comparison','syntactic.py',239),
  ('value -> ID','value',1,'p_comparison','syntactic.py',240),
  ('value -> expression','value',1,'p_comparison','syntactic.py',241),
  ('op -> GREATER','op',1,'p_comparison','syntactic.py',242),
  ('op -> SMALLER','op',1,'p_comparison','syntactic.py',243),
  ('op -> GREATER_OR_EQUAL','op',1,'p_comparison','syntactic.py',244),
  ('op -> SMALLER_OR_EQUAL','op',1,'p_comparison','syntactic.py',245),
  ('op -> EQUAL_COMPARE','op',1,'p_comparison','syntactic.py',246),
  ('op -> NOT_EQUAL','op',1,'p_comparison','syntactic.py',247),
  ('logic_operation -> logic_value logic_recu','logic_operation',2,'p_logic_operation','syntactic.py',252),
  ('logic_operation -> negation','logic_operation',1,'p_logic_operation','syntactic.py',253),
  ('logic_recu -> logic_op logic_value','logic_recu',2,'p_logic_operation','syntactic.py',255),
  ('logic_recu -> logic_op logic_value logic_recu','logic_recu',3,'p_logic_operation','syntactic.py',256),
  ('logic_value -> negation','logic_value',1,'p_logic_operation','syntactic.py',259),
  ('logic_value -> comparison','logic_value',1,'p_logic_operation','syntactic.py',260),
  ('logic_value -> ID','logic_value',1,'p_logic_operation','syntactic.py',261),
  ('negation -> NOT comparison','negation',2,'p_logic_operation','syntactic.py',263),
  ('negation -> NOT ID','negation',2,'p_logic_operation','syntactic.py',264),
  ('logic_op -> AND','logic_op',1,'p_logic_operation','syntactic.py',266),
  ('logic_op -> OR','logic_op',1,'p_logic_operation','syntactic.py',267),
  ('switch_statement -> SWITCH ID LLLAVE cases RLLAVE','switch_statement',5,'p_switch','syntactic.py',270),
  ('cases -> CASE values POINTS codigo','cases',4,'p_switch','syntactic.py',272),
  ('cases -> CASE values POINTS codigo more','cases',5,'p_switch','syntactic.py',273),
  ('more -> cases','more',1,'p_switch','syntactic.py',275),
  ('more -> DEFAULT POINTS codigo','more',3,'p_switch','syntactic.py',276),
  ('array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types','array_declaration',6,'p_array_declaration','syntactic.py',279),
  ('array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content','array_declaration',8,'p_array_declaration','syntactic.py',280),
  ('capacity -> INTEGER','capacity',1,'p_array_declaration','syntactic.py',282),
  ('capacity -> ID','capacity',1,'p_array_declaration','syntactic.py',283),
  ('capacity -> expression','capacity',1,'p_array_declaration','syntactic.py',284),
  ('array_var -> ID LCORCHE index RCORCHE','array_var',4,'p_array_var','syntactic.py',287),
  ('index -> ID','index',1,'p_array_var','syntactic.py',289),
  ('index -> INTEGER','index',1,'p_array_var','syntactic.py',290),
  ('index -> expression','index',1,'p_array_var','syntactic.py',291),
  ('array_assignment -> array_var EQUAL something','array_assignment',3,'p_array_assignment','syntactic.py',294),
  ('map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types','map_declaration',6,'p_map_declaration','syntactic.py',297),
  ('map_var -> ID LCORCHE key RCORCHE','map_var',4,'p_map_var','syntactic.py',300),
  ('key -> ID','key',1,'p_map_var','syntactic.py',301),
  ('key -> values','key',1,'p_map_var','syntactic.py',302),
  ('key -> operations','key',1,'p_map_var','syntactic.py',303),
  ('map_assignment -> array_var EQUAL something','map_assignment',3,'p_map_assignment','syntactic.py',306),
  ('func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE','func_declaration',11,'p_func_declaration','syntactic.py',309),
  ('func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN return_value RLLAVE','func_declaration',10,'p_func_declaration','syntactic.py',310),
  ('return_value -> retorno COLON','return_value',2,'p_func_declaration','syntactic.py',312),
  ('return_value -> retorno','return_value',1,'p_func_declaration','syntactic.py',313),
  ('retorno -> ID','retorno',1,'p_func_declaration','syntactic.py',315),
  ('retorno -> values','retorno',1,'p_func_declaration','syntactic.py',316),
  ('retorno -> operations','retorno',1,'p_func_declaration','syntactic.py',317),
  ('retorno -> data_structure','retorno',1,'p_func_declaration','syntactic.py',318),
  ('params -> ID data_types','params',2,'p_func_declaration','syntactic.py',320),
  ('params -> more_params','params',1,'p_func_declaration','syntactic.py',321),
  ('more_params -> ID data_types COMA params','more_params',4,'p_func_declaration','syntactic.py',323),
  ('impresion -> PRINT LPAREN content RPAREN','impresion',4,'p_impresion','syntactic.py',329),
  ('content -> values','content',1,'p_impresion','syntactic.py',330),
  ('content -> operations','content',1,'p_impresion','syntactic.py',331),
  ('content -> funciones','content',1,'p_impresion','syntactic.py',332),
  ('content -> data_structure','content',1,'p_impresion','syntactic.py',333),
  ('content -> ID','content',1,'p_impresion','syntactic.py',334),
  ('expression -> something_ex','expression',1,'p_expression','syntactic.py',339),
  ('expression -> something_ex adicionaEx','expression',2,'p_expression','syntactic.py',340),
  ('adicionaEx -> op something_ex','adicionaEx',2,'p_expression','syntactic.py',342),
  ('adicionaEx -> op something_ex adicionaEx','adicionaEx',3,'p_expression','syntactic.py',343),
  ('something_ex -> ID','something_ex',1,'p_expression','syntactic.py',345),
  ('something_ex -> INTEGER','something_ex',1,'p_expression','syntactic.py',346),
  ('something_ex -> FLOAT','something_ex',1,'p_expression','syntactic.py',347),
  ('something_ex -> data_structure','something_ex',1,'p_expression','syntactic.py',348),
  ('something_ex -> funciones','something_ex',1,'p_expression','syntactic.py',349),
  ('op -> PLUS','op',1,'p_expression','syntactic.py',351),
  ('op -> TIMES','op',1,'p_expression','syntactic.py',352),
  ('op -> DIVIDE','op',1,'p_expression','syntactic.py',353),
  ('op -> MINUS','op',1,'p_expression','syntactic.py',354),
]
