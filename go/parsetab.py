
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND APPEND ARRAY BOOL BYTE CAP CASE COLON COMA COMMENT CONST COPY DECREASE DEFAULT DELETE DEQUAL DIVIDE ELSE EQUAL EQUAL_COMPARE FALSE FLOAT FLOAT32 FLOAT64 FOR FUNC GREATER GREATER_OR_EQUAL ID IF INCREASE INT32 INT64 INTEGER INTERFACE JOIN LCORCHE LEN LLLAVE LPAREN MAIN MAKE MAP MINUS MOD MULTI_COMMENT NOT NOT_EQUAL OR PACKAGE PLUS POINTER POINTS PRINT RCORCHE RLLAVE RPAREN SCAN SMALLER SMALLER_OR_EQUAL STRING STRUCT SWITCH TIMES TRUE TYPE VAR WFLOAT WINT WSTRINGcodigo : impresion COLON\n              | impresion\n\n              | expression COLON\n              | expression\n\n              | cicloFor\n\n              | comparison\n\n              | logic_operation\n\n              | decVar COLON\n              | decVar\n\n              | funciones\n              | funciones COLON\n\n              | SenIF\n\n              | SenStruct\n\n              | switch_statement\n\n              | array_declaration COLON\n              | array_declaration\n              | array_var COLON\n              | array_var\n              | array_assignment COLON\n              | array_assignmentvalues : STRING\n              | INTEGER\n              | FLOAT\n              | TRUE\n              | FALSEdata_types : INT32\n            | INT64\n            | FLOAT32\n            | FLOAT64\n            | BYTE\n            | WINT\n            | WFLOAT\n            | WSTRING\n            | BOOLoperations : expression \n                  | comparison \n                  | logic_operationdata_structure : array_vararr_content :  LLLAVE items COMA more_items RLLAVE\n                | LLLAVE items RLLAVE\n                \n        more_items : items COMA more_items\n                   | items\n                   \n             items : values\n                   | operationscicloFor : FOR LLLAVE codigo RLLAVE\n                | FOR comparison LLLAVE codigo RLLAVE\n                | FOR logic_operation LLLAVE codigo RLLAVE\n                | FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE\n       incre    : ID INCREASE\n                | ID DECREASEdecVar : decVarOne\n              | VAR ID EQUAL INTEGER\n              | VAR ID EQUAL ID\n              | VAR ID EQUAL FLOAT\n              | VAR ID EQUAL expression\n              | VAR ID EQUAL logic_operation\n              | VAR ID EQUAL comparison\n              | sliceC\n              | VAR ID EQUAL STRING\n              | ID DEQUAL STRING\n              | ID DEQUAL FLOAT\n              | ID DEQUAL expression\n              | ID DEQUAL logic_operation\n              | ID DEQUAL comparisonsliceC : VAR ID LCORCHE RCORCHE data_types\n              | ID DEQUAL funM\n              | ID DEQUAL LCORCHE RCORCHE data_types arr_content\n       funM : MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN\n            | MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN\n            \n       cap : INTEGER \n           | ID\n           | expressionfunciones : APPEND LPAREN ID COMA values RPAREN\n                 | APPEND LPAREN ID COMA ID RPAREN\n                 | LEN LPAREN ID RPAREN\n                 | COPY LPAREN ID COMA ID RPAREN\n                 | DELETE LPAREN ID COMA ID RPARENdecVarOne : ID DEQUAL ID\n                 | ID DEQUAL INTEGERSenIF : IF LPAREN comparison RPAREN LLLAVE codigo RLLAVESenStruct : TYPE ID STRUCT LLLAVE declaration RLLAVE\n    \n       declaration : variable data_types\n       \n       variable    : IDcomparison : value op value\n       value      : ID\n                  | expression\n       op         : GREATER\n                  | SMALLER\n                  | GREATER_OR_EQUAL\n                  | SMALLER_OR_EQUAL\n                  | EQUAL_COMPARE\n                  | NOT_EQUALlogic_operation : logic_value logic_op logic_value\n                       | negation\n\n       logic_value     : negation\n                       | comparison\n                       | ID\n\n       negation        : NOT comparison\n                       | NOT ID\n                       \n       logic_op        : AND\n                       | ORswitch_statement : SWITCH ID LLLAVE cases RLLAVE\n\n                  cases : CASE values POINTS codigo \n                        | CASE values POINTS codigo more\n\n                  more : cases \n                       | DEFAULT POINTS codigoarray_declaration : VAR ID LCORCHE capacity RCORCHE data_types\n                         | VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content\n\n       capacity : INTEGER \n                | ID\n                | expressionarray_var : ID LCORCHE index RCORCHE\n         \n           index : ID\n                 | INTEGER\n                 | expressionarray_assignment : array_var EQUAL something\n    \n              something : ID \n                        | array_var\n                        | values\n                        | operationsimpresion : PRINT LPAREN expression RPARENexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorfactor : INTEGERfactor : IDfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'PRINT':([0,51,99,100,185,205,206,232,],[15,15,15,15,15,15,15,15,]),'FOR':([0,51,99,100,185,205,206,232,],[18,18,18,18,18,18,18,18,]),'VAR':([0,51,99,100,185,205,206,232,],[23,23,23,23,23,23,23,23,]),'ID':([0,16,18,23,32,33,35,38,39,44,46,49,50,51,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,99,100,101,102,109,110,146,155,157,158,160,165,185,196,205,206,219,221,232,233,235,],[24,48,55,67,75,76,78,48,48,83,48,48,48,24,104,-87,-88,-89,-90,-91,-92,108,-100,-101,111,121,125,126,127,128,104,24,24,104,137,139,147,147,180,183,184,186,192,24,213,24,24,213,230,24,213,230,]),'APPEND':([0,51,99,100,185,205,206,232,],[27,27,27,27,27,27,27,27,]),'LEN':([0,51,99,100,185,205,206,232,],[28,28,28,28,28,28,28,28,]),'COPY':([0,51,99,100,185,205,206,232,],[29,29,29,29,29,29,29,29,]),'DELETE':([0,51,99,100,185,205,206,232,],[30,30,30,30,30,30,30,30,]),'IF':([0,51,99,100,185,205,206,232,],[31,31,31,31,31,31,31,31,]),'TYPE':([0,51,99,100,185,205,206,232,],[32,32,32,32,32,32,32,32,]),'SWITCH':([0,51,99,100,185,205,206,232,],[33,33,33,33,33,33,33,33,]),'NOT':([0,18,44,51,64,65,66,68,99,100,109,185,196,205,206,219,232,233,],[35,35,35,35,35,-100,-101,35,35,35,35,35,35,35,35,35,35,35,]),'INTEGER':([0,16,18,35,38,39,44,46,49,50,51,57,58,59,60,61,62,63,64,65,66,68,69,74,99,100,101,102,109,110,146,155,162,185,196,205,206,219,221,232,233,235,],[25,25,25,25,25,25,87,25,25,25,25,25,-87,-88,-89,-90,-91,-92,25,-100,-101,117,123,25,25,25,25,138,140,150,150,182,182,25,87,25,25,87,229,25,87,229,]),'LPAREN':([0,15,16,18,27,28,29,30,31,35,38,39,44,46,49,50,51,57,58,59,60,61,62,63,64,65,66,68,69,74,99,100,101,109,110,120,146,185,196,205,206,219,221,232,233,235,],[16,46,16,16,70,71,72,73,74,16,16,16,16,16,16,16,16,16,-87,-88,-89,-90,-91,-92,16,-100,-101,16,16,16,16,16,16,16,16,153,16,16,16,16,16,16,16,16,16,16,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,17,19,22,24,25,26,34,36,37,40,41,42,43,45,48,56,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,103,104,105,106,107,108,111,112,113,114,115,116,117,118,132,133,139,140,141,142,143,144,145,154,156,163,164,168,169,170,171,172,173,174,175,176,177,189,194,195,198,199,200,201,203,215,218,220,225,234,236,240,],[0,-2,-4,-5,-6,-7,-9,-10,-12,-13,-14,-16,-18,-20,-124,-51,-94,-129,-128,-58,-127,-1,-3,-8,-11,-15,-17,-19,-129,-86,-98,-99,-122,-123,-118,-116,-117,-119,-120,-21,-22,-23,-24,-25,-35,-36,-37,-130,-125,-126,-84,-85,-93,-95,-96,-97,-78,-60,-61,-62,-63,-64,-79,-66,-121,-45,-53,-52,-54,-55,-56,-57,-59,-112,-75,-46,-47,-65,-26,-27,-28,-29,-30,-31,-32,-33,-34,-102,-107,-67,-74,-73,-76,-77,-81,-80,-108,-40,-48,-39,-68,-69,]),'COLON':([2,3,7,8,12,13,14,17,19,22,24,25,26,34,48,54,56,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,103,104,105,106,107,108,111,112,113,114,115,116,117,118,132,136,137,138,139,140,141,142,143,144,145,154,156,168,169,170,171,172,173,174,175,176,177,194,195,198,199,200,201,218,220,234,236,240,],[36,37,40,41,42,43,45,-124,-51,-94,-129,-128,-58,-127,-129,101,-86,-98,-99,-122,-123,-118,-116,-117,-119,-120,-21,-22,-23,-24,-25,-35,-36,-37,-130,-125,-126,-84,-85,-93,-95,-96,-97,-78,-60,-61,-62,-63,-64,-79,-66,-121,165,-78,-79,-53,-52,-54,-55,-56,-57,-59,-112,-75,-65,-26,-27,-28,-29,-30,-31,-32,-33,-34,-107,-67,-74,-73,-76,-77,-108,-40,-39,-68,-69,]),'RLLAVE':([2,3,4,5,6,7,8,9,10,11,12,13,14,17,19,22,24,25,26,34,36,37,40,41,42,43,45,48,56,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,103,104,105,106,107,108,111,112,113,114,115,116,117,118,132,133,134,135,139,140,141,142,143,144,145,154,156,161,163,164,168,169,170,171,172,173,174,175,176,177,187,189,194,195,198,199,200,201,202,203,204,210,211,212,213,215,216,217,218,220,222,223,225,226,227,234,236,237,238,240,],[-2,-4,-5,-6,-7,-9,-10,-12,-13,-14,-16,-18,-20,-124,-51,-94,-129,-128,-58,-127,-1,-3,-8,-11,-15,-17,-19,-129,-86,-98,-99,-122,-123,-118,-116,-117,-119,-120,-21,-22,-23,-24,-25,-35,-36,-37,-130,-125,-126,133,-84,-85,-93,-95,-96,-97,-78,-60,-61,-62,-63,-64,-79,-66,-121,-45,163,164,-53,-52,-54,-55,-56,-57,-59,-112,-75,189,-46,-47,-65,-26,-27,-28,-29,-30,-31,-32,-33,-34,203,-102,-107,-67,-74,-73,-76,-77,215,-81,-82,220,-43,-44,-129,-80,-103,225,-108,-40,-104,-105,-48,-42,234,-39,-68,-106,-41,-69,]),'DEFAULT':([2,3,4,5,6,7,8,9,10,11,12,13,14,17,19,22,24,25,26,34,36,37,40,41,42,43,45,48,56,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,103,104,105,106,107,108,111,112,113,114,115,116,117,118,132,133,139,140,141,142,143,144,145,154,156,163,164,168,169,170,171,172,173,174,175,176,177,189,194,195,198,199,200,201,203,215,216,218,220,225,234,236,240,],[-2,-4,-5,-6,-7,-9,-10,-12,-13,-14,-16,-18,-20,-124,-51,-94,-129,-128,-58,-127,-1,-3,-8,-11,-15,-17,-19,-129,-86,-98,-99,-122,-123,-118,-116,-117,-119,-120,-21,-22,-23,-24,-25,-35,-36,-37,-130,-125,-126,-84,-85,-93,-95,-96,-97,-78,-60,-61,-62,-63,-64,-79,-66,-121,-45,-53,-52,-54,-55,-56,-57,-59,-112,-75,-46,-47,-65,-26,-27,-28,-29,-30,-31,-32,-33,-34,-102,-107,-67,-74,-73,-76,-77,-81,-80,224,-108,-40,-48,-39,-68,-69,]),'CASE':([2,3,4,5,6,7,8,9,10,11,12,13,14,17,19,22,24,25,26,34,36,37,40,41,42,43,45,48,56,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,103,104,105,106,107,108,111,112,113,114,115,116,117,118,131,132,133,139,140,141,142,143,144,145,154,156,163,164,168,169,170,171,172,173,174,175,176,177,189,194,195,198,199,200,201,203,215,216,218,220,225,234,236,240,],[-2,-4,-5,-6,-7,-9,-10,-12,-13,-14,-16,-18,-20,-124,-51,-94,-129,-128,-58,-127,-1,-3,-8,-11,-15,-17,-19,-129,-86,-98,-99,-122,-123,-118,-116,-117,-119,-120,-21,-22,-23,-24,-25,-35,-36,-37,-130,-125,-126,-84,-85,-93,-95,-96,-97,-78,-60,-61,-62,-63,-64,-79,-66,162,-121,-45,-53,-52,-54,-55,-56,-57,-59,-112,-75,-46,-47,-65,-26,-27,-28,-29,-30,-31,-32,-33,-34,-102,-107,-67,-74,-73,-76,-77,-81,-80,162,-108,-40,-48,-39,-68,-69,]),'PLUS':([3,17,24,25,34,47,48,55,56,78,79,80,83,87,91,94,95,96,97,104,108,111,114,117,121,123,124,139,140,142,147,150,151,213,229,230,231,],[38,-124,-129,-128,-127,38,-129,-129,38,-129,-122,-123,-129,-128,38,38,-130,-125,-126,-129,-129,-129,38,-128,-129,-128,38,-129,-128,38,-129,-128,38,-129,-128,-129,38,]),'MINUS':([3,17,24,25,34,47,48,55,56,78,79,80,83,87,91,94,95,96,97,104,108,111,114,117,121,123,124,139,140,142,147,150,151,213,229,230,231,],[39,-124,-129,-128,-127,39,-129,-129,39,-129,-122,-123,-129,-128,39,39,-130,-125,-126,-129,-129,-129,39,-128,-129,-128,39,-129,-128,39,-129,-128,39,-129,-128,-129,39,]),'GREATER':([3,17,20,24,25,34,48,55,56,78,79,80,83,87,91,95,96,97,104,108,111,114,117,139,140,142,213,],[-86,-124,58,-85,-128,-127,-129,-85,-86,-85,-122,-123,-85,-128,-86,-130,-125,-126,-85,-85,-85,-86,-128,-85,-128,-86,-85,]),'SMALLER':([3,17,20,24,25,34,48,55,56,78,79,80,83,87,91,95,96,97,104,108,111,114,117,139,140,142,213,],[-86,-124,59,-85,-128,-127,-129,-85,-86,-85,-122,-123,-85,-128,-86,-130,-125,-126,-85,-85,-85,-86,-128,-85,-128,-86,-85,]),'GREATER_OR_EQUAL':([3,17,20,24,25,34,48,55,56,78,79,80,83,87,91,95,96,97,104,108,111,114,117,139,140,142,213,],[-86,-124,60,-85,-128,-127,-129,-85,-86,-85,-122,-123,-85,-128,-86,-130,-125,-126,-85,-85,-85,-86,-128,-85,-128,-86,-85,]),'SMALLER_OR_EQUAL':([3,17,20,24,25,34,48,55,56,78,79,80,83,87,91,95,96,97,104,108,111,114,117,139,140,142,213,],[-86,-124,61,-85,-128,-127,-129,-85,-86,-85,-122,-123,-85,-128,-86,-130,-125,-126,-85,-85,-85,-86,-128,-85,-128,-86,-85,]),'EQUAL_COMPARE':([3,17,20,24,25,34,48,55,56,78,79,80,83,87,91,95,96,97,104,108,111,114,117,139,140,142,213,],[-86,-124,62,-85,-128,-127,-129,-85,-86,-85,-122,-123,-85,-128,-86,-130,-125,-126,-85,-85,-85,-86,-128,-85,-128,-86,-85,]),'NOT_EQUAL':([3,17,20,24,25,34,48,55,56,78,79,80,83,87,91,95,96,97,104,108,111,114,117,139,140,142,213,],[-86,-124,63,-85,-128,-127,-129,-85,-86,-85,-122,-123,-85,-128,-86,-130,-125,-126,-85,-85,-85,-86,-128,-85,-128,-86,-85,]),'AND':([5,17,21,22,24,25,34,48,52,55,56,77,78,79,80,83,92,95,96,97,103,104,111,116,139,144,213,],[-96,-124,65,-95,-97,-128,-127,-129,-96,-97,-86,-98,-99,-122,-123,-97,-96,-130,-125,-126,-84,-85,-97,-96,-97,-96,-97,]),'OR':([5,17,21,22,24,25,34,48,52,55,56,77,78,79,80,83,92,95,96,97,103,104,111,116,139,144,213,],[-96,-124,66,-95,-97,-128,-127,-129,-96,-97,-86,-98,-99,-122,-123,-97,-96,-130,-125,-126,-84,-85,-97,-96,-97,-96,-97,]),'EQUAL':([13,67,154,],[44,109,-112,]),'RPAREN':([17,25,34,47,48,56,79,80,86,88,89,90,94,95,96,97,103,104,126,129,180,181,182,183,184,228,229,230,231,239,],[-124,-128,-127,95,-129,-86,-122,-123,-21,-23,-24,-25,132,-130,-125,-126,-84,-85,156,159,198,199,-22,200,201,236,-70,-71,-72,240,]),'LLLAVE':([17,18,22,25,34,48,52,53,56,76,77,78,79,80,95,96,97,103,104,105,106,107,108,130,159,169,170,171,172,173,174,175,176,177,178,191,207,208,209,],[-124,51,-94,-128,-127,-129,99,100,-86,131,-98,-99,-122,-123,-130,-125,-126,-84,-85,-93,-95,-96,-97,160,185,-26,-27,-28,-29,-30,-31,-32,-33,-34,196,206,-49,-50,196,]),'COMA':([17,22,25,34,48,56,77,78,79,80,86,87,88,89,90,91,92,93,95,96,97,103,104,105,106,107,108,125,127,128,169,170,171,172,173,174,175,176,177,210,211,212,213,214,226,228,229,230,231,],[-124,-94,-128,-127,-129,-86,-98,-99,-122,-123,-21,-22,-23,-24,-25,-35,-36,-37,-130,-125,-126,-84,-85,-93,-95,-96,-97,155,157,158,-26,-27,-28,-29,-30,-31,-32,-33,-34,219,-43,-44,-129,221,233,235,-70,-71,-72,]),'RCORCHE':([17,25,34,48,79,80,95,96,97,110,119,121,122,123,124,147,148,150,151,166,179,],[-124,-128,-127,-129,-122,-123,-130,-125,-126,149,152,-113,154,-114,-115,-110,167,-109,-111,193,197,]),'TIMES':([17,24,25,34,48,55,78,79,80,83,87,95,96,97,104,108,111,117,121,123,139,140,147,150,213,229,230,],[49,-129,-128,-127,-129,-129,-129,49,49,-129,-128,-130,-125,-126,-129,-129,-129,-128,-129,-128,-129,-128,-129,-128,-129,-128,-129,]),'DIVIDE':([17,24,25,34,48,55,78,79,80,83,87,95,96,97,104,108,111,117,121,123,139,140,147,150,213,229,230,],[50,-129,-128,-127,-129,-129,-129,50,50,-129,-128,-130,-125,-126,-129,-129,-129,-128,-129,-128,-129,-128,-129,-128,-129,-128,-129,]),'DEQUAL':([24,55,],[68,102,]),'LCORCHE':([24,67,68,83,109,153,],[69,110,119,69,146,179,]),'STRING':([44,68,109,155,162,196,219,233,],[86,112,145,86,86,86,86,86,]),'FLOAT':([44,68,109,155,162,196,219,233,],[88,113,141,88,88,88,88,88,]),'TRUE':([44,155,162,196,219,233,],[89,89,89,89,89,89,]),'FALSE':([44,155,162,196,219,233,],[90,90,90,90,90,90,]),'MAKE':([68,],[120,]),'STRUCT':([75,],[130,]),'POINTS':([86,88,89,90,182,190,224,],[-21,-23,-24,-25,-22,205,232,]),'INT32':([149,152,167,186,188,193,197,],[169,169,169,-83,169,169,169,]),'INT64':([149,152,167,186,188,193,197,],[170,170,170,-83,170,170,170,]),'FLOAT32':([149,152,167,186,188,193,197,],[171,171,171,-83,171,171,171,]),'FLOAT64':([149,152,167,186,188,193,197,],[172,172,172,-83,172,172,172,]),'BYTE':([149,152,167,186,188,193,197,],[173,173,173,-83,173,173,173,]),'WINT':([149,152,167,186,188,193,197,],[174,174,174,-83,174,174,174,]),'WFLOAT':([149,152,167,186,188,193,197,],[175,175,175,-83,175,175,175,]),'WSTRING':([149,152,167,186,188,193,197,],[176,176,176,-83,176,176,176,]),'BOOL':([149,152,167,186,188,193,197,],[177,177,177,-83,177,177,177,]),'INCREASE':([192,],[207,]),'DECREASE':([192,],[208,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigo':([0,51,99,100,185,205,206,232,],[1,98,134,135,202,216,217,237,]),'impresion':([0,51,99,100,185,205,206,232,],[2,2,2,2,2,2,2,2,]),'expression':([0,16,18,35,44,46,51,57,64,68,69,74,99,100,101,109,110,146,185,196,205,206,219,221,232,233,235,],[3,47,56,56,91,94,3,56,56,114,124,56,3,3,56,142,151,151,3,91,3,3,91,231,3,91,231,]),'cicloFor':([0,51,99,100,185,205,206,232,],[4,4,4,4,4,4,4,4,]),'comparison':([0,18,35,44,51,64,68,74,99,100,101,109,185,196,205,206,219,232,233,],[5,52,77,92,5,107,116,129,5,5,136,144,5,92,5,5,92,5,92,]),'logic_operation':([0,18,44,51,68,99,100,109,185,196,205,206,219,232,233,],[6,53,93,6,115,6,6,143,6,93,6,6,93,6,93,]),'decVar':([0,51,99,100,185,205,206,232,],[7,7,7,7,7,7,7,7,]),'funciones':([0,51,99,100,185,205,206,232,],[8,8,8,8,8,8,8,8,]),'SenIF':([0,51,99,100,185,205,206,232,],[9,9,9,9,9,9,9,9,]),'SenStruct':([0,51,99,100,185,205,206,232,],[10,10,10,10,10,10,10,10,]),'switch_statement':([0,51,99,100,185,205,206,232,],[11,11,11,11,11,11,11,11,]),'array_declaration':([0,51,99,100,185,205,206,232,],[12,12,12,12,12,12,12,12,]),'array_var':([0,44,51,99,100,185,205,206,232,],[13,81,13,13,13,13,13,13,13,]),'array_assignment':([0,51,99,100,185,205,206,232,],[14,14,14,14,14,14,14,14,]),'term':([0,16,18,35,38,39,44,46,51,57,64,68,69,74,99,100,101,109,110,146,185,196,205,206,219,221,232,233,235,],[17,17,17,17,79,80,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'decVarOne':([0,18,51,99,100,185,205,206,232,],[19,54,19,19,19,19,19,19,19,]),'value':([0,18,35,44,51,57,64,68,74,99,100,101,109,185,196,205,206,219,232,233,],[20,20,20,20,20,103,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'logic_value':([0,18,44,51,64,68,99,100,109,185,196,205,206,219,232,233,],[21,21,21,21,105,21,21,21,21,21,21,21,21,21,21,21,]),'negation':([0,18,44,51,64,68,99,100,109,185,196,205,206,219,232,233,],[22,22,22,22,106,22,22,22,22,22,22,22,22,22,22,22,]),'sliceC':([0,51,99,100,185,205,206,232,],[26,26,26,26,26,26,26,26,]),'factor':([0,16,18,35,38,39,44,46,49,50,51,57,64,68,69,74,99,100,101,109,110,146,185,196,205,206,219,221,232,233,235,],[34,34,34,34,34,34,34,34,96,97,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'op':([20,],[57,]),'logic_op':([21,],[64,]),'something':([44,],[82,]),'values':([44,155,162,196,219,233,],[84,181,190,211,211,211,]),'operations':([44,196,219,233,],[85,212,212,212,]),'funM':([68,],[118,]),'index':([69,],[122,]),'capacity':([110,146,],[148,166,]),'cases':([131,216,],[161,223,]),'data_types':([149,152,167,188,193,197,],[168,178,194,204,209,214,]),'declaration':([160,],[187,]),'variable':([160,],[188,]),'incre':([165,],[191,]),'arr_content':([178,209,],[195,218,]),'items':([196,219,233,],[210,226,226,]),'more':([216,],[222,]),'more_items':([219,233,],[227,238,]),'cap':([221,235,],[228,239,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigo","S'",1,None,None,None),
  ('codigo -> impresion COLON','codigo',2,'p_coddigo','syntactic.py',17),
  ('codigo -> impresion','codigo',1,'p_coddigo','syntactic.py',18),
  ('codigo -> expression COLON','codigo',2,'p_coddigo','syntactic.py',20),
  ('codigo -> expression','codigo',1,'p_coddigo','syntactic.py',21),
  ('codigo -> cicloFor','codigo',1,'p_coddigo','syntactic.py',23),
  ('codigo -> comparison','codigo',1,'p_coddigo','syntactic.py',25),
  ('codigo -> logic_operation','codigo',1,'p_coddigo','syntactic.py',27),
  ('codigo -> decVar COLON','codigo',2,'p_coddigo','syntactic.py',29),
  ('codigo -> decVar','codigo',1,'p_coddigo','syntactic.py',30),
  ('codigo -> funciones','codigo',1,'p_coddigo','syntactic.py',32),
  ('codigo -> funciones COLON','codigo',2,'p_coddigo','syntactic.py',33),
  ('codigo -> SenIF','codigo',1,'p_coddigo','syntactic.py',35),
  ('codigo -> SenStruct','codigo',1,'p_coddigo','syntactic.py',37),
  ('codigo -> switch_statement','codigo',1,'p_coddigo','syntactic.py',39),
  ('codigo -> array_declaration COLON','codigo',2,'p_coddigo','syntactic.py',41),
  ('codigo -> array_declaration','codigo',1,'p_coddigo','syntactic.py',42),
  ('codigo -> array_var COLON','codigo',2,'p_coddigo','syntactic.py',43),
  ('codigo -> array_var','codigo',1,'p_coddigo','syntactic.py',44),
  ('codigo -> array_assignment COLON','codigo',2,'p_coddigo','syntactic.py',45),
  ('codigo -> array_assignment','codigo',1,'p_coddigo','syntactic.py',46),
  ('values -> STRING','values',1,'p_values','syntactic.py',49),
  ('values -> INTEGER','values',1,'p_values','syntactic.py',50),
  ('values -> FLOAT','values',1,'p_values','syntactic.py',51),
  ('values -> TRUE','values',1,'p_values','syntactic.py',52),
  ('values -> FALSE','values',1,'p_values','syntactic.py',53),
  ('data_types -> INT32','data_types',1,'p_data_types','syntactic.py',56),
  ('data_types -> INT64','data_types',1,'p_data_types','syntactic.py',57),
  ('data_types -> FLOAT32','data_types',1,'p_data_types','syntactic.py',58),
  ('data_types -> FLOAT64','data_types',1,'p_data_types','syntactic.py',59),
  ('data_types -> BYTE','data_types',1,'p_data_types','syntactic.py',60),
  ('data_types -> WINT','data_types',1,'p_data_types','syntactic.py',61),
  ('data_types -> WFLOAT','data_types',1,'p_data_types','syntactic.py',62),
  ('data_types -> WSTRING','data_types',1,'p_data_types','syntactic.py',63),
  ('data_types -> BOOL','data_types',1,'p_data_types','syntactic.py',64),
  ('operations -> expression','operations',1,'p_operations','syntactic.py',67),
  ('operations -> comparison','operations',1,'p_operations','syntactic.py',68),
  ('operations -> logic_operation','operations',1,'p_operations','syntactic.py',69),
  ('data_structure -> array_var','data_structure',1,'p_data_structure','syntactic.py',72),
  ('arr_content -> LLLAVE items COMA more_items RLLAVE','arr_content',5,'p_arr_content','syntactic.py',75),
  ('arr_content -> LLLAVE items RLLAVE','arr_content',3,'p_arr_content','syntactic.py',76),
  ('more_items -> items COMA more_items','more_items',3,'p_arr_content','syntactic.py',78),
  ('more_items -> items','more_items',1,'p_arr_content','syntactic.py',79),
  ('items -> values','items',1,'p_arr_content','syntactic.py',81),
  ('items -> operations','items',1,'p_arr_content','syntactic.py',82),
  ('cicloFor -> FOR LLLAVE codigo RLLAVE','cicloFor',4,'p_for','syntactic.py',87),
  ('cicloFor -> FOR comparison LLLAVE codigo RLLAVE','cicloFor',5,'p_for','syntactic.py',88),
  ('cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE','cicloFor',5,'p_for','syntactic.py',89),
  ('cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE','cicloFor',9,'p_for','syntactic.py',90),
  ('incre -> ID INCREASE','incre',2,'p_for','syntactic.py',91),
  ('incre -> ID DECREASE','incre',2,'p_for','syntactic.py',92),
  ('decVar -> decVarOne','decVar',1,'p_decVar','syntactic.py',97),
  ('decVar -> VAR ID EQUAL INTEGER','decVar',4,'p_decVar','syntactic.py',98),
  ('decVar -> VAR ID EQUAL ID','decVar',4,'p_decVar','syntactic.py',99),
  ('decVar -> VAR ID EQUAL FLOAT','decVar',4,'p_decVar','syntactic.py',100),
  ('decVar -> VAR ID EQUAL expression','decVar',4,'p_decVar','syntactic.py',101),
  ('decVar -> VAR ID EQUAL logic_operation','decVar',4,'p_decVar','syntactic.py',102),
  ('decVar -> VAR ID EQUAL comparison','decVar',4,'p_decVar','syntactic.py',103),
  ('decVar -> sliceC','decVar',1,'p_decVar','syntactic.py',104),
  ('decVar -> VAR ID EQUAL STRING','decVar',4,'p_decVar','syntactic.py',105),
  ('decVar -> ID DEQUAL STRING','decVar',3,'p_decVar','syntactic.py',106),
  ('decVar -> ID DEQUAL FLOAT','decVar',3,'p_decVar','syntactic.py',107),
  ('decVar -> ID DEQUAL expression','decVar',3,'p_decVar','syntactic.py',108),
  ('decVar -> ID DEQUAL logic_operation','decVar',3,'p_decVar','syntactic.py',109),
  ('decVar -> ID DEQUAL comparison','decVar',3,'p_decVar','syntactic.py',110),
  ('sliceC -> VAR ID LCORCHE RCORCHE data_types','sliceC',5,'p_sliceC','syntactic.py',116),
  ('sliceC -> ID DEQUAL funM','sliceC',3,'p_sliceC','syntactic.py',117),
  ('sliceC -> ID DEQUAL LCORCHE RCORCHE data_types arr_content','sliceC',6,'p_sliceC','syntactic.py',118),
  ('funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN','funM',8,'p_sliceC','syntactic.py',119),
  ('funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN','funM',10,'p_sliceC','syntactic.py',120),
  ('cap -> INTEGER','cap',1,'p_sliceC','syntactic.py',122),
  ('cap -> ID','cap',1,'p_sliceC','syntactic.py',123),
  ('cap -> expression','cap',1,'p_sliceC','syntactic.py',124),
  ('funciones -> APPEND LPAREN ID COMA values RPAREN','funciones',6,'p_funciones','syntactic.py',129),
  ('funciones -> APPEND LPAREN ID COMA ID RPAREN','funciones',6,'p_funciones','syntactic.py',130),
  ('funciones -> LEN LPAREN ID RPAREN','funciones',4,'p_funciones','syntactic.py',131),
  ('funciones -> COPY LPAREN ID COMA ID RPAREN','funciones',6,'p_funciones','syntactic.py',132),
  ('funciones -> DELETE LPAREN ID COMA ID RPAREN','funciones',6,'p_funciones','syntactic.py',133),
  ('decVarOne -> ID DEQUAL ID','decVarOne',3,'p_decVarOne','syntactic.py',136),
  ('decVarOne -> ID DEQUAL INTEGER','decVarOne',3,'p_decVarOne','syntactic.py',137),
  ('SenIF -> IF LPAREN comparison RPAREN LLLAVE codigo RLLAVE','SenIF',7,'p_if','syntactic.py',144),
  ('SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE','SenStruct',6,'p_struct','syntactic.py',147),
  ('declaration -> variable data_types','declaration',2,'p_struct','syntactic.py',149),
  ('variable -> ID','variable',1,'p_struct','syntactic.py',151),
  ('comparison -> value op value','comparison',3,'p_comparison','syntactic.py',156),
  ('value -> ID','value',1,'p_comparison','syntactic.py',157),
  ('value -> expression','value',1,'p_comparison','syntactic.py',158),
  ('op -> GREATER','op',1,'p_comparison','syntactic.py',159),
  ('op -> SMALLER','op',1,'p_comparison','syntactic.py',160),
  ('op -> GREATER_OR_EQUAL','op',1,'p_comparison','syntactic.py',161),
  ('op -> SMALLER_OR_EQUAL','op',1,'p_comparison','syntactic.py',162),
  ('op -> EQUAL_COMPARE','op',1,'p_comparison','syntactic.py',163),
  ('op -> NOT_EQUAL','op',1,'p_comparison','syntactic.py',164),
  ('logic_operation -> logic_value logic_op logic_value','logic_operation',3,'p_logic_operation','syntactic.py',167),
  ('logic_operation -> negation','logic_operation',1,'p_logic_operation','syntactic.py',168),
  ('logic_value -> negation','logic_value',1,'p_logic_operation','syntactic.py',170),
  ('logic_value -> comparison','logic_value',1,'p_logic_operation','syntactic.py',171),
  ('logic_value -> ID','logic_value',1,'p_logic_operation','syntactic.py',172),
  ('negation -> NOT comparison','negation',2,'p_logic_operation','syntactic.py',174),
  ('negation -> NOT ID','negation',2,'p_logic_operation','syntactic.py',175),
  ('logic_op -> AND','logic_op',1,'p_logic_operation','syntactic.py',177),
  ('logic_op -> OR','logic_op',1,'p_logic_operation','syntactic.py',178),
  ('switch_statement -> SWITCH ID LLLAVE cases RLLAVE','switch_statement',5,'p_switch','syntactic.py',181),
  ('cases -> CASE values POINTS codigo','cases',4,'p_switch','syntactic.py',183),
  ('cases -> CASE values POINTS codigo more','cases',5,'p_switch','syntactic.py',184),
  ('more -> cases','more',1,'p_switch','syntactic.py',186),
  ('more -> DEFAULT POINTS codigo','more',3,'p_switch','syntactic.py',187),
  ('array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types','array_declaration',6,'p_array_declaration','syntactic.py',190),
  ('array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content','array_declaration',8,'p_array_declaration','syntactic.py',191),
  ('capacity -> INTEGER','capacity',1,'p_array_declaration','syntactic.py',193),
  ('capacity -> ID','capacity',1,'p_array_declaration','syntactic.py',194),
  ('capacity -> expression','capacity',1,'p_array_declaration','syntactic.py',195),
  ('array_var -> ID LCORCHE index RCORCHE','array_var',4,'p_array_var','syntactic.py',198),
  ('index -> ID','index',1,'p_array_var','syntactic.py',200),
  ('index -> INTEGER','index',1,'p_array_var','syntactic.py',201),
  ('index -> expression','index',1,'p_array_var','syntactic.py',202),
  ('array_assignment -> array_var EQUAL something','array_assignment',3,'p_array_assignment','syntactic.py',205),
  ('something -> ID','something',1,'p_array_assignment','syntactic.py',207),
  ('something -> array_var','something',1,'p_array_assignment','syntactic.py',208),
  ('something -> values','something',1,'p_array_assignment','syntactic.py',209),
  ('something -> operations','something',1,'p_array_assignment','syntactic.py',210),
  ('impresion -> PRINT LPAREN expression RPAREN','impresion',4,'p_impresion','syntactic.py',215),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','syntactic.py',220),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','syntactic.py',224),
  ('expression -> term','expression',1,'p_expression_term','syntactic.py',228),
  ('term -> term TIMES factor','term',3,'p_term_times','syntactic.py',232),
  ('term -> term DIVIDE factor','term',3,'p_term_div','syntactic.py',236),
  ('term -> factor','term',1,'p_term_factor','syntactic.py',240),
  ('factor -> INTEGER','factor',1,'p_factor_num','syntactic.py',244),
  ('factor -> ID','factor',1,'p_factor_id','syntactic.py',247),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','syntactic.py',250),
]
