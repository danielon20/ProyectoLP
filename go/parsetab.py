
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND APPEND ARRAY BOOL BYTE CAP CASE COLON COMA COMMENT CONST COPY DECREASE DEFAULT DELETE DEQUAL DIVIDE ELSE EQUAL EQUAL_COMPARE FALSE FLOAT FLOAT32 FLOAT64 FOR FUNC GREATER GREATER_OR_EQUAL ID IF INCREASE INT32 INT64 INTEGER INTERFACE JOIN LCORCHE LEN LLLAVE LPAREN MAIN MAKE MAP MINUS MOD MULTI_COMMENT NOT NOT_EQUAL OR PACKAGE PLUS POINTER POINTS PRINT RCORCHE RETURN RLLAVE RPAREN SCAN SMALLER SMALLER_OR_EQUAL STRING STRUCT SWITCH TIMES TRUE TYPE VAR WFLOAT WINT WSTRINGcodigo : impresion COLON\n              | impresion\n\n              | scan_func COLON\n              | scan_func\n\n              | expression COLON\n              | expression\n\n              | cicloFor\n\n              | comparison\n\n              | logic_operation\n\n              | decVar COLON\n              | decVar\n\n              | var_asignation\n              | var_asignation COLON\n\n              | funciones\n              | funciones COLON\n\n              | SenIF\n\n              | SenStruct\n              | cStruct\n\n              | switch_statement\n\n              | array_declaration COLON\n              | array_declaration\n              | array_var COLON\n              | array_var\n              | array_assignment COLON\n              | array_assignment\n\n              | slice_declaration COLON\n              | slice_declaration\n              | slice_var COLON\n              | slice_var\n              | slice_assignment COLON\n              | slice_assignment\n              \n              | map_declaration COLON\n              | map_declaration\n              | map_assignment COLON\n              | map_assignment\n              \n              | func_declaration\n              \n              | main_funcvalues : STRING\n              | INTEGER\n              | FLOAT\n              | TRUE\n              | FALSEdata_types : INT32\n            | INT64\n            | FLOAT32\n            | FLOAT64\n            | BYTE\n            | WINT\n            | WFLOAT\n            | WSTRING\n            | BOOLoperations : expression \n                  | comparison \n                  | logic_operationdata_structure : array_var\n                      | map_varvar_asignation : ID EQUAL any\n                any : values\n                      | operations\n                      | ID\n                      | data_structure\n                      | funcionesarr_content :  LLLAVE items COMA more_items RLLAVE\n                | LLLAVE items RLLAVE\n                \n        more_items : items COMA more_items\n                   | items\n                   \n             items : values\n                   | operationssomething : ID \n                 | data_structure\n                 | values\n                 | operationsmain_func : FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVEscan_func : SCAN LPAREN POINTER RPARENcicloFor : FOR LLLAVE codigo RLLAVE\n                | FOR comparison LLLAVE codigo RLLAVE\n                | FOR logic_operation LLLAVE codigo RLLAVE\n                | FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE\n       incre    : ID INCREASE\n                | ID DECREASEdecVar : decVarOne\n              | VAR ID EQUAL INTEGER\n              | VAR ID EQUAL ID\n              | VAR ID EQUAL FLOAT\n              | VAR ID EQUAL expression\n              | VAR ID EQUAL logic_operation\n              | VAR ID EQUAL comparison\n              | VAR ID EQUAL STRING\n              | ID DEQUAL STRING\n              | ID DEQUAL FLOAT\n              | ID DEQUAL expression\n              | ID DEQUAL logic_operation\n              | ID DEQUAL comparisonslice_declaration : VAR ID LCORCHE RCORCHE data_types\n                         | VAR ID EQUAL LCORCHE RCORCHE data_types arr_content\n                         | VAR ID EQUAL funM\n                         | ID DEQUAL funM\n                         | ID DEQUAL LCORCHE RCORCHE data_types arr_content\n\n\n                    funM : MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN\n                         | MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN\n                         \n                     cap : INTEGER\n                         | ID\n                         | expressionslice_var : ID LCORCHE index_s RCORCHE\n         \n         index_s : ID\n                 | INTEGER\n                 | expressionslice_assignment : slice_var EQUAL something_s\n    \n              something_s : ID \n                        | array_var\n                        | values\n                        | operationsfunciones : APPEND LPAREN ID COMA values RPAREN\n                 | APPEND LPAREN ID COMA ID RPAREN\n                 | LEN LPAREN ID RPAREN\n                 | COPY LPAREN ID COMA ID RPAREN\n                 | DELETE LPAREN ID COMA ID RPARENdecVarOne : ID DEQUAL ID\n                 | ID DEQUAL INTEGERSenIF : IF LPAREN comparison RPAREN LLLAVE codigo RLLAVE\n             | IF LPAREN TRUE RPAREN LLLAVE codigo RLLAVE\n             | IF LPAREN FALSE RPAREN LLLAVE codigo RLLAVESenStruct : TYPE ID STRUCT LLLAVE declaration RLLAVE\n    \n       declaration : variable data_types\n                   | declaration variable data_types\n       \n       variable    : IDcStruct : ID DEQUAL ID LLLAVE asignaciones RLLAVE\n    \n       asignaciones : ID POINTS valor\n                    | ID POINTS valor COMA asignaciones\n       \n       valor : ID\n             | INTEGER\n             | TRUE\n             | FALSEcomparison : value op value\n       value      : ID\n                  | expression\n       op         : GREATER\n                  | SMALLER\n                  | GREATER_OR_EQUAL\n                  | SMALLER_OR_EQUAL\n                  | EQUAL_COMPARE\n                  | NOT_EQUALlogic_operation : logic_value logic_recu\n                       | negation\n\n       logic_recu      : logic_op logic_value\n                       | logic_op logic_value logic_recu\n        \n\n       logic_value     : negation\n                       | comparison\n                       | ID\n\n       negation        : NOT comparison\n                       | NOT ID\n                       \n       logic_op        : AND\n                       | ORswitch_statement : SWITCH ID LLLAVE cases RLLAVE\n\n                  cases : CASE values POINTS codigo \n                        | CASE values POINTS codigo more\n\n                  more : cases \n                       | DEFAULT POINTS codigoarray_declaration : VAR ID LCORCHE capacity RCORCHE data_types\n                         | VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content\n\n       capacity : INTEGER \n                | ID\n                | expressionarray_var : ID LCORCHE index RCORCHE\n         \n           index : ID\n                 | INTEGER\n                 | expressionarray_assignment : array_var EQUAL somethingmap_declaration : VAR ID LCORCHE data_types RCORCHE data_typesmap_var : ID LCORCHE key RCORCHE\n           key : ID \n               | values\n               | operationsmap_assignment : array_var EQUAL somethingfunc_declaration : FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE\n                        | FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN return_value RLLAVE\n\n                return_value : retorno COLON\n                             | retorno\n                \n                retorno : ID \n                        | values\n                        | operations\n                        | data_structure\n                        \n                params : ID data_types \n                       | more_params\n                       \n                more_params : ID data_types COMA paramsimpresion : PRINT LPAREN content RPAREN\n         content : values\n                 | operations\n                 | funciones\n                 | data_structure\n                 | IDexpression : something_ex\n                  | something_ex adicionaEx\n\n       adicionaEx : op something_ex\n                  | op something_ex adicionaEx\n\n    something_ex : ID\n                 | INTEGER\n                 | FLOAT\n                 | data_structure\n                 | funciones\n\n              op : PLUS\n                 | TIMES\n                 | DIVIDE\n                 | MINUS'
    
_lr_action_items = {'PRINT':([0,78,134,135,257,258,259,267,289,293,314,335,],[25,25,25,25,25,25,25,25,25,25,25,25,]),'SCAN':([0,78,134,135,257,258,259,267,289,293,314,335,],[26,26,26,26,26,26,26,26,26,26,26,26,]),'FOR':([0,78,134,135,257,258,259,267,289,293,314,335,],[28,28,28,28,28,28,28,28,28,28,28,28,]),'VAR':([0,78,134,135,257,258,259,267,289,293,314,335,],[33,33,33,33,33,33,33,33,33,33,33,33,]),'ID':([0,28,33,42,43,44,46,56,60,64,67,68,69,70,71,72,73,74,75,76,77,78,86,88,89,90,92,93,94,95,96,97,98,99,134,135,136,137,138,145,146,180,202,210,211,212,213,214,215,216,217,218,219,225,227,228,232,241,257,258,259,261,267,274,277,288,289,290,293,311,314,318,319,321,326,335,336,343,345,],[34,82,91,100,101,102,105,107,120,129,132,-137,-138,-139,-140,-141,-142,-201,-202,-203,-204,34,140,144,-152,-153,147,157,163,171,172,173,174,140,34,34,140,189,191,195,204,235,204,-43,-44,-45,-46,-47,-48,-49,-50,-51,247,251,255,256,260,269,34,34,34,260,34,298,306,-124,34,235,34,-125,34,247,306,333,337,34,337,306,333,]),'APPEND':([0,28,46,56,60,64,67,68,69,70,71,72,73,74,75,76,77,78,86,88,89,90,92,93,94,99,134,135,136,138,145,146,202,257,258,259,267,277,289,293,314,319,321,326,335,336,343,345,],[37,37,37,37,37,37,37,-137,-138,-139,-140,-141,-142,-201,-202,-203,-204,37,37,37,-152,-153,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'LEN':([0,28,46,56,60,64,67,68,69,70,71,72,73,74,75,76,77,78,86,88,89,90,92,93,94,99,134,135,136,138,145,146,202,257,258,259,267,277,289,293,314,319,321,326,335,336,343,345,],[38,38,38,38,38,38,38,-137,-138,-139,-140,-141,-142,-201,-202,-203,-204,38,38,38,-152,-153,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'COPY':([0,28,46,56,60,64,67,68,69,70,71,72,73,74,75,76,77,78,86,88,89,90,92,93,94,99,134,135,136,138,145,146,202,257,258,259,267,277,289,293,314,319,321,326,335,336,343,345,],[39,39,39,39,39,39,39,-137,-138,-139,-140,-141,-142,-201,-202,-203,-204,39,39,39,-152,-153,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'DELETE':([0,28,46,56,60,64,67,68,69,70,71,72,73,74,75,76,77,78,86,88,89,90,92,93,94,99,134,135,136,138,145,146,202,257,258,259,267,277,289,293,314,319,321,326,335,336,343,345,],[40,40,40,40,40,40,40,-137,-138,-139,-140,-141,-142,-201,-202,-203,-204,40,40,40,-152,-153,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'IF':([0,78,134,135,257,258,259,267,289,293,314,335,],[41,41,41,41,41,41,41,41,41,41,41,41,]),'TYPE':([0,78,134,135,257,258,259,267,289,293,314,335,],[42,42,42,42,42,42,42,42,42,42,42,42,]),'SWITCH':([0,78,134,135,257,258,259,267,289,293,314,335,],[43,43,43,43,43,43,43,43,43,43,43,43,]),'FUNC':([0,78,134,135,257,258,259,267,289,293,314,335,],[44,44,44,44,44,44,44,44,44,44,44,44,]),'INTEGER':([0,28,46,56,60,64,67,68,69,70,71,72,73,74,75,76,77,78,86,88,89,90,92,93,94,99,134,135,136,137,138,145,146,202,225,234,257,258,259,267,274,277,289,293,314,319,321,326,335,336,343,345,],[35,35,35,112,112,112,35,-137,-138,-139,-140,-141,-142,-201,-202,-203,-204,35,35,35,-152,-153,155,112,167,35,35,35,35,190,192,196,208,208,253,253,35,35,35,35,300,112,35,35,35,112,332,112,35,112,112,332,]),'FLOAT':([0,28,46,56,60,64,67,68,69,70,71,72,73,74,75,76,77,78,86,88,89,90,92,93,94,99,134,135,136,138,145,146,202,225,234,257,258,259,267,277,289,293,314,319,321,326,335,336,343,345,],[36,36,36,113,113,113,36,-137,-138,-139,-140,-141,-142,-201,-202,-203,-204,36,36,36,-152,-153,149,113,113,36,36,36,36,113,197,36,36,254,254,36,36,36,36,113,36,36,36,113,36,113,36,113,113,36,]),'NOT':([0,28,56,60,64,78,88,89,90,92,93,94,134,135,138,145,257,258,259,267,277,289,293,314,319,326,335,336,343,],[46,46,46,46,46,46,46,-152,-153,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,27,29,32,34,35,36,45,47,48,49,50,51,52,53,54,55,57,58,59,61,62,63,66,83,84,85,87,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,131,132,139,140,141,142,143,144,147,148,149,150,151,152,153,155,157,158,159,160,161,162,182,183,184,185,194,195,196,197,198,199,200,201,203,210,211,212,213,214,215,216,217,218,222,223,224,226,239,240,245,263,272,273,275,276,279,280,281,282,286,297,308,309,310,315,317,320,327,344,346,349,353,354,],[0,-2,-4,-6,-7,-8,-9,-11,-12,-14,-16,-17,-18,-19,-21,-23,-25,-27,-29,-31,-33,-35,-36,-37,-192,-81,-144,-196,-197,-198,-199,-56,-1,-3,-5,-10,-13,-15,-20,-22,-24,-26,-28,-30,-32,-34,-193,-136,-200,-55,-143,-150,-151,-168,-69,-70,-71,-72,-38,-39,-40,-41,-42,-52,-53,-54,-108,-109,-55,-111,-112,-194,-196,-134,-135,-145,-147,-148,-149,-118,-89,-90,-91,-92,-93,-97,-119,-60,-57,-58,-59,-61,-62,-186,-74,-195,-75,-146,-83,-82,-84,-85,-86,-87,-88,-96,-43,-44,-45,-46,-47,-48,-49,-50,-51,-164,-104,-170,-115,-76,-77,-94,-154,-159,-169,-127,-98,-114,-113,-116,-117,-123,-95,-120,-121,-122,-73,-160,-64,-78,-63,-99,-176,-175,-100,]),'COLON':([2,3,4,8,9,10,15,16,17,18,19,20,21,22,27,29,32,34,35,36,45,47,66,81,83,84,85,87,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,131,132,139,140,141,142,143,144,147,148,149,150,151,152,153,155,157,158,159,160,161,162,182,183,184,188,189,190,194,195,196,197,198,199,200,201,203,210,211,212,213,214,215,216,217,218,222,223,224,226,245,272,273,276,279,280,281,282,297,317,320,337,339,340,341,342,344,346,354,],[48,49,50,51,52,53,54,55,57,58,59,61,62,63,-192,-81,-144,-196,-197,-198,-199,-56,-193,136,-136,-200,-55,-143,-150,-151,-168,-69,-70,-71,-72,-38,-39,-40,-41,-42,-52,-53,-54,-108,-109,-55,-111,-112,-194,-196,-134,-135,-145,-147,-148,-149,-118,-89,-90,-91,-92,-93,-97,-119,-60,-57,-58,-59,-61,-62,-186,-74,-195,241,-118,-119,-146,-83,-82,-84,-85,-86,-87,-88,-96,-43,-44,-45,-46,-47,-48,-49,-50,-51,-164,-104,-170,-115,-94,-159,-169,-98,-114,-113,-116,-117,-95,-160,-64,-179,350,-180,-181,-182,-63,-99,-100,]),'RLLAVE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,27,29,32,34,35,36,45,47,48,49,50,51,52,53,54,55,57,58,59,61,62,63,66,83,84,85,87,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,131,132,133,139,140,141,142,143,144,147,148,149,150,151,152,153,155,157,158,159,160,161,162,182,183,184,185,186,187,194,195,196,197,198,199,200,201,203,210,211,212,213,214,215,216,217,218,222,223,224,226,233,239,240,245,248,261,263,272,273,275,276,279,280,281,282,283,284,285,286,288,292,297,298,299,300,301,302,303,304,305,306,308,309,310,311,312,315,316,317,320,322,323,327,328,329,330,337,338,339,340,341,342,344,346,347,348,349,350,351,353,354,],[-2,-4,-6,-7,-8,-9,-11,-12,-14,-16,-17,-18,-19,-21,-23,-25,-27,-29,-31,-33,-35,-36,-37,-192,-81,-144,-196,-197,-198,-199,-56,-1,-3,-5,-10,-13,-15,-20,-22,-24,-26,-28,-30,-32,-34,-193,-136,-200,-55,-143,-150,-151,-168,-69,-70,-71,-72,-38,-39,-40,-41,-42,-52,-53,-54,-108,-109,-55,-111,-112,-194,-196,185,-134,-135,-145,-147,-148,-149,-118,-89,-90,-91,-92,-93,-97,-119,-60,-57,-58,-59,-61,-62,-186,-74,-195,-75,239,240,-146,-83,-82,-84,-85,-86,-87,-88,-96,-43,-44,-45,-46,-47,-48,-49,-50,-51,-164,-104,-170,-115,263,-76,-77,-94,275,286,-154,-159,-169,-127,-98,-114,-113,-116,-117,308,309,310,-123,-124,315,-95,-130,-128,-131,-132,-133,320,-67,-68,-196,-120,-121,-122,-125,-155,-73,327,-160,-64,-156,-157,-78,-129,-66,344,-179,349,-178,-180,-181,-182,-63,-99,-158,353,-176,-177,-65,-175,-100,]),'DEFAULT':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,27,29,32,34,35,36,45,47,48,49,50,51,52,53,54,55,57,58,59,61,62,63,66,83,84,85,87,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,131,132,139,140,141,142,143,144,147,148,149,150,151,152,153,155,157,158,159,160,161,162,182,183,184,185,194,195,196,197,198,199,200,201,203,210,211,212,213,214,215,216,217,218,222,223,224,226,239,240,245,263,272,273,275,276,279,280,281,282,286,297,308,309,310,312,315,317,320,327,344,346,349,353,354,],[-2,-4,-6,-7,-8,-9,-11,-12,-14,-16,-17,-18,-19,-21,-23,-25,-27,-29,-31,-33,-35,-36,-37,-192,-81,-144,-196,-197,-198,-199,-56,-1,-3,-5,-10,-13,-15,-20,-22,-24,-26,-28,-30,-32,-34,-193,-136,-200,-55,-143,-150,-151,-168,-69,-70,-71,-72,-38,-39,-40,-41,-42,-52,-53,-54,-108,-109,-55,-111,-112,-194,-196,-134,-135,-145,-147,-148,-149,-118,-89,-90,-91,-92,-93,-97,-119,-60,-57,-58,-59,-61,-62,-186,-74,-195,-75,-146,-83,-82,-84,-85,-86,-87,-88,-96,-43,-44,-45,-46,-47,-48,-49,-50,-51,-164,-104,-170,-115,-76,-77,-94,-154,-159,-169,-127,-98,-114,-113,-116,-117,-123,-95,-120,-121,-122,324,-73,-160,-64,-78,-63,-99,-176,-175,-100,]),'CASE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,27,29,32,34,35,36,45,47,48,49,50,51,52,53,54,55,57,58,59,61,62,63,66,83,84,85,87,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,131,132,139,140,141,142,143,144,147,148,149,150,151,152,153,155,157,158,159,160,161,162,179,182,183,184,185,194,195,196,197,198,199,200,201,203,210,211,212,213,214,215,216,217,218,222,223,224,226,239,240,245,263,272,273,275,276,279,280,281,282,286,297,308,309,310,312,315,317,320,327,344,346,349,353,354,],[-2,-4,-6,-7,-8,-9,-11,-12,-14,-16,-17,-18,-19,-21,-23,-25,-27,-29,-31,-33,-35,-36,-37,-192,-81,-144,-196,-197,-198,-199,-56,-1,-3,-5,-10,-13,-15,-20,-22,-24,-26,-28,-30,-32,-34,-193,-136,-200,-55,-143,-150,-151,-168,-69,-70,-71,-72,-38,-39,-40,-41,-42,-52,-53,-54,-108,-109,-55,-111,-112,-194,-196,-134,-135,-145,-147,-148,-149,-118,-89,-90,-91,-92,-93,-97,-119,-60,-57,-58,-59,-61,-62,234,-186,-74,-195,-75,-146,-83,-82,-84,-85,-86,-87,-88,-96,-43,-44,-45,-46,-47,-48,-49,-50,-51,-164,-104,-170,-115,-76,-77,-94,-154,-159,-169,-127,-98,-114,-113,-116,-117,-123,-95,-120,-121,-122,234,-73,-160,-64,-78,-63,-99,-176,-175,-100,]),'RETURN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,27,29,32,34,35,36,45,47,48,49,50,51,52,53,54,55,57,58,59,61,62,63,66,83,84,85,87,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,131,132,139,140,141,142,143,144,147,148,149,150,151,152,153,155,157,158,159,160,161,162,182,183,184,185,194,195,196,197,198,199,200,201,203,210,211,212,213,214,215,216,217,218,222,223,224,226,239,240,245,263,272,273,275,276,279,280,281,282,286,297,308,309,310,314,315,317,320,325,327,344,346,349,353,354,],[-2,-4,-6,-7,-8,-9,-11,-12,-14,-16,-17,-18,-19,-21,-23,-25,-27,-29,-31,-33,-35,-36,-37,-192,-81,-144,-196,-197,-198,-199,-56,-1,-3,-5,-10,-13,-15,-20,-22,-24,-26,-28,-30,-32,-34,-193,-136,-200,-55,-143,-150,-151,-168,-69,-70,-71,-72,-38,-39,-40,-41,-42,-52,-53,-54,-108,-109,-55,-111,-112,-194,-196,-134,-135,-145,-147,-148,-149,-118,-89,-90,-91,-92,-93,-97,-119,-60,-57,-58,-59,-61,-62,-186,-74,-195,-75,-146,-83,-82,-84,-85,-86,-87,-88,-96,-43,-44,-45,-46,-47,-48,-49,-50,-51,-164,-104,-170,-115,-76,-77,-94,-154,-159,-169,-127,-98,-114,-113,-116,-117,-123,-95,-120,-121,-122,326,-73,-160,-64,336,-78,-63,-99,-176,-175,-100,]),'GREATER':([4,10,16,27,30,34,35,36,45,47,66,82,83,84,85,105,107,108,112,113,116,120,121,127,128,129,131,132,140,144,147,149,150,155,157,161,162,163,167,168,184,191,192,193,195,196,197,198,204,208,222,224,226,279,280,281,282,306,332,333,337,342,],[-136,-200,-55,68,68,-135,-197,-198,-199,-56,-193,-135,-136,-200,-55,-135,-135,-199,-197,-198,-136,-135,-55,-200,-199,-135,68,-196,-135,-135,-135,-198,-136,-197,-135,-199,-200,-135,-197,-136,-195,-135,-197,-136,-135,-197,-198,-136,-196,-197,-164,-170,-115,-114,-113,-116,-117,-135,-197,-196,-135,-199,]),'SMALLER':([4,10,16,27,30,34,35,36,45,47,66,82,83,84,85,105,107,108,112,113,116,120,121,127,128,129,131,132,140,144,147,149,150,155,157,161,162,163,167,168,184,191,192,193,195,196,197,198,204,208,222,224,226,279,280,281,282,306,332,333,337,342,],[-136,-200,-55,69,69,-135,-197,-198,-199,-56,-193,-135,-136,-200,-55,-135,-135,-199,-197,-198,-136,-135,-55,-200,-199,-135,69,-196,-135,-135,-135,-198,-136,-197,-135,-199,-200,-135,-197,-136,-195,-135,-197,-136,-135,-197,-198,-136,-196,-197,-164,-170,-115,-114,-113,-116,-117,-135,-197,-196,-135,-199,]),'GREATER_OR_EQUAL':([4,10,16,27,30,34,35,36,45,47,66,82,83,84,85,105,107,108,112,113,116,120,121,127,128,129,131,132,140,144,147,149,150,155,157,161,162,163,167,168,184,191,192,193,195,196,197,198,204,208,222,224,226,279,280,281,282,306,332,333,337,342,],[-136,-200,-55,70,70,-135,-197,-198,-199,-56,-193,-135,-136,-200,-55,-135,-135,-199,-197,-198,-136,-135,-55,-200,-199,-135,70,-196,-135,-135,-135,-198,-136,-197,-135,-199,-200,-135,-197,-136,-195,-135,-197,-136,-135,-197,-198,-136,-196,-197,-164,-170,-115,-114,-113,-116,-117,-135,-197,-196,-135,-199,]),'SMALLER_OR_EQUAL':([4,10,16,27,30,34,35,36,45,47,66,82,83,84,85,105,107,108,112,113,116,120,121,127,128,129,131,132,140,144,147,149,150,155,157,161,162,163,167,168,184,191,192,193,195,196,197,198,204,208,222,224,226,279,280,281,282,306,332,333,337,342,],[-136,-200,-55,71,71,-135,-197,-198,-199,-56,-193,-135,-136,-200,-55,-135,-135,-199,-197,-198,-136,-135,-55,-200,-199,-135,71,-196,-135,-135,-135,-198,-136,-197,-135,-199,-200,-135,-197,-136,-195,-135,-197,-136,-135,-197,-198,-136,-196,-197,-164,-170,-115,-114,-113,-116,-117,-135,-197,-196,-135,-199,]),'EQUAL_COMPARE':([4,10,16,27,30,34,35,36,45,47,66,82,83,84,85,105,107,108,112,113,116,120,121,127,128,129,131,132,140,144,147,149,150,155,157,161,162,163,167,168,184,191,192,193,195,196,197,198,204,208,222,224,226,279,280,281,282,306,332,333,337,342,],[-136,-200,-55,72,72,-135,-197,-198,-199,-56,-193,-135,-136,-200,-55,-135,-135,-199,-197,-198,-136,-135,-55,-200,-199,-135,72,-196,-135,-135,-135,-198,-136,-197,-135,-199,-200,-135,-197,-136,-195,-135,-197,-136,-135,-197,-198,-136,-196,-197,-164,-170,-115,-114,-113,-116,-117,-135,-197,-196,-135,-199,]),'NOT_EQUAL':([4,10,16,27,30,34,35,36,45,47,66,82,83,84,85,105,107,108,112,113,116,120,121,127,128,129,131,132,140,144,147,149,150,155,157,161,162,163,167,168,184,191,192,193,195,196,197,198,204,208,222,224,226,279,280,281,282,306,332,333,337,342,],[-136,-200,-55,73,73,-135,-197,-198,-199,-56,-193,-135,-136,-200,-55,-135,-135,-199,-197,-198,-136,-135,-55,-200,-199,-135,73,-196,-135,-135,-135,-198,-136,-197,-135,-199,-200,-135,-197,-136,-195,-135,-197,-136,-135,-197,-198,-136,-196,-197,-164,-170,-115,-114,-113,-116,-117,-135,-197,-196,-135,-199,]),'PLUS':([4,10,16,27,30,34,35,36,45,47,66,82,83,84,85,105,107,108,112,113,116,120,121,127,128,129,131,132,140,144,147,149,150,155,157,161,162,163,167,168,184,191,192,193,195,196,197,198,204,208,222,224,226,279,280,281,282,306,332,333,337,342,],[-136,-200,-55,74,74,-135,-197,-198,-199,-56,-193,-135,-136,-200,-55,-135,-135,-199,-197,-198,-136,-135,-55,-200,-199,-135,74,-196,-135,-135,-135,-198,-136,-197,-135,-199,-200,-135,-197,-136,-195,-135,-197,-136,-135,-197,-198,-136,-196,-197,-164,-170,-115,-114,-113,-116,-117,-135,-197,-196,-135,-199,]),'TIMES':([4,10,16,27,30,34,35,36,45,47,66,82,83,84,85,105,107,108,112,113,116,120,121,127,128,129,131,132,140,144,147,149,150,155,157,161,162,163,167,168,184,191,192,193,195,196,197,198,204,208,222,224,226,279,280,281,282,306,332,333,337,342,],[-136,-200,-55,75,75,-135,-197,-198,-199,-56,-193,-135,-136,-200,-55,-135,-135,-199,-197,-198,-136,-135,-55,-200,-199,-135,75,-196,-135,-135,-135,-198,-136,-197,-135,-199,-200,-135,-197,-136,-195,-135,-197,-136,-135,-197,-198,-136,-196,-197,-164,-170,-115,-114,-113,-116,-117,-135,-197,-196,-135,-199,]),'DIVIDE':([4,10,16,27,30,34,35,36,45,47,66,82,83,84,85,105,107,108,112,113,116,120,121,127,128,129,131,132,140,144,147,149,150,155,157,161,162,163,167,168,184,191,192,193,195,196,197,198,204,208,222,224,226,279,280,281,282,306,332,333,337,342,],[-136,-200,-55,76,76,-135,-197,-198,-199,-56,-193,-135,-136,-200,-55,-135,-135,-199,-197,-198,-136,-135,-55,-200,-199,-135,76,-196,-135,-135,-135,-198,-136,-197,-135,-199,-200,-135,-197,-136,-195,-135,-197,-136,-135,-197,-198,-136,-196,-197,-164,-170,-115,-114,-113,-116,-117,-135,-197,-196,-135,-199,]),'MINUS':([4,10,16,27,30,34,35,36,45,47,66,82,83,84,85,105,107,108,112,113,116,120,121,127,128,129,131,132,140,144,147,149,150,155,157,161,162,163,167,168,184,191,192,193,195,196,197,198,204,208,222,224,226,279,280,281,282,306,332,333,337,342,],[-136,-200,-55,77,77,-135,-197,-198,-199,-56,-193,-135,-136,-200,-55,-135,-135,-199,-197,-198,-136,-135,-55,-200,-199,-135,77,-196,-135,-135,-135,-198,-136,-197,-135,-199,-200,-135,-197,-136,-195,-135,-197,-136,-135,-197,-198,-136,-196,-197,-164,-170,-115,-114,-113,-116,-117,-135,-197,-196,-135,-199,]),'AND':([6,27,31,32,34,35,36,45,47,66,79,82,83,84,85,104,105,107,117,120,129,131,132,139,140,141,142,143,144,147,152,157,163,184,191,195,200,222,224,226,279,280,281,282,306,337,],[-148,-192,89,-147,-149,-197,-198,-199,-56,-193,-148,-149,-136,-200,-55,-150,-151,-149,-148,-149,-149,-194,-196,-134,-135,89,-147,-148,-149,-149,-148,-149,-149,-195,-149,-149,-148,-164,-170,-115,-114,-113,-116,-117,-149,-149,]),'OR':([6,27,31,32,34,35,36,45,47,66,79,82,83,84,85,104,105,107,117,120,129,131,132,139,140,141,142,143,144,147,152,157,163,184,191,195,200,222,224,226,279,280,281,282,306,337,],[-148,-192,90,-147,-149,-197,-198,-199,-56,-193,-148,-149,-136,-200,-55,-150,-151,-149,-148,-149,-149,-194,-196,-134,-135,90,-147,-148,-149,-149,-148,-149,-149,-195,-149,-149,-148,-164,-170,-115,-114,-113,-116,-117,-149,-149,]),'EQUAL':([16,19,34,91,222,223,],[56,60,93,145,-164,-104,]),'LPAREN':([25,26,37,38,39,40,41,102,103,156,],[64,65,95,96,97,98,99,180,181,221,]),'RPAREN':([27,32,35,36,45,47,66,83,84,85,87,104,105,111,112,113,114,115,116,117,118,124,125,126,127,128,129,130,131,132,139,140,141,142,143,144,172,175,176,177,181,184,194,210,211,212,213,214,215,216,217,218,222,224,226,236,237,251,252,253,254,255,256,265,279,280,281,282,313,331,332,333,334,352,],[-192,-144,-197,-198,-199,-56,-193,-136,-200,-55,-143,-150,-151,-38,-39,-40,-41,-42,-52,-53,-54,182,-187,-188,-189,-190,-191,183,-194,-196,-134,-135,-145,-147,-148,-149,226,229,230,231,238,-195,-146,-43,-44,-45,-46,-47,-48,-49,-50,-51,-164,-170,-115,266,-184,279,280,-39,-40,281,282,-183,-114,-113,-116,-117,-185,346,-101,-102,-103,354,]),'LLLAVE':([27,28,32,35,36,45,47,66,79,80,83,84,85,87,101,104,105,131,132,139,140,141,142,143,144,147,178,184,194,210,211,212,213,214,215,216,217,218,222,224,226,229,230,231,238,249,268,271,279,280,281,282,291,294,295,296,],[-192,78,-144,-197,-198,-199,-56,-193,134,135,-136,-200,-55,-143,179,-150,-151,-194,-196,-134,-135,-145,-147,-148,-149,219,232,-195,-146,-43,-44,-45,-46,-47,-48,-49,-50,-51,-164,-170,-115,257,258,259,267,277,293,277,-114,-113,-116,-117,314,-79,-80,277,]),'RCORCHE':([27,32,35,36,45,47,66,83,84,85,87,104,105,111,113,114,115,117,118,131,132,139,140,141,142,143,144,146,154,163,164,165,166,167,168,169,170,184,191,192,193,194,202,204,205,207,208,209,210,211,212,213,214,215,216,217,218,222,224,226,242,250,279,280,281,282,],[-192,-144,-197,-198,-199,-56,-193,-136,-200,-55,-143,-150,-151,-38,-40,-41,-42,-53,-54,-194,-196,-134,-135,-145,-147,-148,-149,206,220,-105,222,223,224,-39,-52,-172,-173,-195,-165,-39,-52,-146,243,-162,244,246,-161,-163,-43,-44,-45,-46,-47,-48,-49,-50,-51,-164,-170,-115,270,278,-114,-113,-116,-117,]),'COMA':([27,32,35,36,45,47,66,83,84,85,87,104,105,111,112,113,114,115,116,117,118,131,132,139,140,141,142,143,144,171,173,174,184,194,210,211,212,213,214,215,216,217,218,222,224,226,265,279,280,281,282,298,299,300,301,302,303,304,305,306,307,329,331,332,333,334,],[-192,-144,-197,-198,-199,-56,-193,-136,-200,-55,-143,-150,-151,-38,-39,-40,-41,-42,-52,-53,-54,-194,-196,-134,-135,-145,-147,-148,-149,225,227,228,-195,-146,-43,-44,-45,-46,-47,-48,-49,-50,-51,-164,-170,-115,290,-114,-113,-116,-117,-130,318,-131,-132,-133,319,-67,-68,-196,321,343,345,-101,-102,-103,]),'DEQUAL':([34,82,],[92,137,]),'LCORCHE':([34,82,91,92,105,107,120,129,132,140,144,145,147,157,163,191,195,204,221,306,333,337,],[94,138,146,154,138,138,138,138,138,138,138,202,138,138,138,138,138,138,250,138,138,138,]),'MAIN':([44,],[103,]),'STRING':([56,60,64,92,93,94,138,145,225,234,277,319,326,336,343,],[111,111,111,148,111,111,111,201,111,111,111,111,111,111,111,]),'TRUE':([56,60,64,93,94,99,138,225,234,274,277,319,326,336,343,],[114,114,114,114,114,176,114,114,114,301,114,114,114,114,114,]),'FALSE':([56,60,64,93,94,99,138,225,234,274,277,319,326,336,343,],[115,115,115,115,115,177,115,115,115,302,115,115,115,115,115,]),'POINTER':([65,],[130,]),'MAKE':([92,145,],[156,156,]),'STRUCT':([100,],[178,]),'POINTS':([111,114,115,247,253,254,264,324,],[-38,-41,-42,274,-39,-40,289,335,]),'INT32':([146,206,220,235,243,244,246,260,262,266,270,278,287,],[210,210,210,210,210,210,210,-126,210,210,210,210,210,]),'INT64':([146,206,220,235,243,244,246,260,262,266,270,278,287,],[211,211,211,211,211,211,211,-126,211,211,211,211,211,]),'FLOAT32':([146,206,220,235,243,244,246,260,262,266,270,278,287,],[212,212,212,212,212,212,212,-126,212,212,212,212,212,]),'FLOAT64':([146,206,220,235,243,244,246,260,262,266,270,278,287,],[213,213,213,213,213,213,213,-126,213,213,213,213,213,]),'BYTE':([146,206,220,235,243,244,246,260,262,266,270,278,287,],[214,214,214,214,214,214,214,-126,214,214,214,214,214,]),'WINT':([146,206,220,235,243,244,246,260,262,266,270,278,287,],[215,215,215,215,215,215,215,-126,215,215,215,215,215,]),'WFLOAT':([146,206,220,235,243,244,246,260,262,266,270,278,287,],[216,216,216,216,216,216,216,-126,216,216,216,216,216,]),'WSTRING':([146,206,220,235,243,244,246,260,262,266,270,278,287,],[217,217,217,217,217,217,217,-126,217,217,217,217,217,]),'BOOL':([146,206,220,235,243,244,246,260,262,266,270,278,287,],[218,218,218,218,218,218,218,-126,218,218,218,218,218,]),'INCREASE':([269,],[294,]),'DECREASE':([269,],[295,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigo':([0,78,134,135,257,258,259,267,289,293,314,335,],[1,133,186,187,283,284,285,292,312,316,325,347,]),'impresion':([0,78,134,135,257,258,259,267,289,293,314,335,],[2,2,2,2,2,2,2,2,2,2,2,2,]),'scan_func':([0,78,134,135,257,258,259,267,289,293,314,335,],[3,3,3,3,3,3,3,3,3,3,3,3,]),'expression':([0,28,46,56,60,64,78,86,88,92,93,94,99,134,135,136,138,145,146,202,257,258,259,267,277,289,293,314,319,321,326,335,336,343,345,],[4,83,83,116,116,116,4,83,83,150,116,168,83,4,4,83,193,198,209,209,4,4,4,4,116,4,4,4,116,334,116,4,116,116,334,]),'cicloFor':([0,78,134,135,257,258,259,267,289,293,314,335,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'comparison':([0,28,46,56,60,64,78,88,92,93,94,99,134,135,136,138,145,257,258,259,267,277,289,293,314,319,326,335,336,343,],[6,79,104,117,117,117,6,143,152,117,117,175,6,6,188,117,200,6,6,6,6,117,6,6,6,117,117,6,117,117,]),'logic_operation':([0,28,56,60,64,78,92,93,94,134,135,138,145,257,258,259,267,277,289,293,314,319,326,335,336,343,],[7,80,118,118,118,7,151,118,118,7,7,118,199,7,7,7,7,118,7,7,7,118,118,7,118,118,]),'decVar':([0,78,134,135,257,258,259,267,289,293,314,335,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'var_asignation':([0,78,134,135,257,258,259,267,289,293,314,335,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'funciones':([0,28,46,56,60,64,67,78,86,88,92,93,94,99,134,135,136,138,145,146,202,257,258,259,267,277,289,293,314,319,321,326,335,336,343,345,],[10,84,84,84,84,127,84,10,84,84,84,162,84,84,10,10,84,84,84,84,84,10,10,10,10,84,10,10,10,84,84,84,10,84,84,84,]),'SenIF':([0,78,134,135,257,258,259,267,289,293,314,335,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'SenStruct':([0,78,134,135,257,258,259,267,289,293,314,335,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'cStruct':([0,78,134,135,257,258,259,267,289,293,314,335,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'switch_statement':([0,78,134,135,257,258,259,267,289,293,314,335,],[14,14,14,14,14,14,14,14,14,14,14,14,]),'array_declaration':([0,78,134,135,257,258,259,267,289,293,314,335,],[15,15,15,15,15,15,15,15,15,15,15,15,]),'array_var':([0,28,46,56,60,64,67,78,86,88,92,93,94,99,134,135,136,138,145,146,202,257,258,259,267,277,289,293,314,319,321,326,335,336,343,345,],[16,85,85,85,121,85,85,16,85,85,85,85,85,85,16,16,85,85,85,85,85,16,16,16,16,85,16,16,16,85,85,85,16,85,85,85,]),'array_assignment':([0,78,134,135,257,258,259,267,289,293,314,335,],[17,17,17,17,17,17,17,17,17,17,17,17,]),'slice_declaration':([0,78,134,135,257,258,259,267,289,293,314,335,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'slice_var':([0,78,134,135,257,258,259,267,289,293,314,335,],[19,19,19,19,19,19,19,19,19,19,19,19,]),'slice_assignment':([0,78,134,135,257,258,259,267,289,293,314,335,],[20,20,20,20,20,20,20,20,20,20,20,20,]),'map_declaration':([0,78,134,135,257,258,259,267,289,293,314,335,],[21,21,21,21,21,21,21,21,21,21,21,21,]),'map_assignment':([0,78,134,135,257,258,259,267,289,293,314,335,],[22,22,22,22,22,22,22,22,22,22,22,22,]),'func_declaration':([0,78,134,135,257,258,259,267,289,293,314,335,],[23,23,23,23,23,23,23,23,23,23,23,23,]),'main_func':([0,78,134,135,257,258,259,267,289,293,314,335,],[24,24,24,24,24,24,24,24,24,24,24,24,]),'something_ex':([0,28,46,56,60,64,67,78,86,88,92,93,94,99,134,135,136,138,145,146,202,257,258,259,267,277,289,293,314,319,321,326,335,336,343,345,],[27,27,27,27,27,27,131,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'decVarOne':([0,28,78,134,135,257,258,259,267,289,293,314,335,],[29,81,29,29,29,29,29,29,29,29,29,29,29,]),'value':([0,28,46,56,60,64,78,86,88,92,93,94,99,134,135,136,138,145,257,258,259,267,277,289,293,314,319,326,335,336,343,],[30,30,30,30,30,30,30,139,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'logic_value':([0,28,56,60,64,78,88,92,93,94,134,135,138,145,257,258,259,267,277,289,293,314,319,326,335,336,343,],[31,31,31,31,31,31,141,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'negation':([0,28,56,60,64,78,88,92,93,94,134,135,138,145,257,258,259,267,277,289,293,314,319,326,335,336,343,],[32,32,32,32,32,32,142,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'data_structure':([0,28,46,56,60,64,67,78,86,88,92,93,94,99,134,135,136,138,145,146,202,257,258,259,267,277,289,293,314,319,321,326,335,336,343,345,],[45,45,45,108,45,128,45,45,45,45,45,161,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,342,45,342,45,45,]),'map_var':([0,28,46,56,60,64,67,78,86,88,92,93,94,99,134,135,136,138,145,146,202,257,258,259,267,277,289,293,314,319,321,326,335,336,343,345,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'adicionaEx':([27,131,],[66,184,]),'op':([27,30,131,],[67,86,67,]),'logic_recu':([31,141,],[87,194,]),'logic_op':([31,141,],[88,88,]),'something':([56,],[106,]),'values':([56,60,64,93,94,138,225,234,277,319,326,336,343,],[109,122,125,159,169,169,252,264,304,304,340,340,304,]),'operations':([56,60,64,93,94,138,277,319,326,336,343,],[110,123,126,160,170,170,305,305,341,341,305,]),'something_s':([60,],[119,]),'content':([64,],[124,]),'funM':([92,145,],[153,203,]),'any':([93,],[158,]),'index':([94,138,],[164,164,]),'index_s':([94,],[165,]),'key':([94,138,],[166,166,]),'capacity':([146,202,],[205,242,]),'data_types':([146,206,220,235,243,244,246,262,266,270,278,287,],[207,245,249,265,271,272,273,288,291,296,307,311,]),'cases':([179,312,],[233,323,]),'params':([180,290,],[236,313,]),'more_params':([180,290,],[237,237,]),'asignaciones':([219,318,],[248,328,]),'declaration':([232,],[261,]),'variable':([232,261,],[262,287,]),'incre':([241,],[268,]),'arr_content':([249,271,296,],[276,297,317,]),'valor':([274,],[299,]),'items':([277,319,343,],[303,329,329,]),'more':([312,],[322,]),'more_items':([319,343,],[330,351,]),'cap':([321,345,],[331,352,]),'return_value':([326,],[338,]),'retorno':([326,336,],[339,348,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigo","S'",1,None,None,None),
  ('codigo -> impresion COLON','codigo',2,'p_coddigo','syntactic.py',17),
  ('codigo -> impresion','codigo',1,'p_coddigo','syntactic.py',18),
  ('codigo -> scan_func COLON','codigo',2,'p_coddigo','syntactic.py',20),
  ('codigo -> scan_func','codigo',1,'p_coddigo','syntactic.py',21),
  ('codigo -> expression COLON','codigo',2,'p_coddigo','syntactic.py',23),
  ('codigo -> expression','codigo',1,'p_coddigo','syntactic.py',24),
  ('codigo -> cicloFor','codigo',1,'p_coddigo','syntactic.py',26),
  ('codigo -> comparison','codigo',1,'p_coddigo','syntactic.py',28),
  ('codigo -> logic_operation','codigo',1,'p_coddigo','syntactic.py',30),
  ('codigo -> decVar COLON','codigo',2,'p_coddigo','syntactic.py',32),
  ('codigo -> decVar','codigo',1,'p_coddigo','syntactic.py',33),
  ('codigo -> var_asignation','codigo',1,'p_coddigo','syntactic.py',35),
  ('codigo -> var_asignation COLON','codigo',2,'p_coddigo','syntactic.py',36),
  ('codigo -> funciones','codigo',1,'p_coddigo','syntactic.py',38),
  ('codigo -> funciones COLON','codigo',2,'p_coddigo','syntactic.py',39),
  ('codigo -> SenIF','codigo',1,'p_coddigo','syntactic.py',41),
  ('codigo -> SenStruct','codigo',1,'p_coddigo','syntactic.py',43),
  ('codigo -> cStruct','codigo',1,'p_coddigo','syntactic.py',44),
  ('codigo -> switch_statement','codigo',1,'p_coddigo','syntactic.py',46),
  ('codigo -> array_declaration COLON','codigo',2,'p_coddigo','syntactic.py',48),
  ('codigo -> array_declaration','codigo',1,'p_coddigo','syntactic.py',49),
  ('codigo -> array_var COLON','codigo',2,'p_coddigo','syntactic.py',50),
  ('codigo -> array_var','codigo',1,'p_coddigo','syntactic.py',51),
  ('codigo -> array_assignment COLON','codigo',2,'p_coddigo','syntactic.py',52),
  ('codigo -> array_assignment','codigo',1,'p_coddigo','syntactic.py',53),
  ('codigo -> slice_declaration COLON','codigo',2,'p_coddigo','syntactic.py',55),
  ('codigo -> slice_declaration','codigo',1,'p_coddigo','syntactic.py',56),
  ('codigo -> slice_var COLON','codigo',2,'p_coddigo','syntactic.py',57),
  ('codigo -> slice_var','codigo',1,'p_coddigo','syntactic.py',58),
  ('codigo -> slice_assignment COLON','codigo',2,'p_coddigo','syntactic.py',59),
  ('codigo -> slice_assignment','codigo',1,'p_coddigo','syntactic.py',60),
  ('codigo -> map_declaration COLON','codigo',2,'p_coddigo','syntactic.py',62),
  ('codigo -> map_declaration','codigo',1,'p_coddigo','syntactic.py',63),
  ('codigo -> map_assignment COLON','codigo',2,'p_coddigo','syntactic.py',64),
  ('codigo -> map_assignment','codigo',1,'p_coddigo','syntactic.py',65),
  ('codigo -> func_declaration','codigo',1,'p_coddigo','syntactic.py',67),
  ('codigo -> main_func','codigo',1,'p_coddigo','syntactic.py',69),
  ('values -> STRING','values',1,'p_values','syntactic.py',72),
  ('values -> INTEGER','values',1,'p_values','syntactic.py',73),
  ('values -> FLOAT','values',1,'p_values','syntactic.py',74),
  ('values -> TRUE','values',1,'p_values','syntactic.py',75),
  ('values -> FALSE','values',1,'p_values','syntactic.py',76),
  ('data_types -> INT32','data_types',1,'p_data_types','syntactic.py',79),
  ('data_types -> INT64','data_types',1,'p_data_types','syntactic.py',80),
  ('data_types -> FLOAT32','data_types',1,'p_data_types','syntactic.py',81),
  ('data_types -> FLOAT64','data_types',1,'p_data_types','syntactic.py',82),
  ('data_types -> BYTE','data_types',1,'p_data_types','syntactic.py',83),
  ('data_types -> WINT','data_types',1,'p_data_types','syntactic.py',84),
  ('data_types -> WFLOAT','data_types',1,'p_data_types','syntactic.py',85),
  ('data_types -> WSTRING','data_types',1,'p_data_types','syntactic.py',86),
  ('data_types -> BOOL','data_types',1,'p_data_types','syntactic.py',87),
  ('operations -> expression','operations',1,'p_operations','syntactic.py',90),
  ('operations -> comparison','operations',1,'p_operations','syntactic.py',91),
  ('operations -> logic_operation','operations',1,'p_operations','syntactic.py',92),
  ('data_structure -> array_var','data_structure',1,'p_data_structure','syntactic.py',95),
  ('data_structure -> map_var','data_structure',1,'p_data_structure','syntactic.py',96),
  ('var_asignation -> ID EQUAL any','var_asignation',3,'p_var_asignation','syntactic.py',99),
  ('any -> values','any',1,'p_var_asignation','syntactic.py',100),
  ('any -> operations','any',1,'p_var_asignation','syntactic.py',101),
  ('any -> ID','any',1,'p_var_asignation','syntactic.py',102),
  ('any -> data_structure','any',1,'p_var_asignation','syntactic.py',103),
  ('any -> funciones','any',1,'p_var_asignation','syntactic.py',104),
  ('arr_content -> LLLAVE items COMA more_items RLLAVE','arr_content',5,'p_arr_content','syntactic.py',107),
  ('arr_content -> LLLAVE items RLLAVE','arr_content',3,'p_arr_content','syntactic.py',108),
  ('more_items -> items COMA more_items','more_items',3,'p_arr_content','syntactic.py',110),
  ('more_items -> items','more_items',1,'p_arr_content','syntactic.py',111),
  ('items -> values','items',1,'p_arr_content','syntactic.py',113),
  ('items -> operations','items',1,'p_arr_content','syntactic.py',114),
  ('something -> ID','something',1,'p_something','syntactic.py',117),
  ('something -> data_structure','something',1,'p_something','syntactic.py',118),
  ('something -> values','something',1,'p_something','syntactic.py',119),
  ('something -> operations','something',1,'p_something','syntactic.py',120),
  ('main_func -> FUNC MAIN LPAREN RPAREN LLLAVE codigo RLLAVE','main_func',7,'p_main_func','syntactic.py',123),
  ('scan_func -> SCAN LPAREN POINTER RPAREN','scan_func',4,'p_scan_func','syntactic.py',126),
  ('cicloFor -> FOR LLLAVE codigo RLLAVE','cicloFor',4,'p_for','syntactic.py',132),
  ('cicloFor -> FOR comparison LLLAVE codigo RLLAVE','cicloFor',5,'p_for','syntactic.py',133),
  ('cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE','cicloFor',5,'p_for','syntactic.py',134),
  ('cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE','cicloFor',9,'p_for','syntactic.py',135),
  ('incre -> ID INCREASE','incre',2,'p_for','syntactic.py',136),
  ('incre -> ID DECREASE','incre',2,'p_for','syntactic.py',137),
  ('decVar -> decVarOne','decVar',1,'p_decVar','syntactic.py',142),
  ('decVar -> VAR ID EQUAL INTEGER','decVar',4,'p_decVar','syntactic.py',143),
  ('decVar -> VAR ID EQUAL ID','decVar',4,'p_decVar','syntactic.py',144),
  ('decVar -> VAR ID EQUAL FLOAT','decVar',4,'p_decVar','syntactic.py',145),
  ('decVar -> VAR ID EQUAL expression','decVar',4,'p_decVar','syntactic.py',146),
  ('decVar -> VAR ID EQUAL logic_operation','decVar',4,'p_decVar','syntactic.py',147),
  ('decVar -> VAR ID EQUAL comparison','decVar',4,'p_decVar','syntactic.py',148),
  ('decVar -> VAR ID EQUAL STRING','decVar',4,'p_decVar','syntactic.py',149),
  ('decVar -> ID DEQUAL STRING','decVar',3,'p_decVar','syntactic.py',150),
  ('decVar -> ID DEQUAL FLOAT','decVar',3,'p_decVar','syntactic.py',151),
  ('decVar -> ID DEQUAL expression','decVar',3,'p_decVar','syntactic.py',152),
  ('decVar -> ID DEQUAL logic_operation','decVar',3,'p_decVar','syntactic.py',153),
  ('decVar -> ID DEQUAL comparison','decVar',3,'p_decVar','syntactic.py',154),
  ('slice_declaration -> VAR ID LCORCHE RCORCHE data_types','slice_declaration',5,'p_slice_declaration','syntactic.py',159),
  ('slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content','slice_declaration',7,'p_slice_declaration','syntactic.py',160),
  ('slice_declaration -> VAR ID EQUAL funM','slice_declaration',4,'p_slice_declaration','syntactic.py',161),
  ('slice_declaration -> ID DEQUAL funM','slice_declaration',3,'p_slice_declaration','syntactic.py',162),
  ('slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content','slice_declaration',6,'p_slice_declaration','syntactic.py',163),
  ('funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN','funM',8,'p_slice_declaration','syntactic.py',166),
  ('funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN','funM',10,'p_slice_declaration','syntactic.py',167),
  ('cap -> INTEGER','cap',1,'p_slice_declaration','syntactic.py',169),
  ('cap -> ID','cap',1,'p_slice_declaration','syntactic.py',170),
  ('cap -> expression','cap',1,'p_slice_declaration','syntactic.py',171),
  ('slice_var -> ID LCORCHE index_s RCORCHE','slice_var',4,'p_slice_var','syntactic.py',174),
  ('index_s -> ID','index_s',1,'p_slice_var','syntactic.py',176),
  ('index_s -> INTEGER','index_s',1,'p_slice_var','syntactic.py',177),
  ('index_s -> expression','index_s',1,'p_slice_var','syntactic.py',178),
  ('slice_assignment -> slice_var EQUAL something_s','slice_assignment',3,'p_slice_assignment','syntactic.py',181),
  ('something_s -> ID','something_s',1,'p_slice_assignment','syntactic.py',183),
  ('something_s -> array_var','something_s',1,'p_slice_assignment','syntactic.py',184),
  ('something_s -> values','something_s',1,'p_slice_assignment','syntactic.py',185),
  ('something_s -> operations','something_s',1,'p_slice_assignment','syntactic.py',186),
  ('funciones -> APPEND LPAREN ID COMA values RPAREN','funciones',6,'p_funciones','syntactic.py',192),
  ('funciones -> APPEND LPAREN ID COMA ID RPAREN','funciones',6,'p_funciones','syntactic.py',193),
  ('funciones -> LEN LPAREN ID RPAREN','funciones',4,'p_funciones','syntactic.py',194),
  ('funciones -> COPY LPAREN ID COMA ID RPAREN','funciones',6,'p_funciones','syntactic.py',195),
  ('funciones -> DELETE LPAREN ID COMA ID RPAREN','funciones',6,'p_funciones','syntactic.py',196),
  ('decVarOne -> ID DEQUAL ID','decVarOne',3,'p_decVarOne','syntactic.py',199),
  ('decVarOne -> ID DEQUAL INTEGER','decVarOne',3,'p_decVarOne','syntactic.py',200),
  ('SenIF -> IF LPAREN comparison RPAREN LLLAVE codigo RLLAVE','SenIF',7,'p_if','syntactic.py',207),
  ('SenIF -> IF LPAREN TRUE RPAREN LLLAVE codigo RLLAVE','SenIF',7,'p_if','syntactic.py',208),
  ('SenIF -> IF LPAREN FALSE RPAREN LLLAVE codigo RLLAVE','SenIF',7,'p_if','syntactic.py',209),
  ('SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE','SenStruct',6,'p_struct','syntactic.py',212),
  ('declaration -> variable data_types','declaration',2,'p_struct','syntactic.py',214),
  ('declaration -> declaration variable data_types','declaration',3,'p_struct','syntactic.py',215),
  ('variable -> ID','variable',1,'p_struct','syntactic.py',217),
  ('cStruct -> ID DEQUAL ID LLLAVE asignaciones RLLAVE','cStruct',6,'p_createStruct','syntactic.py',220),
  ('asignaciones -> ID POINTS valor','asignaciones',3,'p_createStruct','syntactic.py',222),
  ('asignaciones -> ID POINTS valor COMA asignaciones','asignaciones',5,'p_createStruct','syntactic.py',223),
  ('valor -> ID','valor',1,'p_createStruct','syntactic.py',225),
  ('valor -> INTEGER','valor',1,'p_createStruct','syntactic.py',226),
  ('valor -> TRUE','valor',1,'p_createStruct','syntactic.py',227),
  ('valor -> FALSE','valor',1,'p_createStruct','syntactic.py',228),
  ('comparison -> value op value','comparison',3,'p_comparison','syntactic.py',233),
  ('value -> ID','value',1,'p_comparison','syntactic.py',234),
  ('value -> expression','value',1,'p_comparison','syntactic.py',235),
  ('op -> GREATER','op',1,'p_comparison','syntactic.py',236),
  ('op -> SMALLER','op',1,'p_comparison','syntactic.py',237),
  ('op -> GREATER_OR_EQUAL','op',1,'p_comparison','syntactic.py',238),
  ('op -> SMALLER_OR_EQUAL','op',1,'p_comparison','syntactic.py',239),
  ('op -> EQUAL_COMPARE','op',1,'p_comparison','syntactic.py',240),
  ('op -> NOT_EQUAL','op',1,'p_comparison','syntactic.py',241),
  ('logic_operation -> logic_value logic_recu','logic_operation',2,'p_logic_operation','syntactic.py',244),
  ('logic_operation -> negation','logic_operation',1,'p_logic_operation','syntactic.py',245),
  ('logic_recu -> logic_op logic_value','logic_recu',2,'p_logic_operation','syntactic.py',247),
  ('logic_recu -> logic_op logic_value logic_recu','logic_recu',3,'p_logic_operation','syntactic.py',248),
  ('logic_value -> negation','logic_value',1,'p_logic_operation','syntactic.py',251),
  ('logic_value -> comparison','logic_value',1,'p_logic_operation','syntactic.py',252),
  ('logic_value -> ID','logic_value',1,'p_logic_operation','syntactic.py',253),
  ('negation -> NOT comparison','negation',2,'p_logic_operation','syntactic.py',255),
  ('negation -> NOT ID','negation',2,'p_logic_operation','syntactic.py',256),
  ('logic_op -> AND','logic_op',1,'p_logic_operation','syntactic.py',258),
  ('logic_op -> OR','logic_op',1,'p_logic_operation','syntactic.py',259),
  ('switch_statement -> SWITCH ID LLLAVE cases RLLAVE','switch_statement',5,'p_switch','syntactic.py',262),
  ('cases -> CASE values POINTS codigo','cases',4,'p_switch','syntactic.py',264),
  ('cases -> CASE values POINTS codigo more','cases',5,'p_switch','syntactic.py',265),
  ('more -> cases','more',1,'p_switch','syntactic.py',267),
  ('more -> DEFAULT POINTS codigo','more',3,'p_switch','syntactic.py',268),
  ('array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types','array_declaration',6,'p_array_declaration','syntactic.py',271),
  ('array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content','array_declaration',8,'p_array_declaration','syntactic.py',272),
  ('capacity -> INTEGER','capacity',1,'p_array_declaration','syntactic.py',274),
  ('capacity -> ID','capacity',1,'p_array_declaration','syntactic.py',275),
  ('capacity -> expression','capacity',1,'p_array_declaration','syntactic.py',276),
  ('array_var -> ID LCORCHE index RCORCHE','array_var',4,'p_array_var','syntactic.py',279),
  ('index -> ID','index',1,'p_array_var','syntactic.py',281),
  ('index -> INTEGER','index',1,'p_array_var','syntactic.py',282),
  ('index -> expression','index',1,'p_array_var','syntactic.py',283),
  ('array_assignment -> array_var EQUAL something','array_assignment',3,'p_array_assignment','syntactic.py',286),
  ('map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types','map_declaration',6,'p_map_declaration','syntactic.py',289),
  ('map_var -> ID LCORCHE key RCORCHE','map_var',4,'p_map_var','syntactic.py',292),
  ('key -> ID','key',1,'p_map_var','syntactic.py',293),
  ('key -> values','key',1,'p_map_var','syntactic.py',294),
  ('key -> operations','key',1,'p_map_var','syntactic.py',295),
  ('map_assignment -> array_var EQUAL something','map_assignment',3,'p_map_assignment','syntactic.py',298),
  ('func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE','func_declaration',11,'p_func_declaration','syntactic.py',301),
  ('func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN return_value RLLAVE','func_declaration',10,'p_func_declaration','syntactic.py',302),
  ('return_value -> retorno COLON','return_value',2,'p_func_declaration','syntactic.py',304),
  ('return_value -> retorno','return_value',1,'p_func_declaration','syntactic.py',305),
  ('retorno -> ID','retorno',1,'p_func_declaration','syntactic.py',307),
  ('retorno -> values','retorno',1,'p_func_declaration','syntactic.py',308),
  ('retorno -> operations','retorno',1,'p_func_declaration','syntactic.py',309),
  ('retorno -> data_structure','retorno',1,'p_func_declaration','syntactic.py',310),
  ('params -> ID data_types','params',2,'p_func_declaration','syntactic.py',312),
  ('params -> more_params','params',1,'p_func_declaration','syntactic.py',313),
  ('more_params -> ID data_types COMA params','more_params',4,'p_func_declaration','syntactic.py',315),
  ('impresion -> PRINT LPAREN content RPAREN','impresion',4,'p_impresion','syntactic.py',321),
  ('content -> values','content',1,'p_impresion','syntactic.py',322),
  ('content -> operations','content',1,'p_impresion','syntactic.py',323),
  ('content -> funciones','content',1,'p_impresion','syntactic.py',324),
  ('content -> data_structure','content',1,'p_impresion','syntactic.py',325),
  ('content -> ID','content',1,'p_impresion','syntactic.py',326),
  ('expression -> something_ex','expression',1,'p_expression','syntactic.py',331),
  ('expression -> something_ex adicionaEx','expression',2,'p_expression','syntactic.py',332),
  ('adicionaEx -> op something_ex','adicionaEx',2,'p_expression','syntactic.py',334),
  ('adicionaEx -> op something_ex adicionaEx','adicionaEx',3,'p_expression','syntactic.py',335),
  ('something_ex -> ID','something_ex',1,'p_expression','syntactic.py',337),
  ('something_ex -> INTEGER','something_ex',1,'p_expression','syntactic.py',338),
  ('something_ex -> FLOAT','something_ex',1,'p_expression','syntactic.py',339),
  ('something_ex -> data_structure','something_ex',1,'p_expression','syntactic.py',340),
  ('something_ex -> funciones','something_ex',1,'p_expression','syntactic.py',341),
  ('op -> PLUS','op',1,'p_expression','syntactic.py',343),
  ('op -> TIMES','op',1,'p_expression','syntactic.py',344),
  ('op -> DIVIDE','op',1,'p_expression','syntactic.py',345),
  ('op -> MINUS','op',1,'p_expression','syntactic.py',346),
]
