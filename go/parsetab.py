
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND APPEND ARRAY BOOL BYTE CAP CASE COLON COMA COMMENT CONST COPY DECREASE DEQUAL DIVIDE ELSE EQUAL EQUAL_COMPARE FALSE FLOAT FLOAT32 FLOAT64 FOR FUNC GREATER GREATER_OR_EQUAL ID IF INCREASE INT32 INT64 INTEGER INTERFACE JOIN LCORCHE LEN LLLAVE LPAREN MAIN MAKE MAP MINUS MOD MULTI_COMMENT NOT NOT_EQUAL OR PACKAGE PLUS POINTER PRINT RCORCHE RLLAVE RPAREN SCAN SMALLER SMALLER_OR_EQUAL STRING STRUCT SWITCH TIMES TRUE TYPE VARcodigo : impresion\n              | expression\n              | cicloFor cicloFor : FOR LLLAVE codigo RLLAVEimpresion : PRINT LPAREN expression RPARENexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : termterm : factorfactor : INTEGERfactor : IDfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'PRINT':([0,18,],[5,5,]),'FOR':([0,18,],[8,8,]),'INTEGER':([0,6,12,13,14,15,16,18,],[10,10,10,10,10,10,10,10,]),'ID':([0,6,12,13,14,15,16,18,],[11,11,11,11,11,11,11,11,]),'LPAREN':([0,5,6,12,13,14,15,16,18,],[6,16,6,6,6,6,6,6,6,]),'$end':([1,2,3,4,7,9,10,11,19,20,21,22,24,26,27,],[0,-1,-2,-3,-10,-11,-12,-13,-6,-7,-8,-9,-14,-5,-4,]),'RLLAVE':([2,3,4,7,9,10,11,19,20,21,22,24,25,26,27,],[-1,-2,-3,-10,-11,-12,-13,-6,-7,-8,-9,-14,27,-5,-4,]),'PLUS':([3,7,9,10,11,17,19,20,21,22,23,24,],[12,-10,-11,-12,-13,12,12,12,12,12,12,-14,]),'MINUS':([3,7,9,10,11,17,19,20,21,22,23,24,],[13,-10,-11,-12,-13,13,13,13,13,13,13,-14,]),'TIMES':([3,7,9,10,11,17,19,20,21,22,23,24,],[14,-10,-11,-12,-13,14,14,14,14,14,14,-14,]),'DIVIDE':([3,7,9,10,11,17,19,20,21,22,23,24,],[15,-10,-11,-12,-13,15,15,15,15,15,15,-14,]),'RPAREN':([7,9,10,11,17,19,20,21,22,23,24,],[-10,-11,-12,-13,24,-6,-7,-8,-9,26,-14,]),'LLLAVE':([8,],[18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigo':([0,18,],[1,25,]),'impresion':([0,18,],[2,2,]),'expression':([0,6,12,13,14,15,16,18,],[3,17,19,20,21,22,23,3,]),'cicloFor':([0,18,],[4,4,]),'term':([0,6,12,13,14,15,16,18,],[7,7,7,7,7,7,7,7,]),'factor':([0,6,12,13,14,15,16,18,],[9,9,9,9,9,9,9,9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigo","S'",1,None,None,None),
  ('codigo -> impresion','codigo',1,'p_coddigo','syntactic.py',16),
  ('codigo -> expression','codigo',1,'p_coddigo','syntactic.py',17),
  ('codigo -> cicloFor','codigo',1,'p_coddigo','syntactic.py',18),
  ('cicloFor -> FOR LLLAVE codigo RLLAVE','cicloFor',4,'p_for','syntactic.py',23),
  ('impresion -> PRINT LPAREN expression RPAREN','impresion',4,'p_impresion','syntactic.py',27),
  ('expression -> expression PLUS expression','expression',3,'p_operaciones','syntactic.py',30),
  ('expression -> expression MINUS expression','expression',3,'p_operaciones','syntactic.py',31),
  ('expression -> expression TIMES expression','expression',3,'p_operaciones','syntactic.py',32),
  ('expression -> expression DIVIDE expression','expression',3,'p_operaciones','syntactic.py',33),
  ('expression -> term','expression',1,'p_expression_term','syntactic.py',44),
  ('term -> factor','term',1,'p_term_factor','syntactic.py',56),
  ('factor -> INTEGER','factor',1,'p_factor_num','syntactic.py',60),
  ('factor -> ID','factor',1,'p_factor_id','syntactic.py',63),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','syntactic.py',66),
]
