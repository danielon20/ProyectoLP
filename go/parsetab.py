
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND APPEND ARRAY BOOL BYTE CAP CASE COLON COMA COMMENT CONST COPY DECREASE DEQUAL DIVIDE ELSE EQUAL EQUAL_COMPARE FALSE FLOAT FLOAT32 FLOAT64 FOR FUNC GREATER GREATER_OR_EQUAL ID IF INCREASE INT32 INT64 INTEGER INTERFACE JOIN LCORCHE LEN LLLAVE LPAREN MAIN MAKE MAP MINUS MOD MULTI_COMMENT NOT NOT_EQUAL OR PACKAGE PLUS POINTER PRINT RCORCHE RLLAVE RPAREN SCAN SMALLER SMALLER_OR_EQUAL STRING STRUCT SWITCH TIMES TRUE TYPE VAR WFLOAT WINT WSTRINGcodigo : impresion COLON\n              | impresion\n              | expression COLON\n              | expression\n              | cicloFor\n              | comparison\n              | logic_operation\n              | decVar COLON\n              | decVar\n              | funciones\n              | agrupaciones\n              | SenIF\n              | SenStructcicloFor : FOR LLLAVE codigo RLLAVE\n                | FOR comparison LLLAVE codigo RLLAVE\n                | FOR logic_operation LLLAVE codigo RLLAVE\n                | FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE\n       incre    : ID INCREASE\n                | ID DECREASEdecVar : decVarOne\n              | VAR ID EQUAL INTEGER\n              | VAR ID EQUAL ID\n              | VAR ID EQUAL FLOAT\n              | VAR ID EQUAL expression\n              | VAR ID EQUAL logic_operation\n              | VAR ID EQUAL comparison\n              | sliceC\n              | VAR ID EQUAL STRING\n              | ID DEQUAL STRING\n              | ID DEQUAL FLOAT\n              | ID DEQUAL expression\n              | ID DEQUAL logic_operation\n              | ID DEQUAL comparisonsliceC : VAR ID LCORCHE RCORCHE type\n              | ID DEQUAL funM\n              | ID DEQUAL LCORCHE RCORCHE type agrupaciones\n       funM : MAKE LPAREN LCORCHE RCORCHE type COMA INTEGER RPAREN\n            | MAKE LPAREN LCORCHE RCORCHE type COMA INTEGER COMA INTEGER RPAREN\n       type : INT32\n            | INT64\n            | FLOAT32\n            | FLOAT64\n            | BYTE\n            | WINT\n            | WFLOAT\n            | WSTRINGagrupaciones : LLLAVE INTEGER RLLAVE\n                    | LLLAVE INTEGER enteros RLLAVE\n                    | LLLAVE FLOAT RLLAVE\n                    | LLLAVE FLOAT flotantes RLLAVE\n                    | LLLAVE STRING RLLAVE\n                    | LLLAVE STRING palabras RLLAVE\n       enteros   : COMA INTEGER\n                 | COMA INTEGER enteros\n       flotantes : COMA FLOAT\n                 | COMA FLOAT flotantes\n       palabras  : COMA STRING\n                 | COMA STRING palabrasfunciones : APPEND LPAREN ID COMA INTEGER RPAREN\n                 | APPEND LPAREN ID COMA FLOAT RPAREN\n                 | APPEND LPAREN ID COMA STRING RPAREN\n                 | APPEND LPAREN ID COMA ID RPAREN\n                 | LEN LPAREN ID RPAREN\n                 | COPY LPAREN ID COMA ID RPARENdecVarOne : ID DEQUAL ID\n                 | ID DEQUAL INTEGERSenIF : IF LPAREN comparison RPAREN LLLAVE codigo RLLAVESenStruct : TYPE ID STRUCT LLLAVE declaration RLLAVE\n    \n       declaration : tipo variable\n        \n       tipo        : INT32\n                   | INT64\n                   | FLOAT32\n                   | FLOAT64\n                   | WSTRING\n                   | BOOL\n       \n       variable    : IDcomparison : value op value\n       value      : ID\n                  | expression\n       op         : GREATER\n                  | SMALLER\n                  | GREATER_OR_EQUAL\n                  | SMALLER_OR_EQUAL\n                  | EQUAL_COMPARE\n                  | NOT_EQUALlogic_operation : logic_value logic_op logic_value\n                       | negation\n\n       logic_value     : negation\n                       | comparison\n                       | ID\n\n       negation        : NOT comparison\n                       | NOT ID\n                       \n       logic_op        : AND\n                       | ORimpresion : PRINT LPAREN expression RPARENexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorfactor : INTEGERfactor : IDfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'PRINT':([0,42,77,78,163,185,],[12,12,12,12,12,12,]),'FOR':([0,42,77,78,163,185,],[15,15,15,15,15,15,]),'VAR':([0,42,77,78,163,185,],[21,21,21,21,21,21,]),'ID':([0,13,15,21,29,31,34,35,37,40,41,42,51,52,53,54,55,56,57,58,59,60,62,63,64,65,66,77,78,79,80,96,136,138,143,163,165,166,167,168,169,170,171,185,],[22,39,46,61,67,69,39,39,39,39,39,22,91,-80,-81,-82,-83,-84,-85,95,-93,-94,98,108,109,110,91,22,22,91,118,126,158,162,173,22,184,-70,-71,-72,-73,-74,-75,22,]),'APPEND':([0,42,77,78,163,185,],[25,25,25,25,25,25,]),'LEN':([0,42,77,78,163,185,],[26,26,26,26,26,26,]),'COPY':([0,42,77,78,163,185,],[27,27,27,27,27,27,]),'LLLAVE':([0,14,15,20,23,30,39,42,43,44,47,68,69,70,71,73,74,75,77,78,90,91,92,93,94,95,112,139,148,149,150,151,152,153,154,155,156,163,172,185,186,187,],[16,-98,42,-87,-102,-101,-103,16,77,78,-79,-91,-92,-96,-97,-104,-99,-100,16,16,-77,-78,-86,-88,-89,-90,140,163,-39,-40,-41,-42,-43,-44,-45,-46,16,16,185,16,-18,-19,]),'IF':([0,42,77,78,163,185,],[28,28,28,28,28,28,]),'TYPE':([0,42,77,78,163,185,],[29,29,29,29,29,29,]),'NOT':([0,15,42,58,59,60,62,77,78,96,163,185,],[31,31,31,31,-93,-94,31,31,31,31,31,31,]),'INTEGER':([0,13,15,16,31,34,35,37,40,41,42,51,52,53,54,55,56,57,58,59,60,62,66,77,78,79,80,83,96,136,163,185,191,194,],[23,23,23,48,23,23,23,23,23,23,23,23,-80,-81,-82,-83,-84,-85,23,-93,-94,104,23,23,23,23,119,121,127,159,23,23,193,196,]),'LPAREN':([0,12,13,15,25,26,27,28,31,34,35,37,40,41,42,51,52,53,54,55,56,57,58,59,60,62,66,77,78,79,96,107,163,185,],[13,37,13,13,63,64,65,66,13,13,13,13,13,13,13,13,-80,-81,-82,-83,-84,-85,13,-93,-94,13,13,13,13,13,13,135,13,13,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,14,17,20,22,23,24,30,32,33,36,39,47,68,69,70,71,73,74,75,81,84,87,90,91,92,93,94,95,98,99,100,101,102,103,104,105,113,114,120,122,124,126,127,128,129,130,131,132,137,141,142,147,148,149,150,151,152,153,154,155,174,176,177,178,179,180,182,189,192,195,197,],[0,-2,-4,-5,-6,-7,-9,-10,-11,-12,-13,-98,-20,-87,-103,-102,-27,-101,-1,-3,-8,-103,-79,-91,-92,-96,-97,-104,-99,-100,-47,-49,-51,-77,-78,-86,-88,-89,-90,-65,-29,-30,-31,-32,-33,-66,-35,-95,-14,-48,-50,-52,-22,-21,-23,-24,-25,-26,-28,-63,-15,-16,-34,-39,-40,-41,-42,-43,-44,-45,-46,-36,-62,-59,-60,-61,-64,-68,-67,-17,-37,-38,]),'COLON':([2,3,7,14,17,20,22,23,24,30,39,45,47,68,69,70,71,73,74,75,81,84,87,90,91,92,93,94,95,98,99,100,101,102,103,104,105,113,117,118,119,120,122,124,126,127,128,129,130,131,132,147,148,149,150,151,152,153,154,155,174,195,197,],[32,33,36,-98,-20,-87,-103,-102,-27,-101,-103,79,-79,-91,-92,-96,-97,-104,-99,-100,-47,-49,-51,-77,-78,-86,-88,-89,-90,-65,-29,-30,-31,-32,-33,-66,-35,-95,143,-65,-66,-48,-50,-52,-22,-21,-23,-24,-25,-26,-28,-34,-39,-40,-41,-42,-43,-44,-45,-46,-36,-37,-38,]),'RLLAVE':([2,3,4,5,6,7,8,9,10,11,14,17,20,22,23,24,30,32,33,36,39,47,48,49,50,68,69,70,71,73,74,75,76,81,82,84,85,87,88,90,91,92,93,94,95,98,99,100,101,102,103,104,105,113,114,115,116,120,121,122,123,124,125,126,127,128,129,130,131,132,137,141,142,144,145,146,147,148,149,150,151,152,153,154,155,164,174,176,177,178,179,180,181,182,183,184,189,190,192,195,197,],[-2,-4,-5,-6,-7,-9,-10,-11,-12,-13,-98,-20,-87,-103,-102,-27,-101,-1,-3,-8,-103,-79,81,84,87,-91,-92,-96,-97,-104,-99,-100,114,-47,120,-49,122,-51,124,-77,-78,-86,-88,-89,-90,-65,-29,-30,-31,-32,-33,-66,-35,-95,-14,141,142,-48,-53,-50,-55,-52,-57,-22,-21,-23,-24,-25,-26,-28,-63,-15,-16,-54,-56,-58,-34,-39,-40,-41,-42,-43,-44,-45,-46,182,-36,-62,-59,-60,-61,-64,189,-68,-69,-76,-67,192,-17,-37,-38,]),'PLUS':([3,14,22,23,30,38,39,46,47,69,70,71,72,73,74,75,91,95,98,101,104,126,127,129,],[34,-98,-103,-102,-101,34,-103,-103,34,-103,-96,-97,34,-104,-99,-100,-103,-103,-103,34,-102,-103,-102,34,]),'MINUS':([3,14,22,23,30,38,39,46,47,69,70,71,72,73,74,75,91,95,98,101,104,126,127,129,],[35,-98,-103,-102,-101,35,-103,-103,35,-103,-96,-97,35,-104,-99,-100,-103,-103,-103,35,-102,-103,-102,35,]),'GREATER':([3,14,18,22,23,30,39,46,47,69,70,71,73,74,75,91,95,98,101,104,126,127,129,],[-79,-98,52,-78,-102,-101,-103,-78,-79,-78,-96,-97,-104,-99,-100,-78,-78,-78,-79,-102,-78,-102,-79,]),'SMALLER':([3,14,18,22,23,30,39,46,47,69,70,71,73,74,75,91,95,98,101,104,126,127,129,],[-79,-98,53,-78,-102,-101,-103,-78,-79,-78,-96,-97,-104,-99,-100,-78,-78,-78,-79,-102,-78,-102,-79,]),'GREATER_OR_EQUAL':([3,14,18,22,23,30,39,46,47,69,70,71,73,74,75,91,95,98,101,104,126,127,129,],[-79,-98,54,-78,-102,-101,-103,-78,-79,-78,-96,-97,-104,-99,-100,-78,-78,-78,-79,-102,-78,-102,-79,]),'SMALLER_OR_EQUAL':([3,14,18,22,23,30,39,46,47,69,70,71,73,74,75,91,95,98,101,104,126,127,129,],[-79,-98,55,-78,-102,-101,-103,-78,-79,-78,-96,-97,-104,-99,-100,-78,-78,-78,-79,-102,-78,-102,-79,]),'EQUAL_COMPARE':([3,14,18,22,23,30,39,46,47,69,70,71,73,74,75,91,95,98,101,104,126,127,129,],[-79,-98,56,-78,-102,-101,-103,-78,-79,-78,-96,-97,-104,-99,-100,-78,-78,-78,-79,-102,-78,-102,-79,]),'NOT_EQUAL':([3,14,18,22,23,30,39,46,47,69,70,71,73,74,75,91,95,98,101,104,126,127,129,],[-79,-98,57,-78,-102,-101,-103,-78,-79,-78,-96,-97,-104,-99,-100,-78,-78,-78,-79,-102,-78,-102,-79,]),'AND':([5,14,19,20,22,23,30,39,43,46,47,68,69,70,71,73,74,75,90,91,98,103,126,131,],[-89,-98,59,-88,-90,-102,-101,-103,-89,-90,-79,-91,-92,-96,-97,-104,-99,-100,-77,-78,-90,-89,-90,-89,]),'OR':([5,14,19,20,22,23,30,39,43,46,47,68,69,70,71,73,74,75,90,91,98,103,126,131,],[-89,-98,60,-88,-90,-102,-101,-103,-89,-90,-79,-91,-92,-96,-97,-104,-99,-100,-77,-78,-90,-89,-90,-89,]),'RPAREN':([14,23,30,38,39,47,70,71,72,73,74,75,90,91,109,111,158,159,160,161,162,193,196,],[-98,-102,-101,73,-103,-79,-96,-97,113,-104,-99,-100,-77,-78,137,139,176,177,178,179,180,195,197,]),'TIMES':([14,22,23,30,39,46,69,70,71,73,74,75,91,95,98,104,126,127,],[40,-103,-102,-101,-103,-103,-103,40,40,-104,-99,-100,-103,-103,-103,-102,-103,-102,]),'DIVIDE':([14,22,23,30,39,46,69,70,71,73,74,75,91,95,98,104,126,127,],[41,-103,-102,-101,-103,-103,-103,41,41,-104,-99,-100,-103,-103,-103,-102,-103,-102,]),'FLOAT':([16,62,86,96,136,],[49,100,123,128,160,]),'STRING':([16,62,89,96,136,],[50,99,125,132,161,]),'DEQUAL':([22,46,],[62,80,]),'COMA':([48,49,50,108,110,121,123,125,148,149,150,151,152,153,154,155,188,193,],[83,86,89,136,138,83,86,89,-39,-40,-41,-42,-43,-44,-45,-46,191,194,]),'EQUAL':([61,],[96,]),'LCORCHE':([61,62,135,],[97,106,157,]),'MAKE':([62,],[107,]),'STRUCT':([67,],[112,]),'RCORCHE':([97,106,157,],[133,134,175,]),'INT32':([133,134,140,175,],[148,148,166,148,]),'INT64':([133,134,140,175,],[149,149,167,149,]),'FLOAT32':([133,134,140,175,],[150,150,168,150,]),'FLOAT64':([133,134,140,175,],[151,151,169,151,]),'BYTE':([133,134,175,],[152,152,152,]),'WINT':([133,134,175,],[153,153,153,]),'WFLOAT':([133,134,175,],[154,154,154,]),'WSTRING':([133,134,140,175,],[155,155,170,155,]),'BOOL':([140,],[171,]),'INCREASE':([173,],[186,]),'DECREASE':([173,],[187,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigo':([0,42,77,78,163,185,],[1,76,115,116,181,190,]),'impresion':([0,42,77,78,163,185,],[2,2,2,2,2,2,]),'expression':([0,13,15,31,37,42,51,58,62,66,77,78,79,96,163,185,],[3,38,47,47,72,3,47,47,101,47,3,3,47,129,3,3,]),'cicloFor':([0,42,77,78,163,185,],[4,4,4,4,4,4,]),'comparison':([0,15,31,42,58,62,66,77,78,79,96,163,185,],[5,43,68,5,94,103,111,5,5,117,131,5,5,]),'logic_operation':([0,15,42,62,77,78,96,163,185,],[6,44,6,102,6,6,130,6,6,]),'decVar':([0,42,77,78,163,185,],[7,7,7,7,7,7,]),'funciones':([0,42,77,78,163,185,],[8,8,8,8,8,8,]),'agrupaciones':([0,42,77,78,156,163,185,],[9,9,9,9,174,9,9,]),'SenIF':([0,42,77,78,163,185,],[10,10,10,10,10,10,]),'SenStruct':([0,42,77,78,163,185,],[11,11,11,11,11,11,]),'term':([0,13,15,31,34,35,37,42,51,58,62,66,77,78,79,96,163,185,],[14,14,14,14,70,71,14,14,14,14,14,14,14,14,14,14,14,14,]),'decVarOne':([0,15,42,77,78,163,185,],[17,45,17,17,17,17,17,]),'value':([0,15,31,42,51,58,62,66,77,78,79,96,163,185,],[18,18,18,18,90,18,18,18,18,18,18,18,18,18,]),'logic_value':([0,15,42,58,62,77,78,96,163,185,],[19,19,19,92,19,19,19,19,19,19,]),'negation':([0,15,42,58,62,77,78,96,163,185,],[20,20,20,93,20,20,20,20,20,20,]),'sliceC':([0,42,77,78,163,185,],[24,24,24,24,24,24,]),'factor':([0,13,15,31,34,35,37,40,41,42,51,58,62,66,77,78,79,96,163,185,],[30,30,30,30,30,30,30,74,75,30,30,30,30,30,30,30,30,30,30,30,]),'op':([18,],[51,]),'logic_op':([19,],[58,]),'enteros':([48,121,],[82,144,]),'flotantes':([49,123,],[85,145,]),'palabras':([50,125,],[88,146,]),'funM':([62,],[105,]),'type':([133,134,175,],[147,156,188,]),'declaration':([140,],[164,]),'tipo':([140,],[165,]),'incre':([143,],[172,]),'variable':([165,],[183,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigo","S'",1,None,None,None),
  ('codigo -> impresion COLON','codigo',2,'p_coddigo','syntactic.py',17),
  ('codigo -> impresion','codigo',1,'p_coddigo','syntactic.py',18),
  ('codigo -> expression COLON','codigo',2,'p_coddigo','syntactic.py',19),
  ('codigo -> expression','codigo',1,'p_coddigo','syntactic.py',20),
  ('codigo -> cicloFor','codigo',1,'p_coddigo','syntactic.py',21),
  ('codigo -> comparison','codigo',1,'p_coddigo','syntactic.py',22),
  ('codigo -> logic_operation','codigo',1,'p_coddigo','syntactic.py',23),
  ('codigo -> decVar COLON','codigo',2,'p_coddigo','syntactic.py',24),
  ('codigo -> decVar','codigo',1,'p_coddigo','syntactic.py',25),
  ('codigo -> funciones','codigo',1,'p_coddigo','syntactic.py',26),
  ('codigo -> agrupaciones','codigo',1,'p_coddigo','syntactic.py',27),
  ('codigo -> SenIF','codigo',1,'p_coddigo','syntactic.py',28),
  ('codigo -> SenStruct','codigo',1,'p_coddigo','syntactic.py',29),
  ('cicloFor -> FOR LLLAVE codigo RLLAVE','cicloFor',4,'p_for','syntactic.py',34),
  ('cicloFor -> FOR comparison LLLAVE codigo RLLAVE','cicloFor',5,'p_for','syntactic.py',35),
  ('cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE','cicloFor',5,'p_for','syntactic.py',36),
  ('cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE','cicloFor',9,'p_for','syntactic.py',37),
  ('incre -> ID INCREASE','incre',2,'p_for','syntactic.py',38),
  ('incre -> ID DECREASE','incre',2,'p_for','syntactic.py',39),
  ('decVar -> decVarOne','decVar',1,'p_decVar','syntactic.py',44),
  ('decVar -> VAR ID EQUAL INTEGER','decVar',4,'p_decVar','syntactic.py',45),
  ('decVar -> VAR ID EQUAL ID','decVar',4,'p_decVar','syntactic.py',46),
  ('decVar -> VAR ID EQUAL FLOAT','decVar',4,'p_decVar','syntactic.py',47),
  ('decVar -> VAR ID EQUAL expression','decVar',4,'p_decVar','syntactic.py',48),
  ('decVar -> VAR ID EQUAL logic_operation','decVar',4,'p_decVar','syntactic.py',49),
  ('decVar -> VAR ID EQUAL comparison','decVar',4,'p_decVar','syntactic.py',50),
  ('decVar -> sliceC','decVar',1,'p_decVar','syntactic.py',51),
  ('decVar -> VAR ID EQUAL STRING','decVar',4,'p_decVar','syntactic.py',52),
  ('decVar -> ID DEQUAL STRING','decVar',3,'p_decVar','syntactic.py',53),
  ('decVar -> ID DEQUAL FLOAT','decVar',3,'p_decVar','syntactic.py',54),
  ('decVar -> ID DEQUAL expression','decVar',3,'p_decVar','syntactic.py',55),
  ('decVar -> ID DEQUAL logic_operation','decVar',3,'p_decVar','syntactic.py',56),
  ('decVar -> ID DEQUAL comparison','decVar',3,'p_decVar','syntactic.py',57),
  ('sliceC -> VAR ID LCORCHE RCORCHE type','sliceC',5,'p_sliceC','syntactic.py',63),
  ('sliceC -> ID DEQUAL funM','sliceC',3,'p_sliceC','syntactic.py',64),
  ('sliceC -> ID DEQUAL LCORCHE RCORCHE type agrupaciones','sliceC',6,'p_sliceC','syntactic.py',65),
  ('funM -> MAKE LPAREN LCORCHE RCORCHE type COMA INTEGER RPAREN','funM',8,'p_sliceC','syntactic.py',66),
  ('funM -> MAKE LPAREN LCORCHE RCORCHE type COMA INTEGER COMA INTEGER RPAREN','funM',10,'p_sliceC','syntactic.py',67),
  ('type -> INT32','type',1,'p_sliceC','syntactic.py',68),
  ('type -> INT64','type',1,'p_sliceC','syntactic.py',69),
  ('type -> FLOAT32','type',1,'p_sliceC','syntactic.py',70),
  ('type -> FLOAT64','type',1,'p_sliceC','syntactic.py',71),
  ('type -> BYTE','type',1,'p_sliceC','syntactic.py',72),
  ('type -> WINT','type',1,'p_sliceC','syntactic.py',73),
  ('type -> WFLOAT','type',1,'p_sliceC','syntactic.py',74),
  ('type -> WSTRING','type',1,'p_sliceC','syntactic.py',75),
  ('agrupaciones -> LLLAVE INTEGER RLLAVE','agrupaciones',3,'p_agrupaciones','syntactic.py',82),
  ('agrupaciones -> LLLAVE INTEGER enteros RLLAVE','agrupaciones',4,'p_agrupaciones','syntactic.py',83),
  ('agrupaciones -> LLLAVE FLOAT RLLAVE','agrupaciones',3,'p_agrupaciones','syntactic.py',84),
  ('agrupaciones -> LLLAVE FLOAT flotantes RLLAVE','agrupaciones',4,'p_agrupaciones','syntactic.py',85),
  ('agrupaciones -> LLLAVE STRING RLLAVE','agrupaciones',3,'p_agrupaciones','syntactic.py',86),
  ('agrupaciones -> LLLAVE STRING palabras RLLAVE','agrupaciones',4,'p_agrupaciones','syntactic.py',87),
  ('enteros -> COMA INTEGER','enteros',2,'p_agrupaciones','syntactic.py',88),
  ('enteros -> COMA INTEGER enteros','enteros',3,'p_agrupaciones','syntactic.py',89),
  ('flotantes -> COMA FLOAT','flotantes',2,'p_agrupaciones','syntactic.py',90),
  ('flotantes -> COMA FLOAT flotantes','flotantes',3,'p_agrupaciones','syntactic.py',91),
  ('palabras -> COMA STRING','palabras',2,'p_agrupaciones','syntactic.py',92),
  ('palabras -> COMA STRING palabras','palabras',3,'p_agrupaciones','syntactic.py',93),
  ('funciones -> APPEND LPAREN ID COMA INTEGER RPAREN','funciones',6,'p_funciones','syntactic.py',99),
  ('funciones -> APPEND LPAREN ID COMA FLOAT RPAREN','funciones',6,'p_funciones','syntactic.py',100),
  ('funciones -> APPEND LPAREN ID COMA STRING RPAREN','funciones',6,'p_funciones','syntactic.py',101),
  ('funciones -> APPEND LPAREN ID COMA ID RPAREN','funciones',6,'p_funciones','syntactic.py',102),
  ('funciones -> LEN LPAREN ID RPAREN','funciones',4,'p_funciones','syntactic.py',103),
  ('funciones -> COPY LPAREN ID COMA ID RPAREN','funciones',6,'p_funciones','syntactic.py',104),
  ('decVarOne -> ID DEQUAL ID','decVarOne',3,'p_decVarOne','syntactic.py',107),
  ('decVarOne -> ID DEQUAL INTEGER','decVarOne',3,'p_decVarOne','syntactic.py',108),
  ('SenIF -> IF LPAREN comparison RPAREN LLLAVE codigo RLLAVE','SenIF',7,'p_if','syntactic.py',115),
  ('SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE','SenStruct',6,'p_struct','syntactic.py',118),
  ('declaration -> tipo variable','declaration',2,'p_struct','syntactic.py',120),
  ('tipo -> INT32','tipo',1,'p_struct','syntactic.py',122),
  ('tipo -> INT64','tipo',1,'p_struct','syntactic.py',123),
  ('tipo -> FLOAT32','tipo',1,'p_struct','syntactic.py',124),
  ('tipo -> FLOAT64','tipo',1,'p_struct','syntactic.py',125),
  ('tipo -> WSTRING','tipo',1,'p_struct','syntactic.py',126),
  ('tipo -> BOOL','tipo',1,'p_struct','syntactic.py',127),
  ('variable -> ID','variable',1,'p_struct','syntactic.py',129),
  ('comparison -> value op value','comparison',3,'p_comparison','syntactic.py',134),
  ('value -> ID','value',1,'p_comparison','syntactic.py',135),
  ('value -> expression','value',1,'p_comparison','syntactic.py',136),
  ('op -> GREATER','op',1,'p_comparison','syntactic.py',137),
  ('op -> SMALLER','op',1,'p_comparison','syntactic.py',138),
  ('op -> GREATER_OR_EQUAL','op',1,'p_comparison','syntactic.py',139),
  ('op -> SMALLER_OR_EQUAL','op',1,'p_comparison','syntactic.py',140),
  ('op -> EQUAL_COMPARE','op',1,'p_comparison','syntactic.py',141),
  ('op -> NOT_EQUAL','op',1,'p_comparison','syntactic.py',142),
  ('logic_operation -> logic_value logic_op logic_value','logic_operation',3,'p_logic_operation','syntactic.py',145),
  ('logic_operation -> negation','logic_operation',1,'p_logic_operation','syntactic.py',146),
  ('logic_value -> negation','logic_value',1,'p_logic_operation','syntactic.py',148),
  ('logic_value -> comparison','logic_value',1,'p_logic_operation','syntactic.py',149),
  ('logic_value -> ID','logic_value',1,'p_logic_operation','syntactic.py',150),
  ('negation -> NOT comparison','negation',2,'p_logic_operation','syntactic.py',152),
  ('negation -> NOT ID','negation',2,'p_logic_operation','syntactic.py',153),
  ('logic_op -> AND','logic_op',1,'p_logic_operation','syntactic.py',155),
  ('logic_op -> OR','logic_op',1,'p_logic_operation','syntactic.py',156),
  ('impresion -> PRINT LPAREN expression RPAREN','impresion',4,'p_impresion','syntactic.py',160),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','syntactic.py',165),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','syntactic.py',169),
  ('expression -> term','expression',1,'p_expression_term','syntactic.py',173),
  ('term -> term TIMES factor','term',3,'p_term_times','syntactic.py',177),
  ('term -> term DIVIDE factor','term',3,'p_term_div','syntactic.py',181),
  ('term -> factor','term',1,'p_term_factor','syntactic.py',185),
  ('factor -> INTEGER','factor',1,'p_factor_num','syntactic.py',189),
  ('factor -> ID','factor',1,'p_factor_id','syntactic.py',192),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','syntactic.py',195),
]
