
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND APPEND ARRAY BOOL BYTE CAP CASE COLON COMA COMMENT CONST COPY DECREASE DEFAULT DELETE DEQUAL DIVIDE ELSE EQUAL EQUAL_COMPARE FALSE FLOAT FLOAT32 FLOAT64 FOR FUNC GREATER GREATER_OR_EQUAL ID IF INCREASE INT32 INT64 INTEGER INTERFACE JOIN LCORCHE LEN LLLAVE LPAREN MAIN MAKE MAP MINUS MOD MULTI_COMMENT NOT NOT_EQUAL OR PACKAGE PLUS POINTER POINTS PRINT RCORCHE RETURN RLLAVE RPAREN SCAN SMALLER SMALLER_OR_EQUAL STRING STRUCT SWITCH TIMES TRUE TYPE VAR WFLOAT WINT WSTRINGcodigo : impresion COLON\n              | impresion\n\n              | expression COLON\n              | expression\n\n              | cicloFor\n\n              | comparison\n\n              | logic_operation\n\n              | decVar COLON\n              | decVar\n\n              | funciones\n              | funciones COLON\n\n              | SenIF\n\n              | SenStruct\n\n              | switch_statement\n\n              | array_declaration COLON\n              | array_declaration\n              | array_var COLON\n              | array_var\n              | array_assignment COLON\n              | array_assignment\n\n              | slice_declaration COLON\n              | slice_declaration\n              | slice_var COLON\n              | slice_var\n              | slice_assignment COLON\n              | slice_assignment\n              \n              | map_declaration COLON\n              | map_declaration\n              | map_assignment COLON\n              | map_assignment\n              \n              | func_declarationvalues : STRING\n              | INTEGER\n              | FLOAT\n              | TRUE\n              | FALSEdata_types : INT32\n            | INT64\n            | FLOAT32\n            | FLOAT64\n            | BYTE\n            | WINT\n            | WFLOAT\n            | WSTRING\n            | BOOLoperations : expression \n                  | comparison \n                  | logic_operationdata_structure : array_var\n                      | map_vararr_content :  LLLAVE items COMA more_items RLLAVE\n                | LLLAVE items RLLAVE\n                \n        more_items : items COMA more_items\n                   | items\n                   \n             items : values\n                   | operationssomething : ID \n                 | data_structure\n                 | values\n                 | operationscicloFor : FOR LLLAVE codigo RLLAVE\n                | FOR comparison LLLAVE codigo RLLAVE\n                | FOR logic_operation LLLAVE codigo RLLAVE\n                | FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE\n       incre    : ID INCREASE\n                | ID DECREASEdecVar : decVarOne\n              | VAR ID EQUAL INTEGER\n              | VAR ID EQUAL ID\n              | VAR ID EQUAL FLOAT\n              | VAR ID EQUAL expression\n              | VAR ID EQUAL logic_operation\n              | VAR ID EQUAL comparison\n              | VAR ID EQUAL STRING\n              | ID DEQUAL STRING\n              | ID DEQUAL FLOAT\n              | ID DEQUAL expression\n              | ID DEQUAL logic_operation\n              | ID DEQUAL comparisonslice_declaration : VAR ID LCORCHE RCORCHE data_types\n                         | VAR ID EQUAL LCORCHE RCORCHE data_types arr_content\n                         | VAR ID EQUAL funM\n                         | ID DEQUAL funM\n                         | ID DEQUAL LCORCHE RCORCHE data_types arr_content\n\n\n                    funM : MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN\n                         | MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN\n                         \n                     cap : INTEGER\n                         | ID\n                         | expressionslice_var : ID LCORCHE index_s RCORCHE\n         \n         index_s : ID\n                 | INTEGER\n                 | expressionslice_assignment : slice_var EQUAL something_s\n    \n              something_s : ID \n                        | array_var\n                        | values\n                        | operationsfunciones : APPEND LPAREN ID COMA values RPAREN\n                 | APPEND LPAREN ID COMA ID RPAREN\n                 | LEN LPAREN ID RPAREN\n                 | COPY LPAREN ID COMA ID RPAREN\n                 | DELETE LPAREN ID COMA ID RPARENdecVarOne : ID DEQUAL ID\n                 | ID DEQUAL INTEGERSenIF : IF LPAREN comparison RPAREN LLLAVE codigo RLLAVE\n             | IF LPAREN TRUE RPAREN LLLAVE codigo RLLAVE\n             | IF LPAREN FALSE RPAREN LLLAVE codigo RLLAVESenStruct : TYPE ID STRUCT LLLAVE declaration RLLAVE\n    \n       declaration : variable data_types\n                   | declaration variable data_types\n       \n       variable    : IDcomparison : value op value\n       value      : ID\n                  | expression\n       op         : GREATER\n                  | SMALLER\n                  | GREATER_OR_EQUAL\n                  | SMALLER_OR_EQUAL\n                  | EQUAL_COMPARE\n                  | NOT_EQUALlogic_operation : logic_value logic_recu\n                       | negation\n\n       logic_recu      : logic_op logic_value\n                       | logic_op logic_value logic_recu\n        \n\n       logic_value     : negation\n                       | comparison\n                       | ID\n\n       negation        : NOT comparison\n                       | NOT ID\n                       \n       logic_op        : AND\n                       | ORswitch_statement : SWITCH ID LLLAVE cases RLLAVE\n\n                  cases : CASE values POINTS codigo \n                        | CASE values POINTS codigo more\n\n                  more : cases \n                       | DEFAULT POINTS codigoarray_declaration : VAR ID LCORCHE capacity RCORCHE data_types\n                         | VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content\n\n       capacity : INTEGER \n                | ID\n                | expressionarray_var : ID LCORCHE index RCORCHE\n         \n           index : ID\n                 | INTEGER\n                 | expressionarray_assignment : array_var EQUAL somethingmap_declaration : VAR ID LCORCHE data_types RCORCHE data_typesmap_var : ID LCORCHE key RCORCHE\n           key : ID \n               | values\n               | operationsmap_assignment : array_var EQUAL somethingfunc_declaration : FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE\n                        | FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN return_value RLLAVE\n\n                return_value : retorno COLON\n                             | retorno\n                \n                retorno : ID \n                        | values\n                        | operations\n                        | data_structure\n                        \n                params : ID data_types \n                       | more_params\n                       \n                more_params : ID data_types COMA paramsimpresion : PRINT LPAREN expression RPARENexpression : something_ex\n                  | something_ex adicionaEx\n\n       adicionaEx : op something_ex\n                  | op something_ex adicionaEx\n\n    something_ex : ID\n                 | INTEGER\n                 | FLOAT\n                 | data_structure\n                 | funciones\n\n              op : PLUS\n                 | TIMES\n                 | DIVIDE\n                 | MINUS'
    
_lr_action_items = {'PRINT':([0,70,118,119,229,230,231,258,261,277,295,],[21,21,21,21,21,21,21,21,21,21,21,]),'FOR':([0,70,118,119,229,230,231,258,261,277,295,],[23,23,23,23,23,23,23,23,23,23,23,]),'VAR':([0,70,118,119,229,230,231,258,261,277,295,],[28,28,28,28,28,28,28,28,28,28,28,]),'ID':([0,23,28,37,38,39,41,49,53,57,59,60,61,62,63,64,65,66,67,68,69,70,78,80,81,82,84,85,86,87,88,89,90,118,119,120,121,122,129,130,158,178,186,187,188,189,190,191,192,193,194,200,202,203,207,215,229,230,231,233,246,257,258,259,261,274,277,280,282,287,295,296,303,305,],[29,74,83,91,92,93,95,97,110,115,115,-116,-117,-118,-119,-120,-121,-175,-176,-177,-178,29,124,128,-131,-132,131,141,149,150,151,152,124,29,29,124,165,167,171,180,210,180,-37,-38,-39,-40,-41,-42,-43,-44,-45,223,227,228,232,240,29,29,29,232,269,-110,29,210,29,-111,29,269,293,297,29,297,269,293,]),'APPEND':([0,23,41,49,53,57,59,60,61,62,63,64,65,66,67,68,69,70,78,80,81,82,84,85,90,118,119,120,122,129,130,178,229,230,231,246,258,261,277,280,282,287,295,296,303,305,],[32,32,32,32,32,32,32,-116,-117,-118,-119,-120,-121,-175,-176,-177,-178,32,32,32,-131,-132,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'LEN':([0,23,41,49,53,57,59,60,61,62,63,64,65,66,67,68,69,70,78,80,81,82,84,85,90,118,119,120,122,129,130,178,229,230,231,246,258,261,277,280,282,287,295,296,303,305,],[33,33,33,33,33,33,33,-116,-117,-118,-119,-120,-121,-175,-176,-177,-178,33,33,33,-131,-132,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'COPY':([0,23,41,49,53,57,59,60,61,62,63,64,65,66,67,68,69,70,78,80,81,82,84,85,90,118,119,120,122,129,130,178,229,230,231,246,258,261,277,280,282,287,295,296,303,305,],[34,34,34,34,34,34,34,-116,-117,-118,-119,-120,-121,-175,-176,-177,-178,34,34,34,-131,-132,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'DELETE':([0,23,41,49,53,57,59,60,61,62,63,64,65,66,67,68,69,70,78,80,81,82,84,85,90,118,119,120,122,129,130,178,229,230,231,246,258,261,277,280,282,287,295,296,303,305,],[35,35,35,35,35,35,35,-116,-117,-118,-119,-120,-121,-175,-176,-177,-178,35,35,35,-131,-132,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'IF':([0,70,118,119,229,230,231,258,261,277,295,],[36,36,36,36,36,36,36,36,36,36,36,]),'TYPE':([0,70,118,119,229,230,231,258,261,277,295,],[37,37,37,37,37,37,37,37,37,37,37,]),'SWITCH':([0,70,118,119,229,230,231,258,261,277,295,],[38,38,38,38,38,38,38,38,38,38,38,]),'FUNC':([0,70,118,119,229,230,231,258,261,277,295,],[39,39,39,39,39,39,39,39,39,39,39,]),'INTEGER':([0,23,41,49,53,57,59,60,61,62,63,64,65,66,67,68,69,70,78,80,81,82,84,85,90,118,119,120,121,122,129,130,178,200,209,229,230,231,246,258,261,277,280,282,287,295,296,303,305,],[30,30,30,102,102,30,30,-116,-117,-118,-119,-120,-121,-175,-176,-177,-178,30,30,30,-131,-132,139,145,30,30,30,30,166,168,172,184,184,225,225,30,30,30,102,30,30,30,102,292,102,30,102,102,292,]),'FLOAT':([0,23,41,49,53,57,59,60,61,62,63,64,65,66,67,68,69,70,78,80,81,82,84,85,90,118,119,120,122,129,130,178,200,209,229,230,231,246,258,261,277,280,282,287,295,296,303,305,],[31,31,31,103,103,31,31,-116,-117,-118,-119,-120,-121,-175,-176,-177,-178,31,31,31,-131,-132,133,103,31,31,31,31,103,173,31,31,226,226,31,31,31,103,31,31,31,103,31,103,31,103,103,31,]),'NOT':([0,23,49,53,70,80,81,82,84,85,118,119,122,129,229,230,231,246,258,261,277,280,287,295,296,303,],[41,41,41,41,41,41,-131,-132,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,27,29,30,31,40,42,43,44,45,46,47,48,50,51,52,54,55,56,58,75,76,77,79,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,123,124,125,126,127,128,131,132,133,134,135,136,137,139,159,160,161,170,171,172,173,174,175,176,177,179,186,187,188,189,190,191,192,193,194,197,198,199,201,213,214,219,235,243,244,245,248,249,250,251,255,265,271,272,273,279,281,288,304,306,309,313,314,],[0,-2,-4,-5,-6,-7,-9,-10,-12,-13,-14,-16,-18,-20,-22,-24,-26,-28,-30,-31,-166,-67,-123,-170,-171,-172,-173,-50,-1,-3,-8,-11,-15,-17,-19,-21,-23,-25,-27,-29,-167,-115,-174,-49,-122,-129,-130,-147,-57,-58,-59,-60,-32,-33,-34,-35,-36,-46,-47,-48,-94,-95,-49,-97,-98,-170,-168,-113,-114,-124,-126,-127,-128,-104,-75,-76,-77,-78,-79,-83,-105,-165,-169,-61,-125,-69,-68,-70,-71,-72,-73,-74,-82,-37,-38,-39,-40,-41,-42,-43,-44,-45,-143,-90,-149,-101,-62,-63,-80,-133,-138,-148,-84,-100,-99,-102,-103,-109,-81,-106,-107,-108,-139,-52,-64,-51,-85,-155,-154,-86,]),'COLON':([2,3,7,8,12,13,14,15,16,17,18,19,22,24,27,29,30,31,40,42,58,73,75,76,77,79,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,123,124,125,126,127,128,131,132,133,134,135,136,137,139,159,160,164,165,166,170,171,172,173,174,175,176,177,179,186,187,188,189,190,191,192,193,194,197,198,199,201,219,243,244,245,248,249,250,251,265,279,281,297,299,300,301,302,304,306,314,],[43,44,45,46,47,48,50,51,52,54,55,56,-166,-67,-123,-170,-171,-172,-173,-50,-167,120,-115,-174,-49,-122,-129,-130,-147,-57,-58,-59,-60,-32,-33,-34,-35,-36,-46,-47,-48,-94,-95,-49,-97,-98,-170,-168,-113,-114,-124,-126,-127,-128,-104,-75,-76,-77,-78,-79,-83,-105,-165,-169,215,-104,-105,-125,-69,-68,-70,-71,-72,-73,-74,-82,-37,-38,-39,-40,-41,-42,-43,-44,-45,-143,-90,-149,-101,-80,-138,-148,-84,-100,-99,-102,-103,-81,-139,-52,-158,310,-159,-160,-161,-51,-85,-86,]),'RLLAVE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,27,29,30,31,40,42,43,44,45,46,47,48,50,51,52,54,55,56,58,75,76,77,79,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,123,124,125,126,127,128,131,132,133,134,135,136,137,139,159,160,161,162,163,170,171,172,173,174,175,176,177,179,186,187,188,189,190,191,192,193,194,197,198,199,201,208,213,214,219,233,235,243,244,245,248,249,250,251,252,253,254,255,257,265,266,267,268,269,271,272,273,274,275,278,279,281,283,284,288,289,290,297,298,299,300,301,302,304,306,307,308,309,310,311,313,314,],[-2,-4,-5,-6,-7,-9,-10,-12,-13,-14,-16,-18,-20,-22,-24,-26,-28,-30,-31,-166,-67,-123,-170,-171,-172,-173,-50,-1,-3,-8,-11,-15,-17,-19,-21,-23,-25,-27,-29,-167,-115,-174,-49,-122,-129,-130,-147,-57,-58,-59,-60,-32,-33,-34,-35,-36,-46,-47,-48,-94,-95,-49,-97,-98,-170,-168,161,-113,-114,-124,-126,-127,-128,-104,-75,-76,-77,-78,-79,-83,-105,-165,-169,-61,213,214,-125,-69,-68,-70,-71,-72,-73,-74,-82,-37,-38,-39,-40,-41,-42,-43,-44,-45,-143,-90,-149,-101,235,-62,-63,-80,255,-133,-138,-148,-84,-100,-99,-102,-103,271,272,273,-109,-110,-81,281,-55,-56,-170,-106,-107,-108,-111,-134,288,-139,-52,-135,-136,-64,-54,304,-158,309,-157,-159,-160,-161,-51,-85,-137,313,-155,-156,-53,-154,-86,]),'DEFAULT':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,27,29,30,31,40,42,43,44,45,46,47,48,50,51,52,54,55,56,58,75,76,77,79,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,123,124,125,126,127,128,131,132,133,134,135,136,137,139,159,160,161,170,171,172,173,174,175,176,177,179,186,187,188,189,190,191,192,193,194,197,198,199,201,213,214,219,235,243,244,245,248,249,250,251,255,265,271,272,273,275,279,281,288,304,306,309,313,314,],[-2,-4,-5,-6,-7,-9,-10,-12,-13,-14,-16,-18,-20,-22,-24,-26,-28,-30,-31,-166,-67,-123,-170,-171,-172,-173,-50,-1,-3,-8,-11,-15,-17,-19,-21,-23,-25,-27,-29,-167,-115,-174,-49,-122,-129,-130,-147,-57,-58,-59,-60,-32,-33,-34,-35,-36,-46,-47,-48,-94,-95,-49,-97,-98,-170,-168,-113,-114,-124,-126,-127,-128,-104,-75,-76,-77,-78,-79,-83,-105,-165,-169,-61,-125,-69,-68,-70,-71,-72,-73,-74,-82,-37,-38,-39,-40,-41,-42,-43,-44,-45,-143,-90,-149,-101,-62,-63,-80,-133,-138,-148,-84,-100,-99,-102,-103,-109,-81,-106,-107,-108,285,-139,-52,-64,-51,-85,-155,-154,-86,]),'CASE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,27,29,30,31,40,42,43,44,45,46,47,48,50,51,52,54,55,56,58,75,76,77,79,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,123,124,125,126,127,128,131,132,133,134,135,136,137,139,157,159,160,161,170,171,172,173,174,175,176,177,179,186,187,188,189,190,191,192,193,194,197,198,199,201,213,214,219,235,243,244,245,248,249,250,251,255,265,271,272,273,275,279,281,288,304,306,309,313,314,],[-2,-4,-5,-6,-7,-9,-10,-12,-13,-14,-16,-18,-20,-22,-24,-26,-28,-30,-31,-166,-67,-123,-170,-171,-172,-173,-50,-1,-3,-8,-11,-15,-17,-19,-21,-23,-25,-27,-29,-167,-115,-174,-49,-122,-129,-130,-147,-57,-58,-59,-60,-32,-33,-34,-35,-36,-46,-47,-48,-94,-95,-49,-97,-98,-170,-168,-113,-114,-124,-126,-127,-128,-104,-75,-76,-77,-78,-79,-83,-105,209,-165,-169,-61,-125,-69,-68,-70,-71,-72,-73,-74,-82,-37,-38,-39,-40,-41,-42,-43,-44,-45,-143,-90,-149,-101,-62,-63,-80,-133,-138,-148,-84,-100,-99,-102,-103,-109,-81,-106,-107,-108,209,-139,-52,-64,-51,-85,-155,-154,-86,]),'RETURN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,27,29,30,31,40,42,43,44,45,46,47,48,50,51,52,54,55,56,58,75,76,77,79,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,123,124,125,126,127,128,131,132,133,134,135,136,137,139,159,160,161,170,171,172,173,174,175,176,177,179,186,187,188,189,190,191,192,193,194,197,198,199,201,213,214,219,235,243,244,245,248,249,250,251,255,265,271,272,273,277,279,281,286,288,304,306,309,313,314,],[-2,-4,-5,-6,-7,-9,-10,-12,-13,-14,-16,-18,-20,-22,-24,-26,-28,-30,-31,-166,-67,-123,-170,-171,-172,-173,-50,-1,-3,-8,-11,-15,-17,-19,-21,-23,-25,-27,-29,-167,-115,-174,-49,-122,-129,-130,-147,-57,-58,-59,-60,-32,-33,-34,-35,-36,-46,-47,-48,-94,-95,-49,-97,-98,-170,-168,-113,-114,-124,-126,-127,-128,-104,-75,-76,-77,-78,-79,-83,-105,-165,-169,-61,-125,-69,-68,-70,-71,-72,-73,-74,-82,-37,-38,-39,-40,-41,-42,-43,-44,-45,-143,-90,-149,-101,-62,-63,-80,-133,-138,-148,-84,-100,-99,-102,-103,-109,-81,-106,-107,-108,287,-139,-52,296,-64,-51,-85,-155,-154,-86,]),'GREATER':([3,8,13,22,25,29,30,31,40,42,58,74,75,76,77,95,97,98,102,103,106,110,111,115,116,124,128,131,133,134,139,141,145,146,160,167,168,169,171,172,173,174,180,184,197,199,201,248,249,250,251,269,292,293,297,302,],[-115,-174,-49,60,60,-114,-171,-172,-173,-50,-167,-114,-115,-174,-49,-114,-114,-173,-171,-172,-115,-114,-49,-170,60,-114,-114,-114,-172,-115,-171,-114,-171,-115,-169,-114,-171,-115,-114,-171,-172,-115,-170,-171,-143,-149,-101,-100,-99,-102,-103,-114,-171,-170,-114,-173,]),'SMALLER':([3,8,13,22,25,29,30,31,40,42,58,74,75,76,77,95,97,98,102,103,106,110,111,115,116,124,128,131,133,134,139,141,145,146,160,167,168,169,171,172,173,174,180,184,197,199,201,248,249,250,251,269,292,293,297,302,],[-115,-174,-49,61,61,-114,-171,-172,-173,-50,-167,-114,-115,-174,-49,-114,-114,-173,-171,-172,-115,-114,-49,-170,61,-114,-114,-114,-172,-115,-171,-114,-171,-115,-169,-114,-171,-115,-114,-171,-172,-115,-170,-171,-143,-149,-101,-100,-99,-102,-103,-114,-171,-170,-114,-173,]),'GREATER_OR_EQUAL':([3,8,13,22,25,29,30,31,40,42,58,74,75,76,77,95,97,98,102,103,106,110,111,115,116,124,128,131,133,134,139,141,145,146,160,167,168,169,171,172,173,174,180,184,197,199,201,248,249,250,251,269,292,293,297,302,],[-115,-174,-49,62,62,-114,-171,-172,-173,-50,-167,-114,-115,-174,-49,-114,-114,-173,-171,-172,-115,-114,-49,-170,62,-114,-114,-114,-172,-115,-171,-114,-171,-115,-169,-114,-171,-115,-114,-171,-172,-115,-170,-171,-143,-149,-101,-100,-99,-102,-103,-114,-171,-170,-114,-173,]),'SMALLER_OR_EQUAL':([3,8,13,22,25,29,30,31,40,42,58,74,75,76,77,95,97,98,102,103,106,110,111,115,116,124,128,131,133,134,139,141,145,146,160,167,168,169,171,172,173,174,180,184,197,199,201,248,249,250,251,269,292,293,297,302,],[-115,-174,-49,63,63,-114,-171,-172,-173,-50,-167,-114,-115,-174,-49,-114,-114,-173,-171,-172,-115,-114,-49,-170,63,-114,-114,-114,-172,-115,-171,-114,-171,-115,-169,-114,-171,-115,-114,-171,-172,-115,-170,-171,-143,-149,-101,-100,-99,-102,-103,-114,-171,-170,-114,-173,]),'EQUAL_COMPARE':([3,8,13,22,25,29,30,31,40,42,58,74,75,76,77,95,97,98,102,103,106,110,111,115,116,124,128,131,133,134,139,141,145,146,160,167,168,169,171,172,173,174,180,184,197,199,201,248,249,250,251,269,292,293,297,302,],[-115,-174,-49,64,64,-114,-171,-172,-173,-50,-167,-114,-115,-174,-49,-114,-114,-173,-171,-172,-115,-114,-49,-170,64,-114,-114,-114,-172,-115,-171,-114,-171,-115,-169,-114,-171,-115,-114,-171,-172,-115,-170,-171,-143,-149,-101,-100,-99,-102,-103,-114,-171,-170,-114,-173,]),'NOT_EQUAL':([3,8,13,22,25,29,30,31,40,42,58,74,75,76,77,95,97,98,102,103,106,110,111,115,116,124,128,131,133,134,139,141,145,146,160,167,168,169,171,172,173,174,180,184,197,199,201,248,249,250,251,269,292,293,297,302,],[-115,-174,-49,65,65,-114,-171,-172,-173,-50,-167,-114,-115,-174,-49,-114,-114,-173,-171,-172,-115,-114,-49,-170,65,-114,-114,-114,-172,-115,-171,-114,-171,-115,-169,-114,-171,-115,-114,-171,-172,-115,-170,-171,-143,-149,-101,-100,-99,-102,-103,-114,-171,-170,-114,-173,]),'PLUS':([3,8,13,22,25,29,30,31,40,42,58,74,75,76,77,95,97,98,102,103,106,110,111,115,116,124,128,131,133,134,139,141,145,146,160,167,168,169,171,172,173,174,180,184,197,199,201,248,249,250,251,269,292,293,297,302,],[-115,-174,-49,66,66,-114,-171,-172,-173,-50,-167,-114,-115,-174,-49,-114,-114,-173,-171,-172,-115,-114,-49,-170,66,-114,-114,-114,-172,-115,-171,-114,-171,-115,-169,-114,-171,-115,-114,-171,-172,-115,-170,-171,-143,-149,-101,-100,-99,-102,-103,-114,-171,-170,-114,-173,]),'TIMES':([3,8,13,22,25,29,30,31,40,42,58,74,75,76,77,95,97,98,102,103,106,110,111,115,116,124,128,131,133,134,139,141,145,146,160,167,168,169,171,172,173,174,180,184,197,199,201,248,249,250,251,269,292,293,297,302,],[-115,-174,-49,67,67,-114,-171,-172,-173,-50,-167,-114,-115,-174,-49,-114,-114,-173,-171,-172,-115,-114,-49,-170,67,-114,-114,-114,-172,-115,-171,-114,-171,-115,-169,-114,-171,-115,-114,-171,-172,-115,-170,-171,-143,-149,-101,-100,-99,-102,-103,-114,-171,-170,-114,-173,]),'DIVIDE':([3,8,13,22,25,29,30,31,40,42,58,74,75,76,77,95,97,98,102,103,106,110,111,115,116,124,128,131,133,134,139,141,145,146,160,167,168,169,171,172,173,174,180,184,197,199,201,248,249,250,251,269,292,293,297,302,],[-115,-174,-49,68,68,-114,-171,-172,-173,-50,-167,-114,-115,-174,-49,-114,-114,-173,-171,-172,-115,-114,-49,-170,68,-114,-114,-114,-172,-115,-171,-114,-171,-115,-169,-114,-171,-115,-114,-171,-172,-115,-170,-171,-143,-149,-101,-100,-99,-102,-103,-114,-171,-170,-114,-173,]),'MINUS':([3,8,13,22,25,29,30,31,40,42,58,74,75,76,77,95,97,98,102,103,106,110,111,115,116,124,128,131,133,134,139,141,145,146,160,167,168,169,171,172,173,174,180,184,197,199,201,248,249,250,251,269,292,293,297,302,],[-115,-174,-49,69,69,-114,-171,-172,-173,-50,-167,-114,-115,-174,-49,-114,-114,-173,-171,-172,-115,-114,-49,-170,69,-114,-114,-114,-172,-115,-171,-114,-171,-115,-169,-114,-171,-115,-114,-171,-172,-115,-170,-171,-143,-149,-101,-100,-99,-102,-103,-114,-171,-170,-114,-173,]),'AND':([5,22,26,27,29,30,31,40,42,58,71,74,75,76,77,94,95,97,107,110,115,116,123,124,125,126,127,128,131,136,141,160,167,171,176,197,199,201,248,249,250,251,269,297,],[-127,-166,81,-126,-128,-171,-172,-173,-50,-167,-127,-128,-115,-174,-49,-129,-130,-128,-127,-128,-170,-168,-113,-114,81,-126,-127,-128,-128,-127,-128,-169,-128,-128,-127,-143,-149,-101,-100,-99,-102,-103,-128,-128,]),'OR':([5,22,26,27,29,30,31,40,42,58,71,74,75,76,77,94,95,97,107,110,115,116,123,124,125,126,127,128,131,136,141,160,167,171,176,197,199,201,248,249,250,251,269,297,],[-127,-166,82,-126,-128,-171,-172,-173,-50,-167,-127,-128,-115,-174,-49,-129,-130,-128,-127,-128,-170,-168,-113,-114,82,-126,-127,-128,-128,-127,-128,-169,-128,-128,-127,-143,-149,-101,-100,-99,-102,-103,-128,-128,]),'EQUAL':([13,16,83,197,198,],[49,53,129,-143,-90,]),'LPAREN':([21,32,33,34,35,36,93,140,],[57,86,87,88,89,90,158,196,]),'RPAREN':([22,30,31,40,42,58,75,76,77,101,104,105,114,115,116,123,124,150,153,154,155,160,186,187,188,189,190,191,192,193,194,197,199,201,211,212,223,224,225,226,227,228,237,248,249,250,251,276,291,292,293,294,312,],[-166,-171,-172,-173,-50,-167,-115,-174,-49,-32,-35,-36,159,-170,-168,-113,-114,201,204,205,206,-169,-37,-38,-39,-40,-41,-42,-43,-44,-45,-143,-149,-101,238,-163,248,249,-33,-34,250,251,-162,-100,-99,-102,-103,-164,306,-87,-88,-89,314,]),'LLLAVE':([22,23,27,30,31,40,42,58,71,72,75,76,77,79,92,94,95,115,116,123,124,125,126,127,128,156,160,170,186,187,188,189,190,191,192,193,194,197,199,201,204,205,206,221,239,242,248,249,250,251,260,262,263,264,],[-166,70,-123,-171,-172,-173,-50,-167,118,119,-115,-174,-49,-122,157,-129,-130,-170,-168,-113,-114,-124,-126,-127,-128,207,-169,-125,-37,-38,-39,-40,-41,-42,-43,-44,-45,-143,-149,-101,229,230,231,246,261,246,-100,-99,-102,-103,277,-65,-66,246,]),'RCORCHE':([22,27,30,31,40,42,58,75,76,77,79,94,95,101,103,104,105,107,108,115,116,123,124,125,126,127,128,130,138,141,142,143,144,145,146,147,148,160,167,168,169,170,178,180,181,183,184,185,186,187,188,189,190,191,192,193,194,197,199,201,216,222,248,249,250,251,],[-166,-123,-171,-172,-173,-50,-167,-115,-174,-49,-122,-129,-130,-32,-34,-35,-36,-47,-48,-170,-168,-113,-114,-124,-126,-127,-128,182,195,-91,197,198,199,-33,-46,-151,-152,-169,-144,-33,-46,-125,217,-141,218,220,-140,-142,-37,-38,-39,-40,-41,-42,-43,-44,-45,-143,-149,-101,241,247,-100,-99,-102,-103,]),'COMA':([22,27,30,31,40,42,58,75,76,77,79,94,95,101,102,103,104,105,106,107,108,115,116,123,124,125,126,127,128,149,151,152,160,170,186,187,188,189,190,191,192,193,194,197,199,201,237,248,249,250,251,266,267,268,269,270,289,291,292,293,294,],[-166,-123,-171,-172,-173,-50,-167,-115,-174,-49,-122,-129,-130,-32,-33,-34,-35,-36,-46,-47,-48,-170,-168,-113,-114,-124,-126,-127,-128,200,202,203,-169,-125,-37,-38,-39,-40,-41,-42,-43,-44,-45,-143,-149,-101,259,-100,-99,-102,-103,280,-55,-56,-170,282,303,305,-87,-88,-89,]),'DEQUAL':([29,74,],[84,121,]),'LCORCHE':([29,74,83,84,95,97,110,115,124,128,129,131,141,167,171,180,196,269,293,297,],[85,122,130,138,122,122,122,122,122,122,178,122,122,122,122,122,222,122,122,122,]),'STRING':([49,53,84,85,122,129,200,209,246,280,287,296,303,],[101,101,132,101,101,177,101,101,101,101,101,101,101,]),'TRUE':([49,53,85,90,122,200,209,246,280,287,296,303,],[104,104,104,154,104,104,104,104,104,104,104,104,]),'FALSE':([49,53,85,90,122,200,209,246,280,287,296,303,],[105,105,105,155,105,105,105,105,105,105,105,105,]),'MAKE':([84,129,],[140,140,]),'STRUCT':([91,],[156,]),'POINTS':([101,104,105,225,226,236,285,],[-32,-35,-36,-33,-34,258,295,]),'INT32':([130,182,195,210,217,218,220,232,234,238,241,247,256,],[186,186,186,186,186,186,186,-112,186,186,186,186,186,]),'INT64':([130,182,195,210,217,218,220,232,234,238,241,247,256,],[187,187,187,187,187,187,187,-112,187,187,187,187,187,]),'FLOAT32':([130,182,195,210,217,218,220,232,234,238,241,247,256,],[188,188,188,188,188,188,188,-112,188,188,188,188,188,]),'FLOAT64':([130,182,195,210,217,218,220,232,234,238,241,247,256,],[189,189,189,189,189,189,189,-112,189,189,189,189,189,]),'BYTE':([130,182,195,210,217,218,220,232,234,238,241,247,256,],[190,190,190,190,190,190,190,-112,190,190,190,190,190,]),'WINT':([130,182,195,210,217,218,220,232,234,238,241,247,256,],[191,191,191,191,191,191,191,-112,191,191,191,191,191,]),'WFLOAT':([130,182,195,210,217,218,220,232,234,238,241,247,256,],[192,192,192,192,192,192,192,-112,192,192,192,192,192,]),'WSTRING':([130,182,195,210,217,218,220,232,234,238,241,247,256,],[193,193,193,193,193,193,193,-112,193,193,193,193,193,]),'BOOL':([130,182,195,210,217,218,220,232,234,238,241,247,256,],[194,194,194,194,194,194,194,-112,194,194,194,194,194,]),'INCREASE':([240,],[262,]),'DECREASE':([240,],[263,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigo':([0,70,118,119,229,230,231,258,261,277,295,],[1,117,162,163,252,253,254,275,278,286,307,]),'impresion':([0,70,118,119,229,230,231,258,261,277,295,],[2,2,2,2,2,2,2,2,2,2,2,]),'expression':([0,23,41,49,53,57,70,78,80,84,85,90,118,119,120,122,129,130,178,229,230,231,246,258,261,277,280,282,287,295,296,303,305,],[3,75,75,106,106,114,3,75,75,134,146,75,3,3,75,169,174,185,185,3,3,3,106,3,3,3,106,294,106,3,106,106,294,]),'cicloFor':([0,70,118,119,229,230,231,258,261,277,295,],[4,4,4,4,4,4,4,4,4,4,4,]),'comparison':([0,23,41,49,53,70,80,84,85,90,118,119,120,122,129,229,230,231,246,258,261,277,280,287,295,296,303,],[5,71,94,107,107,5,127,136,107,153,5,5,164,107,176,5,5,5,107,5,5,5,107,107,5,107,107,]),'logic_operation':([0,23,49,53,70,84,85,118,119,122,129,229,230,231,246,258,261,277,280,287,295,296,303,],[6,72,108,108,6,135,108,6,6,108,175,6,6,6,108,6,6,6,108,108,6,108,108,]),'decVar':([0,70,118,119,229,230,231,258,261,277,295,],[7,7,7,7,7,7,7,7,7,7,7,]),'funciones':([0,23,41,49,53,57,59,70,78,80,84,85,90,118,119,120,122,129,130,178,229,230,231,246,258,261,277,280,282,287,295,296,303,305,],[8,76,76,76,76,76,76,8,76,76,76,76,76,8,8,76,76,76,76,76,8,8,8,76,8,8,8,76,76,76,8,76,76,76,]),'SenIF':([0,70,118,119,229,230,231,258,261,277,295,],[9,9,9,9,9,9,9,9,9,9,9,]),'SenStruct':([0,70,118,119,229,230,231,258,261,277,295,],[10,10,10,10,10,10,10,10,10,10,10,]),'switch_statement':([0,70,118,119,229,230,231,258,261,277,295,],[11,11,11,11,11,11,11,11,11,11,11,]),'array_declaration':([0,70,118,119,229,230,231,258,261,277,295,],[12,12,12,12,12,12,12,12,12,12,12,]),'array_var':([0,23,41,49,53,57,59,70,78,80,84,85,90,118,119,120,122,129,130,178,229,230,231,246,258,261,277,280,282,287,295,296,303,305,],[13,77,77,77,111,77,77,13,77,77,77,77,77,13,13,77,77,77,77,77,13,13,13,77,13,13,13,77,77,77,13,77,77,77,]),'array_assignment':([0,70,118,119,229,230,231,258,261,277,295,],[14,14,14,14,14,14,14,14,14,14,14,]),'slice_declaration':([0,70,118,119,229,230,231,258,261,277,295,],[15,15,15,15,15,15,15,15,15,15,15,]),'slice_var':([0,70,118,119,229,230,231,258,261,277,295,],[16,16,16,16,16,16,16,16,16,16,16,]),'slice_assignment':([0,70,118,119,229,230,231,258,261,277,295,],[17,17,17,17,17,17,17,17,17,17,17,]),'map_declaration':([0,70,118,119,229,230,231,258,261,277,295,],[18,18,18,18,18,18,18,18,18,18,18,]),'map_assignment':([0,70,118,119,229,230,231,258,261,277,295,],[19,19,19,19,19,19,19,19,19,19,19,]),'func_declaration':([0,70,118,119,229,230,231,258,261,277,295,],[20,20,20,20,20,20,20,20,20,20,20,]),'something_ex':([0,23,41,49,53,57,59,70,78,80,84,85,90,118,119,120,122,129,130,178,229,230,231,246,258,261,277,280,282,287,295,296,303,305,],[22,22,22,22,22,22,116,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'decVarOne':([0,23,70,118,119,229,230,231,258,261,277,295,],[24,73,24,24,24,24,24,24,24,24,24,24,]),'value':([0,23,41,49,53,70,78,80,84,85,90,118,119,120,122,129,229,230,231,246,258,261,277,280,287,295,296,303,],[25,25,25,25,25,25,123,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'logic_value':([0,23,49,53,70,80,84,85,118,119,122,129,229,230,231,246,258,261,277,280,287,295,296,303,],[26,26,26,26,26,125,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'negation':([0,23,49,53,70,80,84,85,118,119,122,129,229,230,231,246,258,261,277,280,287,295,296,303,],[27,27,27,27,27,126,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'data_structure':([0,23,41,49,53,57,59,70,78,80,84,85,90,118,119,120,122,129,130,178,229,230,231,246,258,261,277,280,282,287,295,296,303,305,],[40,40,40,98,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,302,40,302,40,40,]),'map_var':([0,23,41,49,53,57,59,70,78,80,84,85,90,118,119,120,122,129,130,178,229,230,231,246,258,261,277,280,282,287,295,296,303,305,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'adicionaEx':([22,116,],[58,160,]),'op':([22,25,116,],[59,78,59,]),'logic_recu':([26,125,],[79,170,]),'logic_op':([26,125,],[80,80,]),'something':([49,],[96,]),'values':([49,53,85,122,200,209,246,280,287,296,303,],[99,112,147,147,224,236,267,267,300,300,267,]),'operations':([49,53,85,122,246,280,287,296,303,],[100,113,148,148,268,268,301,301,268,]),'something_s':([53,],[109,]),'funM':([84,129,],[137,179,]),'index':([85,122,],[142,142,]),'index_s':([85,],[143,]),'key':([85,122,],[144,144,]),'capacity':([130,178,],[181,216,]),'data_types':([130,182,195,210,217,218,220,234,238,241,247,256,],[183,219,221,237,242,243,244,257,260,264,270,274,]),'cases':([157,275,],[208,284,]),'params':([158,259,],[211,276,]),'more_params':([158,259,],[212,212,]),'declaration':([207,],[233,]),'variable':([207,233,],[234,256,]),'incre':([215,],[239,]),'arr_content':([221,242,264,],[245,265,279,]),'items':([246,280,303,],[266,289,289,]),'more':([275,],[283,]),'more_items':([280,303,],[290,311,]),'cap':([282,305,],[291,312,]),'return_value':([287,],[298,]),'retorno':([287,296,],[299,308,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigo","S'",1,None,None,None),
  ('codigo -> impresion COLON','codigo',2,'p_coddigo','syntactic.py',17),
  ('codigo -> impresion','codigo',1,'p_coddigo','syntactic.py',18),
  ('codigo -> expression COLON','codigo',2,'p_coddigo','syntactic.py',20),
  ('codigo -> expression','codigo',1,'p_coddigo','syntactic.py',21),
  ('codigo -> cicloFor','codigo',1,'p_coddigo','syntactic.py',23),
  ('codigo -> comparison','codigo',1,'p_coddigo','syntactic.py',25),
  ('codigo -> logic_operation','codigo',1,'p_coddigo','syntactic.py',27),
  ('codigo -> decVar COLON','codigo',2,'p_coddigo','syntactic.py',29),
  ('codigo -> decVar','codigo',1,'p_coddigo','syntactic.py',30),
  ('codigo -> funciones','codigo',1,'p_coddigo','syntactic.py',32),
  ('codigo -> funciones COLON','codigo',2,'p_coddigo','syntactic.py',33),
  ('codigo -> SenIF','codigo',1,'p_coddigo','syntactic.py',35),
  ('codigo -> SenStruct','codigo',1,'p_coddigo','syntactic.py',37),
  ('codigo -> switch_statement','codigo',1,'p_coddigo','syntactic.py',39),
  ('codigo -> array_declaration COLON','codigo',2,'p_coddigo','syntactic.py',41),
  ('codigo -> array_declaration','codigo',1,'p_coddigo','syntactic.py',42),
  ('codigo -> array_var COLON','codigo',2,'p_coddigo','syntactic.py',43),
  ('codigo -> array_var','codigo',1,'p_coddigo','syntactic.py',44),
  ('codigo -> array_assignment COLON','codigo',2,'p_coddigo','syntactic.py',45),
  ('codigo -> array_assignment','codigo',1,'p_coddigo','syntactic.py',46),
  ('codigo -> slice_declaration COLON','codigo',2,'p_coddigo','syntactic.py',48),
  ('codigo -> slice_declaration','codigo',1,'p_coddigo','syntactic.py',49),
  ('codigo -> slice_var COLON','codigo',2,'p_coddigo','syntactic.py',50),
  ('codigo -> slice_var','codigo',1,'p_coddigo','syntactic.py',51),
  ('codigo -> slice_assignment COLON','codigo',2,'p_coddigo','syntactic.py',52),
  ('codigo -> slice_assignment','codigo',1,'p_coddigo','syntactic.py',53),
  ('codigo -> map_declaration COLON','codigo',2,'p_coddigo','syntactic.py',55),
  ('codigo -> map_declaration','codigo',1,'p_coddigo','syntactic.py',56),
  ('codigo -> map_assignment COLON','codigo',2,'p_coddigo','syntactic.py',57),
  ('codigo -> map_assignment','codigo',1,'p_coddigo','syntactic.py',58),
  ('codigo -> func_declaration','codigo',1,'p_coddigo','syntactic.py',60),
  ('values -> STRING','values',1,'p_values','syntactic.py',63),
  ('values -> INTEGER','values',1,'p_values','syntactic.py',64),
  ('values -> FLOAT','values',1,'p_values','syntactic.py',65),
  ('values -> TRUE','values',1,'p_values','syntactic.py',66),
  ('values -> FALSE','values',1,'p_values','syntactic.py',67),
  ('data_types -> INT32','data_types',1,'p_data_types','syntactic.py',70),
  ('data_types -> INT64','data_types',1,'p_data_types','syntactic.py',71),
  ('data_types -> FLOAT32','data_types',1,'p_data_types','syntactic.py',72),
  ('data_types -> FLOAT64','data_types',1,'p_data_types','syntactic.py',73),
  ('data_types -> BYTE','data_types',1,'p_data_types','syntactic.py',74),
  ('data_types -> WINT','data_types',1,'p_data_types','syntactic.py',75),
  ('data_types -> WFLOAT','data_types',1,'p_data_types','syntactic.py',76),
  ('data_types -> WSTRING','data_types',1,'p_data_types','syntactic.py',77),
  ('data_types -> BOOL','data_types',1,'p_data_types','syntactic.py',78),
  ('operations -> expression','operations',1,'p_operations','syntactic.py',81),
  ('operations -> comparison','operations',1,'p_operations','syntactic.py',82),
  ('operations -> logic_operation','operations',1,'p_operations','syntactic.py',83),
  ('data_structure -> array_var','data_structure',1,'p_data_structure','syntactic.py',86),
  ('data_structure -> map_var','data_structure',1,'p_data_structure','syntactic.py',87),
  ('arr_content -> LLLAVE items COMA more_items RLLAVE','arr_content',5,'p_arr_content','syntactic.py',90),
  ('arr_content -> LLLAVE items RLLAVE','arr_content',3,'p_arr_content','syntactic.py',91),
  ('more_items -> items COMA more_items','more_items',3,'p_arr_content','syntactic.py',93),
  ('more_items -> items','more_items',1,'p_arr_content','syntactic.py',94),
  ('items -> values','items',1,'p_arr_content','syntactic.py',96),
  ('items -> operations','items',1,'p_arr_content','syntactic.py',97),
  ('something -> ID','something',1,'p_something','syntactic.py',100),
  ('something -> data_structure','something',1,'p_something','syntactic.py',101),
  ('something -> values','something',1,'p_something','syntactic.py',102),
  ('something -> operations','something',1,'p_something','syntactic.py',103),
  ('cicloFor -> FOR LLLAVE codigo RLLAVE','cicloFor',4,'p_for','syntactic.py',108),
  ('cicloFor -> FOR comparison LLLAVE codigo RLLAVE','cicloFor',5,'p_for','syntactic.py',109),
  ('cicloFor -> FOR logic_operation LLLAVE codigo RLLAVE','cicloFor',5,'p_for','syntactic.py',110),
  ('cicloFor -> FOR decVarOne COLON comparison COLON incre LLLAVE codigo RLLAVE','cicloFor',9,'p_for','syntactic.py',111),
  ('incre -> ID INCREASE','incre',2,'p_for','syntactic.py',112),
  ('incre -> ID DECREASE','incre',2,'p_for','syntactic.py',113),
  ('decVar -> decVarOne','decVar',1,'p_decVar','syntactic.py',118),
  ('decVar -> VAR ID EQUAL INTEGER','decVar',4,'p_decVar','syntactic.py',119),
  ('decVar -> VAR ID EQUAL ID','decVar',4,'p_decVar','syntactic.py',120),
  ('decVar -> VAR ID EQUAL FLOAT','decVar',4,'p_decVar','syntactic.py',121),
  ('decVar -> VAR ID EQUAL expression','decVar',4,'p_decVar','syntactic.py',122),
  ('decVar -> VAR ID EQUAL logic_operation','decVar',4,'p_decVar','syntactic.py',123),
  ('decVar -> VAR ID EQUAL comparison','decVar',4,'p_decVar','syntactic.py',124),
  ('decVar -> VAR ID EQUAL STRING','decVar',4,'p_decVar','syntactic.py',125),
  ('decVar -> ID DEQUAL STRING','decVar',3,'p_decVar','syntactic.py',126),
  ('decVar -> ID DEQUAL FLOAT','decVar',3,'p_decVar','syntactic.py',127),
  ('decVar -> ID DEQUAL expression','decVar',3,'p_decVar','syntactic.py',128),
  ('decVar -> ID DEQUAL logic_operation','decVar',3,'p_decVar','syntactic.py',129),
  ('decVar -> ID DEQUAL comparison','decVar',3,'p_decVar','syntactic.py',130),
  ('slice_declaration -> VAR ID LCORCHE RCORCHE data_types','slice_declaration',5,'p_slice_declaration','syntactic.py',135),
  ('slice_declaration -> VAR ID EQUAL LCORCHE RCORCHE data_types arr_content','slice_declaration',7,'p_slice_declaration','syntactic.py',136),
  ('slice_declaration -> VAR ID EQUAL funM','slice_declaration',4,'p_slice_declaration','syntactic.py',137),
  ('slice_declaration -> ID DEQUAL funM','slice_declaration',3,'p_slice_declaration','syntactic.py',138),
  ('slice_declaration -> ID DEQUAL LCORCHE RCORCHE data_types arr_content','slice_declaration',6,'p_slice_declaration','syntactic.py',139),
  ('funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap RPAREN','funM',8,'p_slice_declaration','syntactic.py',142),
  ('funM -> MAKE LPAREN LCORCHE RCORCHE data_types COMA cap COMA cap RPAREN','funM',10,'p_slice_declaration','syntactic.py',143),
  ('cap -> INTEGER','cap',1,'p_slice_declaration','syntactic.py',145),
  ('cap -> ID','cap',1,'p_slice_declaration','syntactic.py',146),
  ('cap -> expression','cap',1,'p_slice_declaration','syntactic.py',147),
  ('slice_var -> ID LCORCHE index_s RCORCHE','slice_var',4,'p_slice_var','syntactic.py',150),
  ('index_s -> ID','index_s',1,'p_slice_var','syntactic.py',152),
  ('index_s -> INTEGER','index_s',1,'p_slice_var','syntactic.py',153),
  ('index_s -> expression','index_s',1,'p_slice_var','syntactic.py',154),
  ('slice_assignment -> slice_var EQUAL something_s','slice_assignment',3,'p_slice_assignment','syntactic.py',157),
  ('something_s -> ID','something_s',1,'p_slice_assignment','syntactic.py',159),
  ('something_s -> array_var','something_s',1,'p_slice_assignment','syntactic.py',160),
  ('something_s -> values','something_s',1,'p_slice_assignment','syntactic.py',161),
  ('something_s -> operations','something_s',1,'p_slice_assignment','syntactic.py',162),
  ('funciones -> APPEND LPAREN ID COMA values RPAREN','funciones',6,'p_funciones','syntactic.py',168),
  ('funciones -> APPEND LPAREN ID COMA ID RPAREN','funciones',6,'p_funciones','syntactic.py',169),
  ('funciones -> LEN LPAREN ID RPAREN','funciones',4,'p_funciones','syntactic.py',170),
  ('funciones -> COPY LPAREN ID COMA ID RPAREN','funciones',6,'p_funciones','syntactic.py',171),
  ('funciones -> DELETE LPAREN ID COMA ID RPAREN','funciones',6,'p_funciones','syntactic.py',172),
  ('decVarOne -> ID DEQUAL ID','decVarOne',3,'p_decVarOne','syntactic.py',175),
  ('decVarOne -> ID DEQUAL INTEGER','decVarOne',3,'p_decVarOne','syntactic.py',176),
  ('SenIF -> IF LPAREN comparison RPAREN LLLAVE codigo RLLAVE','SenIF',7,'p_if','syntactic.py',183),
  ('SenIF -> IF LPAREN TRUE RPAREN LLLAVE codigo RLLAVE','SenIF',7,'p_if','syntactic.py',184),
  ('SenIF -> IF LPAREN FALSE RPAREN LLLAVE codigo RLLAVE','SenIF',7,'p_if','syntactic.py',185),
  ('SenStruct -> TYPE ID STRUCT LLLAVE declaration RLLAVE','SenStruct',6,'p_struct','syntactic.py',188),
  ('declaration -> variable data_types','declaration',2,'p_struct','syntactic.py',190),
  ('declaration -> declaration variable data_types','declaration',3,'p_struct','syntactic.py',191),
  ('variable -> ID','variable',1,'p_struct','syntactic.py',193),
  ('comparison -> value op value','comparison',3,'p_comparison','syntactic.py',198),
  ('value -> ID','value',1,'p_comparison','syntactic.py',199),
  ('value -> expression','value',1,'p_comparison','syntactic.py',200),
  ('op -> GREATER','op',1,'p_comparison','syntactic.py',201),
  ('op -> SMALLER','op',1,'p_comparison','syntactic.py',202),
  ('op -> GREATER_OR_EQUAL','op',1,'p_comparison','syntactic.py',203),
  ('op -> SMALLER_OR_EQUAL','op',1,'p_comparison','syntactic.py',204),
  ('op -> EQUAL_COMPARE','op',1,'p_comparison','syntactic.py',205),
  ('op -> NOT_EQUAL','op',1,'p_comparison','syntactic.py',206),
  ('logic_operation -> logic_value logic_recu','logic_operation',2,'p_logic_operation','syntactic.py',209),
  ('logic_operation -> negation','logic_operation',1,'p_logic_operation','syntactic.py',210),
  ('logic_recu -> logic_op logic_value','logic_recu',2,'p_logic_operation','syntactic.py',212),
  ('logic_recu -> logic_op logic_value logic_recu','logic_recu',3,'p_logic_operation','syntactic.py',213),
  ('logic_value -> negation','logic_value',1,'p_logic_operation','syntactic.py',216),
  ('logic_value -> comparison','logic_value',1,'p_logic_operation','syntactic.py',217),
  ('logic_value -> ID','logic_value',1,'p_logic_operation','syntactic.py',218),
  ('negation -> NOT comparison','negation',2,'p_logic_operation','syntactic.py',220),
  ('negation -> NOT ID','negation',2,'p_logic_operation','syntactic.py',221),
  ('logic_op -> AND','logic_op',1,'p_logic_operation','syntactic.py',223),
  ('logic_op -> OR','logic_op',1,'p_logic_operation','syntactic.py',224),
  ('switch_statement -> SWITCH ID LLLAVE cases RLLAVE','switch_statement',5,'p_switch','syntactic.py',227),
  ('cases -> CASE values POINTS codigo','cases',4,'p_switch','syntactic.py',229),
  ('cases -> CASE values POINTS codigo more','cases',5,'p_switch','syntactic.py',230),
  ('more -> cases','more',1,'p_switch','syntactic.py',232),
  ('more -> DEFAULT POINTS codigo','more',3,'p_switch','syntactic.py',233),
  ('array_declaration -> VAR ID LCORCHE capacity RCORCHE data_types','array_declaration',6,'p_array_declaration','syntactic.py',236),
  ('array_declaration -> VAR ID EQUAL LCORCHE capacity RCORCHE data_types arr_content','array_declaration',8,'p_array_declaration','syntactic.py',237),
  ('capacity -> INTEGER','capacity',1,'p_array_declaration','syntactic.py',239),
  ('capacity -> ID','capacity',1,'p_array_declaration','syntactic.py',240),
  ('capacity -> expression','capacity',1,'p_array_declaration','syntactic.py',241),
  ('array_var -> ID LCORCHE index RCORCHE','array_var',4,'p_array_var','syntactic.py',244),
  ('index -> ID','index',1,'p_array_var','syntactic.py',246),
  ('index -> INTEGER','index',1,'p_array_var','syntactic.py',247),
  ('index -> expression','index',1,'p_array_var','syntactic.py',248),
  ('array_assignment -> array_var EQUAL something','array_assignment',3,'p_array_assignment','syntactic.py',251),
  ('map_declaration -> VAR ID LCORCHE data_types RCORCHE data_types','map_declaration',6,'p_map_declaration','syntactic.py',254),
  ('map_var -> ID LCORCHE key RCORCHE','map_var',4,'p_map_var','syntactic.py',257),
  ('key -> ID','key',1,'p_map_var','syntactic.py',258),
  ('key -> values','key',1,'p_map_var','syntactic.py',259),
  ('key -> operations','key',1,'p_map_var','syntactic.py',260),
  ('map_assignment -> array_var EQUAL something','map_assignment',3,'p_map_assignment','syntactic.py',263),
  ('func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE codigo RETURN retorno RLLAVE','func_declaration',11,'p_func_declaration','syntactic.py',266),
  ('func_declaration -> FUNC ID LPAREN params RPAREN data_types LLLAVE RETURN return_value RLLAVE','func_declaration',10,'p_func_declaration','syntactic.py',267),
  ('return_value -> retorno COLON','return_value',2,'p_func_declaration','syntactic.py',269),
  ('return_value -> retorno','return_value',1,'p_func_declaration','syntactic.py',270),
  ('retorno -> ID','retorno',1,'p_func_declaration','syntactic.py',272),
  ('retorno -> values','retorno',1,'p_func_declaration','syntactic.py',273),
  ('retorno -> operations','retorno',1,'p_func_declaration','syntactic.py',274),
  ('retorno -> data_structure','retorno',1,'p_func_declaration','syntactic.py',275),
  ('params -> ID data_types','params',2,'p_func_declaration','syntactic.py',277),
  ('params -> more_params','params',1,'p_func_declaration','syntactic.py',278),
  ('more_params -> ID data_types COMA params','more_params',4,'p_func_declaration','syntactic.py',280),
  ('impresion -> PRINT LPAREN expression RPAREN','impresion',4,'p_impresion','syntactic.py',286),
  ('expression -> something_ex','expression',1,'p_expression','syntactic.py',291),
  ('expression -> something_ex adicionaEx','expression',2,'p_expression','syntactic.py',292),
  ('adicionaEx -> op something_ex','adicionaEx',2,'p_expression','syntactic.py',294),
  ('adicionaEx -> op something_ex adicionaEx','adicionaEx',3,'p_expression','syntactic.py',295),
  ('something_ex -> ID','something_ex',1,'p_expression','syntactic.py',297),
  ('something_ex -> INTEGER','something_ex',1,'p_expression','syntactic.py',298),
  ('something_ex -> FLOAT','something_ex',1,'p_expression','syntactic.py',299),
  ('something_ex -> data_structure','something_ex',1,'p_expression','syntactic.py',300),
  ('something_ex -> funciones','something_ex',1,'p_expression','syntactic.py',301),
  ('op -> PLUS','op',1,'p_expression','syntactic.py',303),
  ('op -> TIMES','op',1,'p_expression','syntactic.py',304),
  ('op -> DIVIDE','op',1,'p_expression','syntactic.py',305),
  ('op -> MINUS','op',1,'p_expression','syntactic.py',306),
]
